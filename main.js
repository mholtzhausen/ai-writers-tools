/* Built artifact belonging to nemesarial@gmail.com */
var Pv=Object.create;var Za=Object.defineProperty;var Cv=Object.getOwnPropertyDescriptor;var Av=Object.getOwnPropertyNames;var Tv=Object.getPrototypeOf,Iv=Object.prototype.hasOwnProperty;var fr=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Ov=(t,e)=>{for(var n in e)Za(t,n,{get:e[n],enumerable:!0})},mf=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of Av(e))!Iv.call(t,s)&&s!==n&&Za(t,s,{get:()=>e[s],enumerable:!(r=Cv(e,s))||r.enumerable});return t};var Ze=(t,e,n)=>(n=t!=null?Pv(Tv(t)):{},mf(e||!t||!t.__esModule?Za(n,"default",{value:t,enumerable:!0}):n,t)),Rv=t=>mf(Za({},"__esModule",{value:!0}),t);var Cf=fr(Z=>{"use strict";var wi=Symbol.for("react.element"),Nv=Symbol.for("react.portal"),bv=Symbol.for("react.fragment"),Mv=Symbol.for("react.strict_mode"),Dv=Symbol.for("react.profiler"),Lv=Symbol.for("react.provider"),jv=Symbol.for("react.context"),$v=Symbol.for("react.forward_ref"),Fv=Symbol.for("react.suspense"),zv=Symbol.for("react.memo"),Uv=Symbol.for("react.lazy"),hf=Symbol.iterator;function Bv(t){return t===null||typeof t!="object"?null:(t=hf&&t[hf]||t["@@iterator"],typeof t=="function"?t:null)}var vf={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_f=Object.assign,wf={};function us(t,e,n){this.props=t,this.context=e,this.refs=wf,this.updater=n||vf}us.prototype.isReactComponent={};us.prototype.setState=function(t,e){if(typeof t!="object"&&typeof t!="function"&&t!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")};us.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")};function xf(){}xf.prototype=us.prototype;function Yl(t,e,n){this.props=t,this.context=e,this.refs=wf,this.updater=n||vf}var Gl=Yl.prototype=new xf;Gl.constructor=Yl;_f(Gl,us.prototype);Gl.isPureReactComponent=!0;var gf=Array.isArray,kf=Object.prototype.hasOwnProperty,eu={current:null},Sf={key:!0,ref:!0,__self:!0,__source:!0};function Ef(t,e,n){var r,s={},i=null,a=null;if(e!=null)for(r in e.ref!==void 0&&(a=e.ref),e.key!==void 0&&(i=""+e.key),e)kf.call(e,r)&&!Sf.hasOwnProperty(r)&&(s[r]=e[r]);var o=arguments.length-2;if(o===1)s.children=n;else if(1<o){for(var l=Array(o),u=0;u<o;u++)l[u]=arguments[u+2];s.children=l}if(t&&t.defaultProps)for(r in o=t.defaultProps,o)s[r]===void 0&&(s[r]=o[r]);return{$$typeof:wi,type:t,key:i,ref:a,props:s,_owner:eu.current}}function Vv(t,e){return{$$typeof:wi,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}function tu(t){return typeof t=="object"&&t!==null&&t.$$typeof===wi}function Zv(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,function(n){return e[n]})}var yf=/\/+/g;function Jl(t,e){return typeof t=="object"&&t!==null&&t.key!=null?Zv(""+t.key):e.toString(36)}function Ha(t,e,n,r,s){var i=typeof t;(i==="undefined"||i==="boolean")&&(t=null);var a=!1;if(t===null)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(t.$$typeof){case wi:case Nv:a=!0}}if(a)return a=t,s=s(a),t=r===""?"."+Jl(a,0):r,gf(s)?(n="",t!=null&&(n=t.replace(yf,"$&/")+"/"),Ha(s,e,n,"",function(u){return u})):s!=null&&(tu(s)&&(s=Vv(s,n+(!s.key||a&&a.key===s.key?"":(""+s.key).replace(yf,"$&/")+"/")+t)),e.push(s)),1;if(a=0,r=r===""?".":r+":",gf(t))for(var o=0;o<t.length;o++){i=t[o];var l=r+Jl(i,o);a+=Ha(i,e,n,l,s)}else if(l=Bv(t),typeof l=="function")for(t=l.call(t),o=0;!(i=t.next()).done;)i=i.value,l=r+Jl(i,o++),a+=Ha(i,e,n,l,s);else if(i==="object")throw e=String(t),Error("Objects are not valid as a React child (found: "+(e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return a}function Wa(t,e,n){if(t==null)return t;var r=[],s=0;return Ha(t,r,"","",function(i){return e.call(n,i,s++)}),r}function Wv(t){if(t._status===-1){var e=t._result;e=e(),e.then(function(n){(t._status===0||t._status===-1)&&(t._status=1,t._result=n)},function(n){(t._status===0||t._status===-1)&&(t._status=2,t._result=n)}),t._status===-1&&(t._status=0,t._result=e)}if(t._status===1)return t._result.default;throw t._result}var Le={current:null},qa={transition:null},Hv={ReactCurrentDispatcher:Le,ReactCurrentBatchConfig:qa,ReactCurrentOwner:eu};function Pf(){throw Error("act(...) is not supported in production builds of React.")}Z.Children={map:Wa,forEach:function(t,e,n){Wa(t,function(){e.apply(this,arguments)},n)},count:function(t){var e=0;return Wa(t,function(){e++}),e},toArray:function(t){return Wa(t,function(e){return e})||[]},only:function(t){if(!tu(t))throw Error("React.Children.only expected to receive a single React element child.");return t}};Z.Component=us;Z.Fragment=bv;Z.Profiler=Dv;Z.PureComponent=Yl;Z.StrictMode=Mv;Z.Suspense=Fv;Z.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hv;Z.act=Pf;Z.cloneElement=function(t,e,n){if(t==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var r=_f({},t.props),s=t.key,i=t.ref,a=t._owner;if(e!=null){if(e.ref!==void 0&&(i=e.ref,a=eu.current),e.key!==void 0&&(s=""+e.key),t.type&&t.type.defaultProps)var o=t.type.defaultProps;for(l in e)kf.call(e,l)&&!Sf.hasOwnProperty(l)&&(r[l]=e[l]===void 0&&o!==void 0?o[l]:e[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){o=Array(l);for(var u=0;u<l;u++)o[u]=arguments[u+2];r.children=o}return{$$typeof:wi,type:t.type,key:s,ref:i,props:r,_owner:a}};Z.createContext=function(t){return t={$$typeof:jv,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},t.Provider={$$typeof:Lv,_context:t},t.Consumer=t};Z.createElement=Ef;Z.createFactory=function(t){var e=Ef.bind(null,t);return e.type=t,e};Z.createRef=function(){return{current:null}};Z.forwardRef=function(t){return{$$typeof:$v,render:t}};Z.isValidElement=tu;Z.lazy=function(t){return{$$typeof:Uv,_payload:{_status:-1,_result:t},_init:Wv}};Z.memo=function(t,e){return{$$typeof:zv,type:t,compare:e===void 0?null:e}};Z.startTransition=function(t){var e=qa.transition;qa.transition={};try{t()}finally{qa.transition=e}};Z.unstable_act=Pf;Z.useCallback=function(t,e){return Le.current.useCallback(t,e)};Z.useContext=function(t){return Le.current.useContext(t)};Z.useDebugValue=function(){};Z.useDeferredValue=function(t){return Le.current.useDeferredValue(t)};Z.useEffect=function(t,e){return Le.current.useEffect(t,e)};Z.useId=function(){return Le.current.useId()};Z.useImperativeHandle=function(t,e,n){return Le.current.useImperativeHandle(t,e,n)};Z.useInsertionEffect=function(t,e){return Le.current.useInsertionEffect(t,e)};Z.useLayoutEffect=function(t,e){return Le.current.useLayoutEffect(t,e)};Z.useMemo=function(t,e){return Le.current.useMemo(t,e)};Z.useReducer=function(t,e,n){return Le.current.useReducer(t,e,n)};Z.useRef=function(t){return Le.current.useRef(t)};Z.useState=function(t){return Le.current.useState(t)};Z.useSyncExternalStore=function(t,e,n){return Le.current.useSyncExternalStore(t,e,n)};Z.useTransition=function(){return Le.current.useTransition()};Z.version="18.3.1"});var Ge=fr((Sk,Af)=>{"use strict";Af.exports=Cf()});var jf=fr(Y=>{"use strict";function iu(t,e){var n=t.length;t.push(e);e:for(;0<n;){var r=n-1>>>1,s=t[r];if(0<Ka(s,e))t[r]=e,t[n]=s,n=r;else break e}}function St(t){return t.length===0?null:t[0]}function Xa(t){if(t.length===0)return null;var e=t[0],n=t.pop();if(n!==e){t[0]=n;e:for(var r=0,s=t.length,i=s>>>1;r<i;){var a=2*(r+1)-1,o=t[a],l=a+1,u=t[l];if(0>Ka(o,n))l<s&&0>Ka(u,o)?(t[r]=u,t[l]=n,r=l):(t[r]=o,t[a]=n,r=a);else if(l<s&&0>Ka(u,n))t[r]=u,t[l]=n,r=l;else break e}}return e}function Ka(t,e){var n=t.sortIndex-e.sortIndex;return n!==0?n:t.id-e.id}typeof performance=="object"&&typeof performance.now=="function"?(Tf=performance,Y.unstable_now=function(){return Tf.now()}):(nu=Date,If=nu.now(),Y.unstable_now=function(){return nu.now()-If});var Tf,nu,If,Ft=[],In=[],qv=1,dt=null,Ie=3,Ja=!1,pr=!1,ki=!1,Nf=typeof setTimeout=="function"?setTimeout:null,bf=typeof clearTimeout=="function"?clearTimeout:null,Of=typeof setImmediate!="undefined"?setImmediate:null;typeof navigator!="undefined"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function au(t){for(var e=St(In);e!==null;){if(e.callback===null)Xa(In);else if(e.startTime<=t)Xa(In),e.sortIndex=e.expirationTime,iu(Ft,e);else break;e=St(In)}}function ou(t){if(ki=!1,au(t),!pr)if(St(Ft)!==null)pr=!0,uu(lu);else{var e=St(In);e!==null&&cu(ou,e.startTime-t)}}function lu(t,e){pr=!1,ki&&(ki=!1,bf(Si),Si=-1),Ja=!0;var n=Ie;try{for(au(e),dt=St(Ft);dt!==null&&(!(dt.expirationTime>e)||t&&!Lf());){var r=dt.callback;if(typeof r=="function"){dt.callback=null,Ie=dt.priorityLevel;var s=r(dt.expirationTime<=e);e=Y.unstable_now(),typeof s=="function"?dt.callback=s:dt===St(Ft)&&Xa(Ft),au(e)}else Xa(Ft);dt=St(Ft)}if(dt!==null)var i=!0;else{var a=St(In);a!==null&&cu(ou,a.startTime-e),i=!1}return i}finally{dt=null,Ie=n,Ja=!1}}var Ya=!1,Qa=null,Si=-1,Mf=5,Df=-1;function Lf(){return!(Y.unstable_now()-Df<Mf)}function ru(){if(Qa!==null){var t=Y.unstable_now();Df=t;var e=!0;try{e=Qa(!0,t)}finally{e?xi():(Ya=!1,Qa=null)}}else Ya=!1}var xi;typeof Of=="function"?xi=function(){Of(ru)}:typeof MessageChannel!="undefined"?(su=new MessageChannel,Rf=su.port2,su.port1.onmessage=ru,xi=function(){Rf.postMessage(null)}):xi=function(){Nf(ru,0)};var su,Rf;function uu(t){Qa=t,Ya||(Ya=!0,xi())}function cu(t,e){Si=Nf(function(){t(Y.unstable_now())},e)}Y.unstable_IdlePriority=5;Y.unstable_ImmediatePriority=1;Y.unstable_LowPriority=4;Y.unstable_NormalPriority=3;Y.unstable_Profiling=null;Y.unstable_UserBlockingPriority=2;Y.unstable_cancelCallback=function(t){t.callback=null};Y.unstable_continueExecution=function(){pr||Ja||(pr=!0,uu(lu))};Y.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Mf=0<t?Math.floor(1e3/t):5};Y.unstable_getCurrentPriorityLevel=function(){return Ie};Y.unstable_getFirstCallbackNode=function(){return St(Ft)};Y.unstable_next=function(t){switch(Ie){case 1:case 2:case 3:var e=3;break;default:e=Ie}var n=Ie;Ie=e;try{return t()}finally{Ie=n}};Y.unstable_pauseExecution=function(){};Y.unstable_requestPaint=function(){};Y.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=Ie;Ie=t;try{return e()}finally{Ie=n}};Y.unstable_scheduleCallback=function(t,e,n){var r=Y.unstable_now();switch(typeof n=="object"&&n!==null?(n=n.delay,n=typeof n=="number"&&0<n?r+n:r):n=r,t){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return s=n+s,t={id:qv++,callback:e,priorityLevel:t,startTime:n,expirationTime:s,sortIndex:-1},n>r?(t.sortIndex=n,iu(In,t),St(Ft)===null&&t===St(In)&&(ki?(bf(Si),Si=-1):ki=!0,cu(ou,n-r))):(t.sortIndex=s,iu(Ft,t),pr||Ja||(pr=!0,uu(lu))),t};Y.unstable_shouldYield=Lf;Y.unstable_wrapCallback=function(t){var e=Ie;return function(){var n=Ie;Ie=e;try{return t.apply(this,arguments)}finally{Ie=n}}}});var Ff=fr((Pk,$f)=>{"use strict";$f.exports=jf()});var Vh=fr(it=>{"use strict";var Kv=Ge(),rt=Ff();function k(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Hp=new Set,Wi={};function Cr(t,e){Os(t,e),Os(t+"Capture",e)}function Os(t,e){for(Wi[t]=e,t=0;t<e.length;t++)Hp.add(e[t])}var fn=!(typeof window=="undefined"||typeof window.document=="undefined"||typeof window.document.createElement=="undefined"),bu=Object.prototype.hasOwnProperty,Qv=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,zf={},Uf={};function Xv(t){return bu.call(Uf,t)?!0:bu.call(zf,t)?!1:Qv.test(t)?Uf[t]=!0:(zf[t]=!0,!1)}function Jv(t,e,n,r){if(n!==null&&n.type===0)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(t=t.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-");default:return!1}}function Yv(t,e,n,r){if(e===null||typeof e=="undefined"||Jv(t,e,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!e;case 4:return e===!1;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}function Fe(t,e,n,r,s,i,a){this.acceptsBooleans=e===2||e===3||e===4,this.attributeName=r,this.attributeNamespace=s,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=i,this.removeEmptyString=a}var Ae={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){Ae[t]=new Fe(t,0,!1,t,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];Ae[e]=new Fe(e,1,!1,t[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(t){Ae[t]=new Fe(t,2,!1,t.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){Ae[t]=new Fe(t,2,!1,t,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){Ae[t]=new Fe(t,3,!1,t.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(t){Ae[t]=new Fe(t,3,!0,t,null,!1,!1)});["capture","download"].forEach(function(t){Ae[t]=new Fe(t,4,!1,t,null,!1,!1)});["cols","rows","size","span"].forEach(function(t){Ae[t]=new Fe(t,6,!1,t,null,!1,!1)});["rowSpan","start"].forEach(function(t){Ae[t]=new Fe(t,5,!1,t.toLowerCase(),null,!1,!1)});var Pc=/[\-:]([a-z])/g;function Cc(t){return t[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(Pc,Cc);Ae[e]=new Fe(e,1,!1,t,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(Pc,Cc);Ae[e]=new Fe(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(Pc,Cc);Ae[e]=new Fe(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(t){Ae[t]=new Fe(t,1,!1,t.toLowerCase(),null,!1,!1)});Ae.xlinkHref=new Fe("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(t){Ae[t]=new Fe(t,1,!1,t.toLowerCase(),null,!0,!0)});function Ac(t,e,n,r){var s=Ae.hasOwnProperty(e)?Ae[e]:null;(s!==null?s.type!==0:r||!(2<e.length)||e[0]!=="o"&&e[0]!=="O"||e[1]!=="n"&&e[1]!=="N")&&(Yv(e,n,s,r)&&(n=null),r||s===null?Xv(e)&&(n===null?t.removeAttribute(e):t.setAttribute(e,""+n)):s.mustUseProperty?t[s.propertyName]=n===null?s.type===3?!1:"":n:(e=s.attributeName,r=s.attributeNamespace,n===null?t.removeAttribute(e):(s=s.type,n=s===3||s===4&&n===!0?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}var gn=Kv.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ga=Symbol.for("react.element"),fs=Symbol.for("react.portal"),ps=Symbol.for("react.fragment"),Tc=Symbol.for("react.strict_mode"),Mu=Symbol.for("react.profiler"),qp=Symbol.for("react.provider"),Kp=Symbol.for("react.context"),Ic=Symbol.for("react.forward_ref"),Du=Symbol.for("react.suspense"),Lu=Symbol.for("react.suspense_list"),Oc=Symbol.for("react.memo"),Rn=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var Qp=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var Bf=Symbol.iterator;function Ei(t){return t===null||typeof t!="object"?null:(t=Bf&&t[Bf]||t["@@iterator"],typeof t=="function"?t:null)}var oe=Object.assign,du;function Ni(t){if(du===void 0)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);du=e&&e[1]||""}return`
`+du+t}var fu=!1;function pu(t,e){if(!t||fu)return"";fu=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(e,[])}catch(u){var r=u}Reflect.construct(t,[],e)}else{try{e.call()}catch(u){r=u}t.call(e.prototype)}else{try{throw Error()}catch(u){r=u}t()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var s=u.stack.split(`
`),i=r.stack.split(`
`),a=s.length-1,o=i.length-1;1<=a&&0<=o&&s[a]!==i[o];)o--;for(;1<=a&&0<=o;a--,o--)if(s[a]!==i[o]){if(a!==1||o!==1)do if(a--,o--,0>o||s[a]!==i[o]){var l=`
`+s[a].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}while(1<=a&&0<=o);break}}}finally{fu=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?Ni(t):""}function Gv(t){switch(t.tag){case 5:return Ni(t.type);case 16:return Ni("Lazy");case 13:return Ni("Suspense");case 19:return Ni("SuspenseList");case 0:case 2:case 15:return t=pu(t.type,!1),t;case 11:return t=pu(t.type.render,!1),t;case 1:return t=pu(t.type,!0),t;default:return""}}function ju(t){if(t==null)return null;if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case ps:return"Fragment";case fs:return"Portal";case Mu:return"Profiler";case Tc:return"StrictMode";case Du:return"Suspense";case Lu:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case Kp:return(t.displayName||"Context")+".Consumer";case qp:return(t._context.displayName||"Context")+".Provider";case Ic:var e=t.render;return t=t.displayName,t||(t=e.displayName||e.name||"",t=t!==""?"ForwardRef("+t+")":"ForwardRef"),t;case Oc:return e=t.displayName||null,e!==null?e:ju(t.type)||"Memo";case Rn:e=t._payload,t=t._init;try{return ju(t(e))}catch(n){}}return null}function e_(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=e.render,t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return ju(e);case 8:return e===Tc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e}return null}function Wn(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":return t;case"object":return t;default:return""}}function Xp(t){var e=t.type;return(t=t.nodeName)&&t.toLowerCase()==="input"&&(e==="checkbox"||e==="radio")}function t_(t){var e=Xp(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&typeof n!="undefined"&&typeof n.get=="function"&&typeof n.set=="function"){var s=n.get,i=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return s.call(this)},set:function(a){r=""+a,i.call(this,a)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}function eo(t){t._valueTracker||(t._valueTracker=t_(t))}function Jp(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=Xp(t)?t.checked?"true":"false":t.value),t=r,t!==n?(e.setValue(t),!0):!1}function Io(t){if(t=t||(typeof document!="undefined"?document:void 0),typeof t=="undefined")return null;try{return t.activeElement||t.body}catch(e){return t.body}}function $u(t,e){var n=e.checked;return oe({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n!=null?n:t._wrapperState.initialChecked})}function Vf(t,e){var n=e.defaultValue==null?"":e.defaultValue,r=e.checked!=null?e.checked:e.defaultChecked;n=Wn(e.value!=null?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:e.type==="checkbox"||e.type==="radio"?e.checked!=null:e.value!=null}}function Yp(t,e){e=e.checked,e!=null&&Ac(t,"checked",e,!1)}function Fu(t,e){Yp(t,e);var n=Wn(e.value),r=e.type;if(n!=null)r==="number"?(n===0&&t.value===""||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if(r==="submit"||r==="reset"){t.removeAttribute("value");return}e.hasOwnProperty("value")?zu(t,e.type,n):e.hasOwnProperty("defaultValue")&&zu(t,e.type,Wn(e.defaultValue)),e.checked==null&&e.defaultChecked!=null&&(t.defaultChecked=!!e.defaultChecked)}function Zf(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!(r!=="submit"&&r!=="reset"||e.value!==void 0&&e.value!==null))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}n=t.name,n!==""&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,n!==""&&(t.name=n)}function zu(t,e,n){(e!=="number"||Io(t.ownerDocument)!==t)&&(n==null?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var bi=Array.isArray;function Es(t,e,n,r){if(t=t.options,e){e={};for(var s=0;s<n.length;s++)e["$"+n[s]]=!0;for(n=0;n<t.length;n++)s=e.hasOwnProperty("$"+t[n].value),t[n].selected!==s&&(t[n].selected=s),s&&r&&(t[n].defaultSelected=!0)}else{for(n=""+Wn(n),e=null,s=0;s<t.length;s++){if(t[s].value===n){t[s].selected=!0,r&&(t[s].defaultSelected=!0);return}e!==null||t[s].disabled||(e=t[s])}e!==null&&(e.selected=!0)}}function Uu(t,e){if(e.dangerouslySetInnerHTML!=null)throw Error(k(91));return oe({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function Wf(t,e){var n=e.value;if(n==null){if(n=e.children,e=e.defaultValue,n!=null){if(e!=null)throw Error(k(92));if(bi(n)){if(1<n.length)throw Error(k(93));n=n[0]}e=n}e==null&&(e=""),n=e}t._wrapperState={initialValue:Wn(n)}}function Gp(t,e){var n=Wn(e.value),r=Wn(e.defaultValue);n!=null&&(n=""+n,n!==t.value&&(t.value=n),e.defaultValue==null&&t.defaultValue!==n&&(t.defaultValue=n)),r!=null&&(t.defaultValue=""+r)}function Hf(t){var e=t.textContent;e===t._wrapperState.initialValue&&e!==""&&e!==null&&(t.value=e)}function em(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Bu(t,e){return t==null||t==="http://www.w3.org/1999/xhtml"?em(e):t==="http://www.w3.org/2000/svg"&&e==="foreignObject"?"http://www.w3.org/1999/xhtml":t}var to,tm=function(t){return typeof MSApp!="undefined"&&MSApp.execUnsafeLocalFunction?function(e,n,r,s){MSApp.execUnsafeLocalFunction(function(){return t(e,n,r,s)})}:t}(function(t,e){if(t.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in t)t.innerHTML=e;else{for(to=to||document.createElement("div"),to.innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=to.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function Hi(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&n.nodeType===3){n.nodeValue=e;return}}t.textContent=e}var Li={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},n_=["Webkit","ms","Moz","O"];Object.keys(Li).forEach(function(t){n_.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),Li[e]=Li[t]})});function nm(t,e,n){return e==null||typeof e=="boolean"||e===""?"":n||typeof e!="number"||e===0||Li.hasOwnProperty(t)&&Li[t]?(""+e).trim():e+"px"}function rm(t,e){t=t.style;for(var n in e)if(e.hasOwnProperty(n)){var r=n.indexOf("--")===0,s=nm(n,e[n],r);n==="float"&&(n="cssFloat"),r?t.setProperty(n,s):t[n]=s}}var r_=oe({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Vu(t,e){if(e){if(r_[t]&&(e.children!=null||e.dangerouslySetInnerHTML!=null))throw Error(k(137,t));if(e.dangerouslySetInnerHTML!=null){if(e.children!=null)throw Error(k(60));if(typeof e.dangerouslySetInnerHTML!="object"||!("__html"in e.dangerouslySetInnerHTML))throw Error(k(61))}if(e.style!=null&&typeof e.style!="object")throw Error(k(62))}}function Zu(t,e){if(t.indexOf("-")===-1)return typeof e.is=="string";switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Wu=null;function Rc(t){return t=t.target||t.srcElement||window,t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===3?t.parentNode:t}var Hu=null,Ps=null,Cs=null;function qf(t){if(t=ca(t)){if(typeof Hu!="function")throw Error(k(280));var e=t.stateNode;e&&(e=rl(e),Hu(t.stateNode,t.type,e))}}function sm(t){Ps?Cs?Cs.push(t):Cs=[t]:Ps=t}function im(){if(Ps){var t=Ps,e=Cs;if(Cs=Ps=null,qf(t),e)for(t=0;t<e.length;t++)qf(e[t])}}function am(t,e){return t(e)}function om(){}var mu=!1;function lm(t,e,n){if(mu)return t(e,n);mu=!0;try{return am(t,e,n)}finally{mu=!1,(Ps!==null||Cs!==null)&&(om(),im())}}function qi(t,e){var n=t.stateNode;if(n===null)return null;var r=rl(n);if(r===null)return null;n=r[e];e:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(t=t.type,r=!(t==="button"||t==="input"||t==="select"||t==="textarea")),t=!r;break e;default:t=!1}if(t)return null;if(n&&typeof n!="function")throw Error(k(231,e,typeof n));return n}var qu=!1;if(fn)try{cs={},Object.defineProperty(cs,"passive",{get:function(){qu=!0}}),window.addEventListener("test",cs,cs),window.removeEventListener("test",cs,cs)}catch(t){qu=!1}var cs;function s_(t,e,n,r,s,i,a,o,l){var u=Array.prototype.slice.call(arguments,3);try{e.apply(n,u)}catch(c){this.onError(c)}}var ji=!1,Oo=null,Ro=!1,Ku=null,i_={onError:function(t){ji=!0,Oo=t}};function a_(t,e,n,r,s,i,a,o,l){ji=!1,Oo=null,s_.apply(i_,arguments)}function o_(t,e,n,r,s,i,a,o,l){if(a_.apply(this,arguments),ji){if(ji){var u=Oo;ji=!1,Oo=null}else throw Error(k(198));Ro||(Ro=!0,Ku=u)}}function Ar(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do e=t,e.flags&4098&&(n=e.return),t=e.return;while(t)}return e.tag===3?n:null}function um(t){if(t.tag===13){var e=t.memoizedState;if(e===null&&(t=t.alternate,t!==null&&(e=t.memoizedState)),e!==null)return e.dehydrated}return null}function Kf(t){if(Ar(t)!==t)throw Error(k(188))}function l_(t){var e=t.alternate;if(!e){if(e=Ar(t),e===null)throw Error(k(188));return e!==t?null:t}for(var n=t,r=e;;){var s=n.return;if(s===null)break;var i=s.alternate;if(i===null){if(r=s.return,r!==null){n=r;continue}break}if(s.child===i.child){for(i=s.child;i;){if(i===n)return Kf(s),t;if(i===r)return Kf(s),e;i=i.sibling}throw Error(k(188))}if(n.return!==r.return)n=s,r=i;else{for(var a=!1,o=s.child;o;){if(o===n){a=!0,n=s,r=i;break}if(o===r){a=!0,r=s,n=i;break}o=o.sibling}if(!a){for(o=i.child;o;){if(o===n){a=!0,n=i,r=s;break}if(o===r){a=!0,r=i,n=s;break}o=o.sibling}if(!a)throw Error(k(189))}}if(n.alternate!==r)throw Error(k(190))}if(n.tag!==3)throw Error(k(188));return n.stateNode.current===n?t:e}function cm(t){return t=l_(t),t!==null?dm(t):null}function dm(t){if(t.tag===5||t.tag===6)return t;for(t=t.child;t!==null;){var e=dm(t);if(e!==null)return e;t=t.sibling}return null}var fm=rt.unstable_scheduleCallback,Qf=rt.unstable_cancelCallback,u_=rt.unstable_shouldYield,c_=rt.unstable_requestPaint,fe=rt.unstable_now,d_=rt.unstable_getCurrentPriorityLevel,Nc=rt.unstable_ImmediatePriority,pm=rt.unstable_UserBlockingPriority,No=rt.unstable_NormalPriority,f_=rt.unstable_LowPriority,mm=rt.unstable_IdlePriority,Go=null,Vt=null;function p_(t){if(Vt&&typeof Vt.onCommitFiberRoot=="function")try{Vt.onCommitFiberRoot(Go,t,void 0,(t.current.flags&128)===128)}catch(e){}}var Tt=Math.clz32?Math.clz32:g_,m_=Math.log,h_=Math.LN2;function g_(t){return t>>>=0,t===0?32:31-(m_(t)/h_|0)|0}var no=64,ro=4194304;function Mi(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return t&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function bo(t,e){var n=t.pendingLanes;if(n===0)return 0;var r=0,s=t.suspendedLanes,i=t.pingedLanes,a=n&268435455;if(a!==0){var o=a&~s;o!==0?r=Mi(o):(i&=a,i!==0&&(r=Mi(i)))}else a=n&~s,a!==0?r=Mi(a):i!==0&&(r=Mi(i));if(r===0)return 0;if(e!==0&&e!==r&&!(e&s)&&(s=r&-r,i=e&-e,s>=i||s===16&&(i&4194240)!==0))return e;if(r&4&&(r|=n&16),e=t.entangledLanes,e!==0)for(t=t.entanglements,e&=r;0<e;)n=31-Tt(e),s=1<<n,r|=t[n],e&=~s;return r}function y_(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function v_(t,e){for(var n=t.suspendedLanes,r=t.pingedLanes,s=t.expirationTimes,i=t.pendingLanes;0<i;){var a=31-Tt(i),o=1<<a,l=s[a];l===-1?(!(o&n)||o&r)&&(s[a]=y_(o,e)):l<=e&&(t.expiredLanes|=o),i&=~o}}function Qu(t){return t=t.pendingLanes&-1073741825,t!==0?t:t&1073741824?1073741824:0}function hm(){var t=no;return no<<=1,!(no&4194240)&&(no=64),t}function hu(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function la(t,e,n){t.pendingLanes|=e,e!==536870912&&(t.suspendedLanes=0,t.pingedLanes=0),t=t.eventTimes,e=31-Tt(e),t[e]=n}function __(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var r=t.eventTimes;for(t=t.expirationTimes;0<n;){var s=31-Tt(n),i=1<<s;e[s]=0,r[s]=-1,t[s]=-1,n&=~i}}function bc(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var r=31-Tt(n),s=1<<r;s&e|t[r]&e&&(t[r]|=e),n&=~s}}var X=0;function gm(t){return t&=-t,1<t?4<t?t&268435455?16:536870912:4:1}var ym,Mc,vm,_m,wm,Xu=!1,so=[],jn=null,$n=null,Fn=null,Ki=new Map,Qi=new Map,bn=[],w_="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Xf(t,e){switch(t){case"focusin":case"focusout":jn=null;break;case"dragenter":case"dragleave":$n=null;break;case"mouseover":case"mouseout":Fn=null;break;case"pointerover":case"pointerout":Ki.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":Qi.delete(e.pointerId)}}function Pi(t,e,n,r,s,i){return t===null||t.nativeEvent!==i?(t={blockedOn:e,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[s]},e!==null&&(e=ca(e),e!==null&&Mc(e)),t):(t.eventSystemFlags|=r,e=t.targetContainers,s!==null&&e.indexOf(s)===-1&&e.push(s),t)}function x_(t,e,n,r,s){switch(e){case"focusin":return jn=Pi(jn,t,e,n,r,s),!0;case"dragenter":return $n=Pi($n,t,e,n,r,s),!0;case"mouseover":return Fn=Pi(Fn,t,e,n,r,s),!0;case"pointerover":var i=s.pointerId;return Ki.set(i,Pi(Ki.get(i)||null,t,e,n,r,s)),!0;case"gotpointercapture":return i=s.pointerId,Qi.set(i,Pi(Qi.get(i)||null,t,e,n,r,s)),!0}return!1}function xm(t){var e=gr(t.target);if(e!==null){var n=Ar(e);if(n!==null){if(e=n.tag,e===13){if(e=um(n),e!==null){t.blockedOn=e,wm(t.priority,function(){vm(n)});return}}else if(e===3&&n.stateNode.current.memoizedState.isDehydrated){t.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}t.blockedOn=null}function _o(t){if(t.blockedOn!==null)return!1;for(var e=t.targetContainers;0<e.length;){var n=Ju(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(n===null){n=t.nativeEvent;var r=new n.constructor(n.type,n);Wu=r,n.target.dispatchEvent(r),Wu=null}else return e=ca(n),e!==null&&Mc(e),t.blockedOn=n,!1;e.shift()}return!0}function Jf(t,e,n){_o(t)&&n.delete(e)}function k_(){Xu=!1,jn!==null&&_o(jn)&&(jn=null),$n!==null&&_o($n)&&($n=null),Fn!==null&&_o(Fn)&&(Fn=null),Ki.forEach(Jf),Qi.forEach(Jf)}function Ci(t,e){t.blockedOn===e&&(t.blockedOn=null,Xu||(Xu=!0,rt.unstable_scheduleCallback(rt.unstable_NormalPriority,k_)))}function Xi(t){function e(s){return Ci(s,t)}if(0<so.length){Ci(so[0],t);for(var n=1;n<so.length;n++){var r=so[n];r.blockedOn===t&&(r.blockedOn=null)}}for(jn!==null&&Ci(jn,t),$n!==null&&Ci($n,t),Fn!==null&&Ci(Fn,t),Ki.forEach(e),Qi.forEach(e),n=0;n<bn.length;n++)r=bn[n],r.blockedOn===t&&(r.blockedOn=null);for(;0<bn.length&&(n=bn[0],n.blockedOn===null);)xm(n),n.blockedOn===null&&bn.shift()}var As=gn.ReactCurrentBatchConfig,Mo=!0;function S_(t,e,n,r){var s=X,i=As.transition;As.transition=null;try{X=1,Dc(t,e,n,r)}finally{X=s,As.transition=i}}function E_(t,e,n,r){var s=X,i=As.transition;As.transition=null;try{X=4,Dc(t,e,n,r)}finally{X=s,As.transition=i}}function Dc(t,e,n,r){if(Mo){var s=Ju(t,e,n,r);if(s===null)ku(t,e,r,Do,n),Xf(t,r);else if(x_(s,t,e,n,r))r.stopPropagation();else if(Xf(t,r),e&4&&-1<w_.indexOf(t)){for(;s!==null;){var i=ca(s);if(i!==null&&ym(i),i=Ju(t,e,n,r),i===null&&ku(t,e,r,Do,n),i===s)break;s=i}s!==null&&r.stopPropagation()}else ku(t,e,r,null,n)}}var Do=null;function Ju(t,e,n,r){if(Do=null,t=Rc(r),t=gr(t),t!==null)if(e=Ar(t),e===null)t=null;else if(n=e.tag,n===13){if(t=um(e),t!==null)return t;t=null}else if(n===3){if(e.stateNode.current.memoizedState.isDehydrated)return e.tag===3?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return Do=t,null}function km(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(d_()){case Nc:return 1;case pm:return 4;case No:case f_:return 16;case mm:return 536870912;default:return 16}default:return 16}}var Dn=null,Lc=null,wo=null;function Sm(){if(wo)return wo;var t,e=Lc,n=e.length,r,s="value"in Dn?Dn.value:Dn.textContent,i=s.length;for(t=0;t<n&&e[t]===s[t];t++);var a=n-t;for(r=1;r<=a&&e[n-r]===s[i-r];r++);return wo=s.slice(t,1<r?1-r:void 0)}function xo(t){var e=t.keyCode;return"charCode"in t?(t=t.charCode,t===0&&e===13&&(t=13)):t=e,t===10&&(t=13),32<=t||t===13?t:0}function io(){return!0}function Yf(){return!1}function st(t){function e(n,r,s,i,a){this._reactName=n,this._targetInst=s,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var o in t)t.hasOwnProperty(o)&&(n=t[o],this[o]=n?n(i):i[o]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?io:Yf,this.isPropagationStopped=Yf,this}return oe(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=io)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=io)},persist:function(){},isPersistent:io}),e}var js={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},jc=st(js),ua=oe({},js,{view:0,detail:0}),P_=st(ua),gu,yu,Ai,el=oe({},ua,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:$c,button:0,buttons:0,relatedTarget:function(t){return t.relatedTarget===void 0?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==Ai&&(Ai&&t.type==="mousemove"?(gu=t.screenX-Ai.screenX,yu=t.screenY-Ai.screenY):yu=gu=0,Ai=t),gu)},movementY:function(t){return"movementY"in t?t.movementY:yu}}),Gf=st(el),C_=oe({},el,{dataTransfer:0}),A_=st(C_),T_=oe({},ua,{relatedTarget:0}),vu=st(T_),I_=oe({},js,{animationName:0,elapsedTime:0,pseudoElement:0}),O_=st(I_),R_=oe({},js,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),N_=st(R_),b_=oe({},js,{data:0}),ep=st(b_),M_={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},D_={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},L_={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function j_(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):(t=L_[t])?!!e[t]:!1}function $c(){return j_}var $_=oe({},ua,{key:function(t){if(t.key){var e=M_[t.key]||t.key;if(e!=="Unidentified")return e}return t.type==="keypress"?(t=xo(t),t===13?"Enter":String.fromCharCode(t)):t.type==="keydown"||t.type==="keyup"?D_[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:$c,charCode:function(t){return t.type==="keypress"?xo(t):0},keyCode:function(t){return t.type==="keydown"||t.type==="keyup"?t.keyCode:0},which:function(t){return t.type==="keypress"?xo(t):t.type==="keydown"||t.type==="keyup"?t.keyCode:0}}),F_=st($_),z_=oe({},el,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),tp=st(z_),U_=oe({},ua,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:$c}),B_=st(U_),V_=oe({},js,{propertyName:0,elapsedTime:0,pseudoElement:0}),Z_=st(V_),W_=oe({},el,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),H_=st(W_),q_=[9,13,27,32],Fc=fn&&"CompositionEvent"in window,$i=null;fn&&"documentMode"in document&&($i=document.documentMode);var K_=fn&&"TextEvent"in window&&!$i,Em=fn&&(!Fc||$i&&8<$i&&11>=$i),np=String.fromCharCode(32),rp=!1;function Pm(t,e){switch(t){case"keyup":return q_.indexOf(e.keyCode)!==-1;case"keydown":return e.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Cm(t){return t=t.detail,typeof t=="object"&&"data"in t?t.data:null}var ms=!1;function Q_(t,e){switch(t){case"compositionend":return Cm(e);case"keypress":return e.which!==32?null:(rp=!0,np);case"textInput":return t=e.data,t===np&&rp?null:t;default:return null}}function X_(t,e){if(ms)return t==="compositionend"||!Fc&&Pm(t,e)?(t=Sm(),wo=Lc=Dn=null,ms=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Em&&e.locale!=="ko"?null:e.data;default:return null}}var J_={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function sp(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e==="input"?!!J_[t.type]:e==="textarea"}function Am(t,e,n,r){sm(r),e=Lo(e,"onChange"),0<e.length&&(n=new jc("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var Fi=null,Ji=null;function Y_(t){$m(t,0)}function tl(t){var e=ys(t);if(Jp(e))return t}function G_(t,e){if(t==="change")return e}var Tm=!1;fn&&(fn?(oo="oninput"in document,oo||(_u=document.createElement("div"),_u.setAttribute("oninput","return;"),oo=typeof _u.oninput=="function"),ao=oo):ao=!1,Tm=ao&&(!document.documentMode||9<document.documentMode));var ao,oo,_u;function ip(){Fi&&(Fi.detachEvent("onpropertychange",Im),Ji=Fi=null)}function Im(t){if(t.propertyName==="value"&&tl(Ji)){var e=[];Am(e,Ji,t,Rc(t)),lm(Y_,e)}}function e0(t,e,n){t==="focusin"?(ip(),Fi=e,Ji=n,Fi.attachEvent("onpropertychange",Im)):t==="focusout"&&ip()}function t0(t){if(t==="selectionchange"||t==="keyup"||t==="keydown")return tl(Ji)}function n0(t,e){if(t==="click")return tl(e)}function r0(t,e){if(t==="input"||t==="change")return tl(e)}function s0(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var Ot=typeof Object.is=="function"?Object.is:s0;function Yi(t,e){if(Ot(t,e))return!0;if(typeof t!="object"||t===null||typeof e!="object"||e===null)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var s=n[r];if(!bu.call(e,s)||!Ot(t[s],e[s]))return!1}return!0}function ap(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function op(t,e){var n=ap(t);t=0;for(var r;n;){if(n.nodeType===3){if(r=t+n.textContent.length,t<=e&&r>=e)return{node:n,offset:e-t};t=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=ap(n)}}function Om(t,e){return t&&e?t===e?!0:t&&t.nodeType===3?!1:e&&e.nodeType===3?Om(t,e.parentNode):"contains"in t?t.contains(e):t.compareDocumentPosition?!!(t.compareDocumentPosition(e)&16):!1:!1}function Rm(){for(var t=window,e=Io();e instanceof t.HTMLIFrameElement;){try{var n=typeof e.contentWindow.location.href=="string"}catch(r){n=!1}if(n)t=e.contentWindow;else break;e=Io(t.document)}return e}function zc(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&(e==="input"&&(t.type==="text"||t.type==="search"||t.type==="tel"||t.type==="url"||t.type==="password")||e==="textarea"||t.contentEditable==="true")}function i0(t){var e=Rm(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&Om(n.ownerDocument.documentElement,n)){if(r!==null&&zc(n)){if(e=r.start,t=r.end,t===void 0&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(t=(e=n.ownerDocument||document)&&e.defaultView||window,t.getSelection){t=t.getSelection();var s=n.textContent.length,i=Math.min(r.start,s);r=r.end===void 0?i:Math.min(r.end,s),!t.extend&&i>r&&(s=r,r=i,i=s),s=op(n,i);var a=op(n,r);s&&a&&(t.rangeCount!==1||t.anchorNode!==s.node||t.anchorOffset!==s.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)&&(e=e.createRange(),e.setStart(s.node,s.offset),t.removeAllRanges(),i>r?(t.addRange(e),t.extend(a.node,a.offset)):(e.setEnd(a.node,a.offset),t.addRange(e)))}}for(e=[],t=n;t=t.parentNode;)t.nodeType===1&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<e.length;n++)t=e[n],t.element.scrollLeft=t.left,t.element.scrollTop=t.top}}var a0=fn&&"documentMode"in document&&11>=document.documentMode,hs=null,Yu=null,zi=null,Gu=!1;function lp(t,e,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Gu||hs==null||hs!==Io(r)||(r=hs,"selectionStart"in r&&zc(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),zi&&Yi(zi,r)||(zi=r,r=Lo(Yu,"onSelect"),0<r.length&&(e=new jc("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=hs)))}function lo(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var gs={animationend:lo("Animation","AnimationEnd"),animationiteration:lo("Animation","AnimationIteration"),animationstart:lo("Animation","AnimationStart"),transitionend:lo("Transition","TransitionEnd")},wu={},Nm={};fn&&(Nm=document.createElement("div").style,"AnimationEvent"in window||(delete gs.animationend.animation,delete gs.animationiteration.animation,delete gs.animationstart.animation),"TransitionEvent"in window||delete gs.transitionend.transition);function nl(t){if(wu[t])return wu[t];if(!gs[t])return t;var e=gs[t],n;for(n in e)if(e.hasOwnProperty(n)&&n in Nm)return wu[t]=e[n];return t}var bm=nl("animationend"),Mm=nl("animationiteration"),Dm=nl("animationstart"),Lm=nl("transitionend"),jm=new Map,up="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function qn(t,e){jm.set(t,e),Cr(e,[t])}for(uo=0;uo<up.length;uo++)co=up[uo],cp=co.toLowerCase(),dp=co[0].toUpperCase()+co.slice(1),qn(cp,"on"+dp);var co,cp,dp,uo;qn(bm,"onAnimationEnd");qn(Mm,"onAnimationIteration");qn(Dm,"onAnimationStart");qn("dblclick","onDoubleClick");qn("focusin","onFocus");qn("focusout","onBlur");qn(Lm,"onTransitionEnd");Os("onMouseEnter",["mouseout","mouseover"]);Os("onMouseLeave",["mouseout","mouseover"]);Os("onPointerEnter",["pointerout","pointerover"]);Os("onPointerLeave",["pointerout","pointerover"]);Cr("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Cr("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Cr("onBeforeInput",["compositionend","keypress","textInput","paste"]);Cr("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Cr("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Cr("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Di="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),o0=new Set("cancel close invalid load scroll toggle".split(" ").concat(Di));function fp(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,o_(r,e,void 0,t),t.currentTarget=null}function $m(t,e){e=(e&4)!==0;for(var n=0;n<t.length;n++){var r=t[n],s=r.event;r=r.listeners;e:{var i=void 0;if(e)for(var a=r.length-1;0<=a;a--){var o=r[a],l=o.instance,u=o.currentTarget;if(o=o.listener,l!==i&&s.isPropagationStopped())break e;fp(s,o,u),i=l}else for(a=0;a<r.length;a++){if(o=r[a],l=o.instance,u=o.currentTarget,o=o.listener,l!==i&&s.isPropagationStopped())break e;fp(s,o,u),i=l}}}if(Ro)throw t=Ku,Ro=!1,Ku=null,t}function te(t,e){var n=e[sc];n===void 0&&(n=e[sc]=new Set);var r=t+"__bubble";n.has(r)||(Fm(e,t,2,!1),n.add(r))}function xu(t,e,n){var r=0;e&&(r|=4),Fm(n,t,r,e)}var fo="_reactListening"+Math.random().toString(36).slice(2);function Gi(t){if(!t[fo]){t[fo]=!0,Hp.forEach(function(n){n!=="selectionchange"&&(o0.has(n)||xu(n,!1,t),xu(n,!0,t))});var e=t.nodeType===9?t:t.ownerDocument;e===null||e[fo]||(e[fo]=!0,xu("selectionchange",!1,e))}}function Fm(t,e,n,r){switch(km(e)){case 1:var s=S_;break;case 4:s=E_;break;default:s=Dc}n=s.bind(null,e,n,t),s=void 0,!qu||e!=="touchstart"&&e!=="touchmove"&&e!=="wheel"||(s=!0),r?s!==void 0?t.addEventListener(e,n,{capture:!0,passive:s}):t.addEventListener(e,n,!0):s!==void 0?t.addEventListener(e,n,{passive:s}):t.addEventListener(e,n,!1)}function ku(t,e,n,r,s){var i=r;if(!(e&1)&&!(e&2)&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var o=r.stateNode.containerInfo;if(o===s||o.nodeType===8&&o.parentNode===s)break;if(a===4)for(a=r.return;a!==null;){var l=a.tag;if((l===3||l===4)&&(l=a.stateNode.containerInfo,l===s||l.nodeType===8&&l.parentNode===s))return;a=a.return}for(;o!==null;){if(a=gr(o),a===null)return;if(l=a.tag,l===5||l===6){r=i=a;continue e}o=o.parentNode}}r=r.return}lm(function(){var u=i,c=Rc(n),f=[];e:{var h=jm.get(t);if(h!==void 0){var g=jc,v=t;switch(t){case"keypress":if(xo(n)===0)break e;case"keydown":case"keyup":g=F_;break;case"focusin":v="focus",g=vu;break;case"focusout":v="blur",g=vu;break;case"beforeblur":case"afterblur":g=vu;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=Gf;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=A_;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=B_;break;case bm:case Mm:case Dm:g=O_;break;case Lm:g=Z_;break;case"scroll":g=P_;break;case"wheel":g=H_;break;case"copy":case"cut":case"paste":g=N_;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=tp}var w=(e&4)!==0,E=!w&&t==="scroll",p=w?h!==null?h+"Capture":null:h;w=[];for(var d=u,m;d!==null;){m=d;var _=m.stateNode;if(m.tag===5&&_!==null&&(m=_,p!==null&&(_=qi(d,p),_!=null&&w.push(ea(d,_,m)))),E)break;d=d.return}0<w.length&&(h=new g(h,v,null,n,c),f.push({event:h,listeners:w}))}}if(!(e&7)){e:{if(h=t==="mouseover"||t==="pointerover",g=t==="mouseout"||t==="pointerout",h&&n!==Wu&&(v=n.relatedTarget||n.fromElement)&&(gr(v)||v[pn]))break e;if((g||h)&&(h=c.window===c?c:(h=c.ownerDocument)?h.defaultView||h.parentWindow:window,g?(v=n.relatedTarget||n.toElement,g=u,v=v?gr(v):null,v!==null&&(E=Ar(v),v!==E||v.tag!==5&&v.tag!==6)&&(v=null)):(g=null,v=u),g!==v)){if(w=Gf,_="onMouseLeave",p="onMouseEnter",d="mouse",(t==="pointerout"||t==="pointerover")&&(w=tp,_="onPointerLeave",p="onPointerEnter",d="pointer"),E=g==null?h:ys(g),m=v==null?h:ys(v),h=new w(_,d+"leave",g,n,c),h.target=E,h.relatedTarget=m,_=null,gr(c)===u&&(w=new w(p,d+"enter",v,n,c),w.target=m,w.relatedTarget=E,_=w),E=_,g&&v)t:{for(w=g,p=v,d=0,m=w;m;m=ds(m))d++;for(m=0,_=p;_;_=ds(_))m++;for(;0<d-m;)w=ds(w),d--;for(;0<m-d;)p=ds(p),m--;for(;d--;){if(w===p||p!==null&&w===p.alternate)break t;w=ds(w),p=ds(p)}w=null}else w=null;g!==null&&pp(f,h,g,w,!1),v!==null&&E!==null&&pp(f,E,v,w,!0)}}e:{if(h=u?ys(u):window,g=h.nodeName&&h.nodeName.toLowerCase(),g==="select"||g==="input"&&h.type==="file")var x=G_;else if(sp(h))if(Tm)x=r0;else{x=t0;var C=e0}else(g=h.nodeName)&&g.toLowerCase()==="input"&&(h.type==="checkbox"||h.type==="radio")&&(x=n0);if(x&&(x=x(t,u))){Am(f,x,n,c);break e}C&&C(t,h,u),t==="focusout"&&(C=h._wrapperState)&&C.controlled&&h.type==="number"&&zu(h,"number",h.value)}switch(C=u?ys(u):window,t){case"focusin":(sp(C)||C.contentEditable==="true")&&(hs=C,Yu=u,zi=null);break;case"focusout":zi=Yu=hs=null;break;case"mousedown":Gu=!0;break;case"contextmenu":case"mouseup":case"dragend":Gu=!1,lp(f,n,c);break;case"selectionchange":if(a0)break;case"keydown":case"keyup":lp(f,n,c)}var P;if(Fc)e:{switch(t){case"compositionstart":var A="onCompositionStart";break e;case"compositionend":A="onCompositionEnd";break e;case"compositionupdate":A="onCompositionUpdate";break e}A=void 0}else ms?Pm(t,n)&&(A="onCompositionEnd"):t==="keydown"&&n.keyCode===229&&(A="onCompositionStart");A&&(Em&&n.locale!=="ko"&&(ms||A!=="onCompositionStart"?A==="onCompositionEnd"&&ms&&(P=Sm()):(Dn=c,Lc="value"in Dn?Dn.value:Dn.textContent,ms=!0)),C=Lo(u,A),0<C.length&&(A=new ep(A,t,null,n,c),f.push({event:A,listeners:C}),P?A.data=P:(P=Cm(n),P!==null&&(A.data=P)))),(P=K_?Q_(t,n):X_(t,n))&&(u=Lo(u,"onBeforeInput"),0<u.length&&(c=new ep("onBeforeInput","beforeinput",null,n,c),f.push({event:c,listeners:u}),c.data=P))}$m(f,e)})}function ea(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Lo(t,e){for(var n=e+"Capture",r=[];t!==null;){var s=t,i=s.stateNode;s.tag===5&&i!==null&&(s=i,i=qi(t,n),i!=null&&r.unshift(ea(t,i,s)),i=qi(t,e),i!=null&&r.push(ea(t,i,s))),t=t.return}return r}function ds(t){if(t===null)return null;do t=t.return;while(t&&t.tag!==5);return t||null}function pp(t,e,n,r,s){for(var i=e._reactName,a=[];n!==null&&n!==r;){var o=n,l=o.alternate,u=o.stateNode;if(l!==null&&l===r)break;o.tag===5&&u!==null&&(o=u,s?(l=qi(n,i),l!=null&&a.unshift(ea(n,l,o))):s||(l=qi(n,i),l!=null&&a.push(ea(n,l,o)))),n=n.return}a.length!==0&&t.push({event:e,listeners:a})}var l0=/\r\n?/g,u0=/\u0000|\uFFFD/g;function mp(t){return(typeof t=="string"?t:""+t).replace(l0,`
`).replace(u0,"")}function po(t,e,n){if(e=mp(e),mp(t)!==e&&n)throw Error(k(425))}function jo(){}var ec=null,tc=null;function nc(t,e){return t==="textarea"||t==="noscript"||typeof e.children=="string"||typeof e.children=="number"||typeof e.dangerouslySetInnerHTML=="object"&&e.dangerouslySetInnerHTML!==null&&e.dangerouslySetInnerHTML.__html!=null}var rc=typeof setTimeout=="function"?setTimeout:void 0,c0=typeof clearTimeout=="function"?clearTimeout:void 0,hp=typeof Promise=="function"?Promise:void 0,d0=typeof queueMicrotask=="function"?queueMicrotask:typeof hp!="undefined"?function(t){return hp.resolve(null).then(t).catch(f0)}:rc;function f0(t){setTimeout(function(){throw t})}function Su(t,e){var n=e,r=0;do{var s=n.nextSibling;if(t.removeChild(n),s&&s.nodeType===8)if(n=s.data,n==="/$"){if(r===0){t.removeChild(s),Xi(e);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=s}while(n);Xi(e)}function zn(t){for(;t!=null;t=t.nextSibling){var e=t.nodeType;if(e===1||e===3)break;if(e===8){if(e=t.data,e==="$"||e==="$!"||e==="$?")break;if(e==="/$")return null}}return t}function gp(t){t=t.previousSibling;for(var e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="$"||n==="$!"||n==="$?"){if(e===0)return t;e--}else n==="/$"&&e++}t=t.previousSibling}return null}var $s=Math.random().toString(36).slice(2),Bt="__reactFiber$"+$s,ta="__reactProps$"+$s,pn="__reactContainer$"+$s,sc="__reactEvents$"+$s,p0="__reactListeners$"+$s,m0="__reactHandles$"+$s;function gr(t){var e=t[Bt];if(e)return e;for(var n=t.parentNode;n;){if(e=n[pn]||n[Bt]){if(n=e.alternate,e.child!==null||n!==null&&n.child!==null)for(t=gp(t);t!==null;){if(n=t[Bt])return n;t=gp(t)}return e}t=n,n=t.parentNode}return null}function ca(t){return t=t[Bt]||t[pn],!t||t.tag!==5&&t.tag!==6&&t.tag!==13&&t.tag!==3?null:t}function ys(t){if(t.tag===5||t.tag===6)return t.stateNode;throw Error(k(33))}function rl(t){return t[ta]||null}var ic=[],vs=-1;function Kn(t){return{current:t}}function ne(t){0>vs||(t.current=ic[vs],ic[vs]=null,vs--)}function G(t,e){vs++,ic[vs]=t.current,t.current=e}var Hn={},be=Kn(Hn),qe=Kn(!1),xr=Hn;function Rs(t,e){var n=t.type.contextTypes;if(!n)return Hn;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var s={},i;for(i in n)s[i]=e[i];return r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=s),s}function Ke(t){return t=t.childContextTypes,t!=null}function $o(){ne(qe),ne(be)}function yp(t,e,n){if(be.current!==Hn)throw Error(k(168));G(be,e),G(qe,n)}function zm(t,e,n){var r=t.stateNode;if(e=e.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var s in r)if(!(s in e))throw Error(k(108,e_(t)||"Unknown",s));return oe({},n,r)}function Fo(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||Hn,xr=be.current,G(be,t),G(qe,qe.current),!0}function vp(t,e,n){var r=t.stateNode;if(!r)throw Error(k(169));n?(t=zm(t,e,xr),r.__reactInternalMemoizedMergedChildContext=t,ne(qe),ne(be),G(be,t)):ne(qe),G(qe,n)}var ln=null,sl=!1,Eu=!1;function Um(t){ln===null?ln=[t]:ln.push(t)}function h0(t){sl=!0,Um(t)}function Qn(){if(!Eu&&ln!==null){Eu=!0;var t=0,e=X;try{var n=ln;for(X=1;t<n.length;t++){var r=n[t];do r=r(!0);while(r!==null)}ln=null,sl=!1}catch(s){throw ln!==null&&(ln=ln.slice(t+1)),fm(Nc,Qn),s}finally{X=e,Eu=!1}}return null}var _s=[],ws=0,zo=null,Uo=0,ft=[],pt=0,kr=null,un=1,cn="";function mr(t,e){_s[ws++]=Uo,_s[ws++]=zo,zo=t,Uo=e}function Bm(t,e,n){ft[pt++]=un,ft[pt++]=cn,ft[pt++]=kr,kr=t;var r=un;t=cn;var s=32-Tt(r)-1;r&=~(1<<s),n+=1;var i=32-Tt(e)+s;if(30<i){var a=s-s%5;i=(r&(1<<a)-1).toString(32),r>>=a,s-=a,un=1<<32-Tt(e)+s|n<<s|r,cn=i+t}else un=1<<i|n<<s|r,cn=t}function Uc(t){t.return!==null&&(mr(t,1),Bm(t,1,0))}function Bc(t){for(;t===zo;)zo=_s[--ws],_s[ws]=null,Uo=_s[--ws],_s[ws]=null;for(;t===kr;)kr=ft[--pt],ft[pt]=null,cn=ft[--pt],ft[pt]=null,un=ft[--pt],ft[pt]=null}var nt=null,tt=null,se=!1,At=null;function Vm(t,e){var n=mt(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,e=t.deletions,e===null?(t.deletions=[n],t.flags|=16):e.push(n)}function _p(t,e){switch(t.tag){case 5:var n=t.type;return e=e.nodeType!==1||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e,e!==null?(t.stateNode=e,nt=t,tt=zn(e.firstChild),!0):!1;case 6:return e=t.pendingProps===""||e.nodeType!==3?null:e,e!==null?(t.stateNode=e,nt=t,tt=null,!0):!1;case 13:return e=e.nodeType!==8?null:e,e!==null?(n=kr!==null?{id:un,overflow:cn}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},n=mt(18,null,null,0),n.stateNode=e,n.return=t,t.child=n,nt=t,tt=null,!0):!1;default:return!1}}function ac(t){return(t.mode&1)!==0&&(t.flags&128)===0}function oc(t){if(se){var e=tt;if(e){var n=e;if(!_p(t,e)){if(ac(t))throw Error(k(418));e=zn(n.nextSibling);var r=nt;e&&_p(t,e)?Vm(r,n):(t.flags=t.flags&-4097|2,se=!1,nt=t)}}else{if(ac(t))throw Error(k(418));t.flags=t.flags&-4097|2,se=!1,nt=t}}}function wp(t){for(t=t.return;t!==null&&t.tag!==5&&t.tag!==3&&t.tag!==13;)t=t.return;nt=t}function mo(t){if(t!==nt)return!1;if(!se)return wp(t),se=!0,!1;var e;if((e=t.tag!==3)&&!(e=t.tag!==5)&&(e=t.type,e=e!=="head"&&e!=="body"&&!nc(t.type,t.memoizedProps)),e&&(e=tt)){if(ac(t))throw Zm(),Error(k(418));for(;e;)Vm(t,e),e=zn(e.nextSibling)}if(wp(t),t.tag===13){if(t=t.memoizedState,t=t!==null?t.dehydrated:null,!t)throw Error(k(317));e:{for(t=t.nextSibling,e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="/$"){if(e===0){tt=zn(t.nextSibling);break e}e--}else n!=="$"&&n!=="$!"&&n!=="$?"||e++}t=t.nextSibling}tt=null}}else tt=nt?zn(t.stateNode.nextSibling):null;return!0}function Zm(){for(var t=tt;t;)t=zn(t.nextSibling)}function Ns(){tt=nt=null,se=!1}function Vc(t){At===null?At=[t]:At.push(t)}var g0=gn.ReactCurrentBatchConfig;function Ti(t,e,n){if(t=n.ref,t!==null&&typeof t!="function"&&typeof t!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(k(309));var r=n.stateNode}if(!r)throw Error(k(147,t));var s=r,i=""+t;return e!==null&&e.ref!==null&&typeof e.ref=="function"&&e.ref._stringRef===i?e.ref:(e=function(a){var o=s.refs;a===null?delete o[i]:o[i]=a},e._stringRef=i,e)}if(typeof t!="string")throw Error(k(284));if(!n._owner)throw Error(k(290,t))}return t}function ho(t,e){throw t=Object.prototype.toString.call(e),Error(k(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function xp(t){var e=t._init;return e(t._payload)}function Wm(t){function e(p,d){if(t){var m=p.deletions;m===null?(p.deletions=[d],p.flags|=16):m.push(d)}}function n(p,d){if(!t)return null;for(;d!==null;)e(p,d),d=d.sibling;return null}function r(p,d){for(p=new Map;d!==null;)d.key!==null?p.set(d.key,d):p.set(d.index,d),d=d.sibling;return p}function s(p,d){return p=Zn(p,d),p.index=0,p.sibling=null,p}function i(p,d,m){return p.index=m,t?(m=p.alternate,m!==null?(m=m.index,m<d?(p.flags|=2,d):m):(p.flags|=2,d)):(p.flags|=1048576,d)}function a(p){return t&&p.alternate===null&&(p.flags|=2),p}function o(p,d,m,_){return d===null||d.tag!==6?(d=Ru(m,p.mode,_),d.return=p,d):(d=s(d,m),d.return=p,d)}function l(p,d,m,_){var x=m.type;return x===ps?c(p,d,m.props.children,_,m.key):d!==null&&(d.elementType===x||typeof x=="object"&&x!==null&&x.$$typeof===Rn&&xp(x)===d.type)?(_=s(d,m.props),_.ref=Ti(p,d,m),_.return=p,_):(_=To(m.type,m.key,m.props,null,p.mode,_),_.ref=Ti(p,d,m),_.return=p,_)}function u(p,d,m,_){return d===null||d.tag!==4||d.stateNode.containerInfo!==m.containerInfo||d.stateNode.implementation!==m.implementation?(d=Nu(m,p.mode,_),d.return=p,d):(d=s(d,m.children||[]),d.return=p,d)}function c(p,d,m,_,x){return d===null||d.tag!==7?(d=wr(m,p.mode,_,x),d.return=p,d):(d=s(d,m),d.return=p,d)}function f(p,d,m){if(typeof d=="string"&&d!==""||typeof d=="number")return d=Ru(""+d,p.mode,m),d.return=p,d;if(typeof d=="object"&&d!==null){switch(d.$$typeof){case Ga:return m=To(d.type,d.key,d.props,null,p.mode,m),m.ref=Ti(p,null,d),m.return=p,m;case fs:return d=Nu(d,p.mode,m),d.return=p,d;case Rn:var _=d._init;return f(p,_(d._payload),m)}if(bi(d)||Ei(d))return d=wr(d,p.mode,m,null),d.return=p,d;ho(p,d)}return null}function h(p,d,m,_){var x=d!==null?d.key:null;if(typeof m=="string"&&m!==""||typeof m=="number")return x!==null?null:o(p,d,""+m,_);if(typeof m=="object"&&m!==null){switch(m.$$typeof){case Ga:return m.key===x?l(p,d,m,_):null;case fs:return m.key===x?u(p,d,m,_):null;case Rn:return x=m._init,h(p,d,x(m._payload),_)}if(bi(m)||Ei(m))return x!==null?null:c(p,d,m,_,null);ho(p,m)}return null}function g(p,d,m,_,x){if(typeof _=="string"&&_!==""||typeof _=="number")return p=p.get(m)||null,o(d,p,""+_,x);if(typeof _=="object"&&_!==null){switch(_.$$typeof){case Ga:return p=p.get(_.key===null?m:_.key)||null,l(d,p,_,x);case fs:return p=p.get(_.key===null?m:_.key)||null,u(d,p,_,x);case Rn:var C=_._init;return g(p,d,m,C(_._payload),x)}if(bi(_)||Ei(_))return p=p.get(m)||null,c(d,p,_,x,null);ho(d,_)}return null}function v(p,d,m,_){for(var x=null,C=null,P=d,A=d=0,D=null;P!==null&&A<m.length;A++){P.index>A?(D=P,P=null):D=P.sibling;var R=h(p,P,m[A],_);if(R===null){P===null&&(P=D);break}t&&P&&R.alternate===null&&e(p,P),d=i(R,d,A),C===null?x=R:C.sibling=R,C=R,P=D}if(A===m.length)return n(p,P),se&&mr(p,A),x;if(P===null){for(;A<m.length;A++)P=f(p,m[A],_),P!==null&&(d=i(P,d,A),C===null?x=P:C.sibling=P,C=P);return se&&mr(p,A),x}for(P=r(p,P);A<m.length;A++)D=g(P,p,A,m[A],_),D!==null&&(t&&D.alternate!==null&&P.delete(D.key===null?A:D.key),d=i(D,d,A),C===null?x=D:C.sibling=D,C=D);return t&&P.forEach(function(B){return e(p,B)}),se&&mr(p,A),x}function w(p,d,m,_){var x=Ei(m);if(typeof x!="function")throw Error(k(150));if(m=x.call(m),m==null)throw Error(k(151));for(var C=x=null,P=d,A=d=0,D=null,R=m.next();P!==null&&!R.done;A++,R=m.next()){P.index>A?(D=P,P=null):D=P.sibling;var B=h(p,P,R.value,_);if(B===null){P===null&&(P=D);break}t&&P&&B.alternate===null&&e(p,P),d=i(B,d,A),C===null?x=B:C.sibling=B,C=B,P=D}if(R.done)return n(p,P),se&&mr(p,A),x;if(P===null){for(;!R.done;A++,R=m.next())R=f(p,R.value,_),R!==null&&(d=i(R,d,A),C===null?x=R:C.sibling=R,C=R);return se&&mr(p,A),x}for(P=r(p,P);!R.done;A++,R=m.next())R=g(P,p,A,R.value,_),R!==null&&(t&&R.alternate!==null&&P.delete(R.key===null?A:R.key),d=i(R,d,A),C===null?x=R:C.sibling=R,C=R);return t&&P.forEach(function(K){return e(p,K)}),se&&mr(p,A),x}function E(p,d,m,_){if(typeof m=="object"&&m!==null&&m.type===ps&&m.key===null&&(m=m.props.children),typeof m=="object"&&m!==null){switch(m.$$typeof){case Ga:e:{for(var x=m.key,C=d;C!==null;){if(C.key===x){if(x=m.type,x===ps){if(C.tag===7){n(p,C.sibling),d=s(C,m.props.children),d.return=p,p=d;break e}}else if(C.elementType===x||typeof x=="object"&&x!==null&&x.$$typeof===Rn&&xp(x)===C.type){n(p,C.sibling),d=s(C,m.props),d.ref=Ti(p,C,m),d.return=p,p=d;break e}n(p,C);break}else e(p,C);C=C.sibling}m.type===ps?(d=wr(m.props.children,p.mode,_,m.key),d.return=p,p=d):(_=To(m.type,m.key,m.props,null,p.mode,_),_.ref=Ti(p,d,m),_.return=p,p=_)}return a(p);case fs:e:{for(C=m.key;d!==null;){if(d.key===C)if(d.tag===4&&d.stateNode.containerInfo===m.containerInfo&&d.stateNode.implementation===m.implementation){n(p,d.sibling),d=s(d,m.children||[]),d.return=p,p=d;break e}else{n(p,d);break}else e(p,d);d=d.sibling}d=Nu(m,p.mode,_),d.return=p,p=d}return a(p);case Rn:return C=m._init,E(p,d,C(m._payload),_)}if(bi(m))return v(p,d,m,_);if(Ei(m))return w(p,d,m,_);ho(p,m)}return typeof m=="string"&&m!==""||typeof m=="number"?(m=""+m,d!==null&&d.tag===6?(n(p,d.sibling),d=s(d,m),d.return=p,p=d):(n(p,d),d=Ru(m,p.mode,_),d.return=p,p=d),a(p)):n(p,d)}return E}var bs=Wm(!0),Hm=Wm(!1),Bo=Kn(null),Vo=null,xs=null,Zc=null;function Wc(){Zc=xs=Vo=null}function Hc(t){var e=Bo.current;ne(Bo),t._currentValue=e}function lc(t,e,n){for(;t!==null;){var r=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,r!==null&&(r.childLanes|=e)):r!==null&&(r.childLanes&e)!==e&&(r.childLanes|=e),t===n)break;t=t.return}}function Ts(t,e){Vo=t,Zc=xs=null,t=t.dependencies,t!==null&&t.firstContext!==null&&(t.lanes&e&&(He=!0),t.firstContext=null)}function gt(t){var e=t._currentValue;if(Zc!==t)if(t={context:t,memoizedValue:e,next:null},xs===null){if(Vo===null)throw Error(k(308));xs=t,Vo.dependencies={lanes:0,firstContext:t}}else xs=xs.next=t;return e}var yr=null;function qc(t){yr===null?yr=[t]:yr.push(t)}function qm(t,e,n,r){var s=e.interleaved;return s===null?(n.next=n,qc(e)):(n.next=s.next,s.next=n),e.interleaved=n,mn(t,r)}function mn(t,e){t.lanes|=e;var n=t.alternate;for(n!==null&&(n.lanes|=e),n=t,t=t.return;t!==null;)t.childLanes|=e,n=t.alternate,n!==null&&(n.childLanes|=e),n=t,t=t.return;return n.tag===3?n.stateNode:null}var Nn=!1;function Kc(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Km(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function dn(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Un(t,e,n){var r=t.updateQueue;if(r===null)return null;if(r=r.shared,Q&2){var s=r.pending;return s===null?e.next=e:(e.next=s.next,s.next=e),r.pending=e,mn(t,n)}return s=r.interleaved,s===null?(e.next=e,qc(r)):(e.next=s.next,s.next=e),r.interleaved=e,mn(t,n)}function ko(t,e,n){if(e=e.updateQueue,e!==null&&(e=e.shared,(n&4194240)!==0)){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,bc(t,n)}}function kp(t,e){var n=t.updateQueue,r=t.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var s=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?s=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?s=i=e:i=i.next=e}else s=i=e;n={baseState:r.baseState,firstBaseUpdate:s,lastBaseUpdate:i,shared:r.shared,effects:r.effects},t.updateQueue=n;return}t=n.lastBaseUpdate,t===null?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function Zo(t,e,n,r){var s=t.updateQueue;Nn=!1;var i=s.firstBaseUpdate,a=s.lastBaseUpdate,o=s.shared.pending;if(o!==null){s.shared.pending=null;var l=o,u=l.next;l.next=null,a===null?i=u:a.next=u,a=l;var c=t.alternate;c!==null&&(c=c.updateQueue,o=c.lastBaseUpdate,o!==a&&(o===null?c.firstBaseUpdate=u:o.next=u,c.lastBaseUpdate=l))}if(i!==null){var f=s.baseState;a=0,c=u=l=null,o=i;do{var h=o.lane,g=o.eventTime;if((r&h)===h){c!==null&&(c=c.next={eventTime:g,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var v=t,w=o;switch(h=e,g=n,w.tag){case 1:if(v=w.payload,typeof v=="function"){f=v.call(g,f,h);break e}f=v;break e;case 3:v.flags=v.flags&-65537|128;case 0:if(v=w.payload,h=typeof v=="function"?v.call(g,f,h):v,h==null)break e;f=oe({},f,h);break e;case 2:Nn=!0}}o.callback!==null&&o.lane!==0&&(t.flags|=64,h=s.effects,h===null?s.effects=[o]:h.push(o))}else g={eventTime:g,lane:h,tag:o.tag,payload:o.payload,callback:o.callback,next:null},c===null?(u=c=g,l=f):c=c.next=g,a|=h;if(o=o.next,o===null){if(o=s.shared.pending,o===null)break;h=o,o=h.next,h.next=null,s.lastBaseUpdate=h,s.shared.pending=null}}while(1);if(c===null&&(l=f),s.baseState=l,s.firstBaseUpdate=u,s.lastBaseUpdate=c,e=s.shared.interleaved,e!==null){s=e;do a|=s.lane,s=s.next;while(s!==e)}else i===null&&(s.shared.lanes=0);Er|=a,t.lanes=a,t.memoizedState=f}}function Sp(t,e,n){if(t=e.effects,e.effects=null,t!==null)for(e=0;e<t.length;e++){var r=t[e],s=r.callback;if(s!==null){if(r.callback=null,r=n,typeof s!="function")throw Error(k(191,s));s.call(r)}}}var da={},Zt=Kn(da),na=Kn(da),ra=Kn(da);function vr(t){if(t===da)throw Error(k(174));return t}function Qc(t,e){switch(G(ra,e),G(na,t),G(Zt,da),t=e.nodeType,t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Bu(null,"");break;default:t=t===8?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Bu(e,t)}ne(Zt),G(Zt,e)}function Ms(){ne(Zt),ne(na),ne(ra)}function Qm(t){vr(ra.current);var e=vr(Zt.current),n=Bu(e,t.type);e!==n&&(G(na,t),G(Zt,n))}function Xc(t){na.current===t&&(ne(Zt),ne(na))}var ie=Kn(0);function Wo(t){for(var e=t;e!==null;){if(e.tag===13){var n=e.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return e}else if(e.tag===19&&e.memoizedProps.revealOrder!==void 0){if(e.flags&128)return e}else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Pu=[];function Jc(){for(var t=0;t<Pu.length;t++)Pu[t]._workInProgressVersionPrimary=null;Pu.length=0}var So=gn.ReactCurrentDispatcher,Cu=gn.ReactCurrentBatchConfig,Sr=0,ae=null,he=null,we=null,Ho=!1,Ui=!1,sa=0,y0=0;function Oe(){throw Error(k(321))}function Yc(t,e){if(e===null)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!Ot(t[n],e[n]))return!1;return!0}function Gc(t,e,n,r,s,i){if(Sr=i,ae=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,So.current=t===null||t.memoizedState===null?x0:k0,t=n(r,s),Ui){i=0;do{if(Ui=!1,sa=0,25<=i)throw Error(k(301));i+=1,we=he=null,e.updateQueue=null,So.current=S0,t=n(r,s)}while(Ui)}if(So.current=qo,e=he!==null&&he.next!==null,Sr=0,we=he=ae=null,Ho=!1,e)throw Error(k(300));return t}function ed(){var t=sa!==0;return sa=0,t}function Ut(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return we===null?ae.memoizedState=we=t:we=we.next=t,we}function yt(){if(he===null){var t=ae.alternate;t=t!==null?t.memoizedState:null}else t=he.next;var e=we===null?ae.memoizedState:we.next;if(e!==null)we=e,he=t;else{if(t===null)throw Error(k(310));he=t,t={memoizedState:he.memoizedState,baseState:he.baseState,baseQueue:he.baseQueue,queue:he.queue,next:null},we===null?ae.memoizedState=we=t:we=we.next=t}return we}function ia(t,e){return typeof e=="function"?e(t):e}function Au(t){var e=yt(),n=e.queue;if(n===null)throw Error(k(311));n.lastRenderedReducer=t;var r=he,s=r.baseQueue,i=n.pending;if(i!==null){if(s!==null){var a=s.next;s.next=i.next,i.next=a}r.baseQueue=s=i,n.pending=null}if(s!==null){i=s.next,r=r.baseState;var o=a=null,l=null,u=i;do{var c=u.lane;if((Sr&c)===c)l!==null&&(l=l.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:t(r,u.action);else{var f={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};l===null?(o=l=f,a=r):l=l.next=f,ae.lanes|=c,Er|=c}u=u.next}while(u!==null&&u!==i);l===null?a=r:l.next=o,Ot(r,e.memoizedState)||(He=!0),e.memoizedState=r,e.baseState=a,e.baseQueue=l,n.lastRenderedState=r}if(t=n.interleaved,t!==null){s=t;do i=s.lane,ae.lanes|=i,Er|=i,s=s.next;while(s!==t)}else s===null&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function Tu(t){var e=yt(),n=e.queue;if(n===null)throw Error(k(311));n.lastRenderedReducer=t;var r=n.dispatch,s=n.pending,i=e.memoizedState;if(s!==null){n.pending=null;var a=s=s.next;do i=t(i,a.action),a=a.next;while(a!==s);Ot(i,e.memoizedState)||(He=!0),e.memoizedState=i,e.baseQueue===null&&(e.baseState=i),n.lastRenderedState=i}return[i,r]}function Xm(){}function Jm(t,e){var n=ae,r=yt(),s=e(),i=!Ot(r.memoizedState,s);if(i&&(r.memoizedState=s,He=!0),r=r.queue,td(eh.bind(null,n,r,t),[t]),r.getSnapshot!==e||i||we!==null&&we.memoizedState.tag&1){if(n.flags|=2048,aa(9,Gm.bind(null,n,r,s,e),void 0,null),xe===null)throw Error(k(349));Sr&30||Ym(n,e,s)}return s}function Ym(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},e=ae.updateQueue,e===null?(e={lastEffect:null,stores:null},ae.updateQueue=e,e.stores=[t]):(n=e.stores,n===null?e.stores=[t]:n.push(t))}function Gm(t,e,n,r){e.value=n,e.getSnapshot=r,th(e)&&nh(t)}function eh(t,e,n){return n(function(){th(e)&&nh(t)})}function th(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!Ot(t,n)}catch(r){return!0}}function nh(t){var e=mn(t,1);e!==null&&It(e,t,1,-1)}function Ep(t){var e=Ut();return typeof t=="function"&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ia,lastRenderedState:t},e.queue=t,t=t.dispatch=w0.bind(null,ae,t),[e.memoizedState,t]}function aa(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},e=ae.updateQueue,e===null?(e={lastEffect:null,stores:null},ae.updateQueue=e,e.lastEffect=t.next=t):(n=e.lastEffect,n===null?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t)),t}function rh(){return yt().memoizedState}function Eo(t,e,n,r){var s=Ut();ae.flags|=t,s.memoizedState=aa(1|e,n,void 0,r===void 0?null:r)}function il(t,e,n,r){var s=yt();r=r===void 0?null:r;var i=void 0;if(he!==null){var a=he.memoizedState;if(i=a.destroy,r!==null&&Yc(r,a.deps)){s.memoizedState=aa(e,n,i,r);return}}ae.flags|=t,s.memoizedState=aa(1|e,n,i,r)}function Pp(t,e){return Eo(8390656,8,t,e)}function td(t,e){return il(2048,8,t,e)}function sh(t,e){return il(4,2,t,e)}function ih(t,e){return il(4,4,t,e)}function ah(t,e){if(typeof e=="function")return t=t(),e(t),function(){e(null)};if(e!=null)return t=t(),e.current=t,function(){e.current=null}}function oh(t,e,n){return n=n!=null?n.concat([t]):null,il(4,4,ah.bind(null,e,t),n)}function nd(){}function lh(t,e){var n=yt();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Yc(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function uh(t,e){var n=yt();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Yc(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function ch(t,e,n){return Sr&21?(Ot(n,e)||(n=hm(),ae.lanes|=n,Er|=n,t.baseState=!0),e):(t.baseState&&(t.baseState=!1,He=!0),t.memoizedState=n)}function v0(t,e){var n=X;X=n!==0&&4>n?n:4,t(!0);var r=Cu.transition;Cu.transition={};try{t(!1),e()}finally{X=n,Cu.transition=r}}function dh(){return yt().memoizedState}function _0(t,e,n){var r=Vn(t);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},fh(t))ph(e,n);else if(n=qm(t,e,n,r),n!==null){var s=$e();It(n,t,r,s),mh(n,e,r)}}function w0(t,e,n){var r=Vn(t),s={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(fh(t))ph(e,s);else{var i=t.alternate;if(t.lanes===0&&(i===null||i.lanes===0)&&(i=e.lastRenderedReducer,i!==null))try{var a=e.lastRenderedState,o=i(a,n);if(s.hasEagerState=!0,s.eagerState=o,Ot(o,a)){var l=e.interleaved;l===null?(s.next=s,qc(e)):(s.next=l.next,l.next=s),e.interleaved=s;return}}catch(u){}finally{}n=qm(t,e,s,r),n!==null&&(s=$e(),It(n,t,r,s),mh(n,e,r))}}function fh(t){var e=t.alternate;return t===ae||e!==null&&e===ae}function ph(t,e){Ui=Ho=!0;var n=t.pending;n===null?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function mh(t,e,n){if(n&4194240){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,bc(t,n)}}var qo={readContext:gt,useCallback:Oe,useContext:Oe,useEffect:Oe,useImperativeHandle:Oe,useInsertionEffect:Oe,useLayoutEffect:Oe,useMemo:Oe,useReducer:Oe,useRef:Oe,useState:Oe,useDebugValue:Oe,useDeferredValue:Oe,useTransition:Oe,useMutableSource:Oe,useSyncExternalStore:Oe,useId:Oe,unstable_isNewReconciler:!1},x0={readContext:gt,useCallback:function(t,e){return Ut().memoizedState=[t,e===void 0?null:e],t},useContext:gt,useEffect:Pp,useImperativeHandle:function(t,e,n){return n=n!=null?n.concat([t]):null,Eo(4194308,4,ah.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Eo(4194308,4,t,e)},useInsertionEffect:function(t,e){return Eo(4,2,t,e)},useMemo:function(t,e){var n=Ut();return e=e===void 0?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=Ut();return e=n!==void 0?n(e):e,r.memoizedState=r.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},r.queue=t,t=t.dispatch=_0.bind(null,ae,t),[r.memoizedState,t]},useRef:function(t){var e=Ut();return t={current:t},e.memoizedState=t},useState:Ep,useDebugValue:nd,useDeferredValue:function(t){return Ut().memoizedState=t},useTransition:function(){var t=Ep(!1),e=t[0];return t=v0.bind(null,t[1]),Ut().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var r=ae,s=Ut();if(se){if(n===void 0)throw Error(k(407));n=n()}else{if(n=e(),xe===null)throw Error(k(349));Sr&30||Ym(r,e,n)}s.memoizedState=n;var i={value:n,getSnapshot:e};return s.queue=i,Pp(eh.bind(null,r,i,t),[t]),r.flags|=2048,aa(9,Gm.bind(null,r,i,n,e),void 0,null),n},useId:function(){var t=Ut(),e=xe.identifierPrefix;if(se){var n=cn,r=un;n=(r&~(1<<32-Tt(r)-1)).toString(32)+n,e=":"+e+"R"+n,n=sa++,0<n&&(e+="H"+n.toString(32)),e+=":"}else n=y0++,e=":"+e+"r"+n.toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},k0={readContext:gt,useCallback:lh,useContext:gt,useEffect:td,useImperativeHandle:oh,useInsertionEffect:sh,useLayoutEffect:ih,useMemo:uh,useReducer:Au,useRef:rh,useState:function(){return Au(ia)},useDebugValue:nd,useDeferredValue:function(t){var e=yt();return ch(e,he.memoizedState,t)},useTransition:function(){var t=Au(ia)[0],e=yt().memoizedState;return[t,e]},useMutableSource:Xm,useSyncExternalStore:Jm,useId:dh,unstable_isNewReconciler:!1},S0={readContext:gt,useCallback:lh,useContext:gt,useEffect:td,useImperativeHandle:oh,useInsertionEffect:sh,useLayoutEffect:ih,useMemo:uh,useReducer:Tu,useRef:rh,useState:function(){return Tu(ia)},useDebugValue:nd,useDeferredValue:function(t){var e=yt();return he===null?e.memoizedState=t:ch(e,he.memoizedState,t)},useTransition:function(){var t=Tu(ia)[0],e=yt().memoizedState;return[t,e]},useMutableSource:Xm,useSyncExternalStore:Jm,useId:dh,unstable_isNewReconciler:!1};function Pt(t,e){if(t&&t.defaultProps){e=oe({},e),t=t.defaultProps;for(var n in t)e[n]===void 0&&(e[n]=t[n]);return e}return e}function uc(t,e,n,r){e=t.memoizedState,n=n(r,e),n=n==null?e:oe({},e,n),t.memoizedState=n,t.lanes===0&&(t.updateQueue.baseState=n)}var al={isMounted:function(t){return(t=t._reactInternals)?Ar(t)===t:!1},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=$e(),s=Vn(t),i=dn(r,s);i.payload=e,n!=null&&(i.callback=n),e=Un(t,i,s),e!==null&&(It(e,t,s,r),ko(e,t,s))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=$e(),s=Vn(t),i=dn(r,s);i.tag=1,i.payload=e,n!=null&&(i.callback=n),e=Un(t,i,s),e!==null&&(It(e,t,s,r),ko(e,t,s))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=$e(),r=Vn(t),s=dn(n,r);s.tag=2,e!=null&&(s.callback=e),e=Un(t,s,r),e!==null&&(It(e,t,r,n),ko(e,t,r))}};function Cp(t,e,n,r,s,i,a){return t=t.stateNode,typeof t.shouldComponentUpdate=="function"?t.shouldComponentUpdate(r,i,a):e.prototype&&e.prototype.isPureReactComponent?!Yi(n,r)||!Yi(s,i):!0}function hh(t,e,n){var r=!1,s=Hn,i=e.contextType;return typeof i=="object"&&i!==null?i=gt(i):(s=Ke(e)?xr:be.current,r=e.contextTypes,i=(r=r!=null)?Rs(t,s):Hn),e=new e(n,i),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=al,t.stateNode=e,e._reactInternals=t,r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=s,t.__reactInternalMemoizedMaskedChildContext=i),e}function Ap(t,e,n,r){t=e.state,typeof e.componentWillReceiveProps=="function"&&e.componentWillReceiveProps(n,r),typeof e.UNSAFE_componentWillReceiveProps=="function"&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&al.enqueueReplaceState(e,e.state,null)}function cc(t,e,n,r){var s=t.stateNode;s.props=n,s.state=t.memoizedState,s.refs={},Kc(t);var i=e.contextType;typeof i=="object"&&i!==null?s.context=gt(i):(i=Ke(e)?xr:be.current,s.context=Rs(t,i)),s.state=t.memoizedState,i=e.getDerivedStateFromProps,typeof i=="function"&&(uc(t,e,i,n),s.state=t.memoizedState),typeof e.getDerivedStateFromProps=="function"||typeof s.getSnapshotBeforeUpdate=="function"||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(e=s.state,typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount(),e!==s.state&&al.enqueueReplaceState(s,s.state,null),Zo(t,n,s,r),s.state=t.memoizedState),typeof s.componentDidMount=="function"&&(t.flags|=4194308)}function Ds(t,e){try{var n="",r=e;do n+=Gv(r),r=r.return;while(r);var s=n}catch(i){s=`
Error generating stack: `+i.message+`
`+i.stack}return{value:t,source:e,stack:s,digest:null}}function Iu(t,e,n){return{value:t,source:null,stack:n!=null?n:null,digest:e!=null?e:null}}function dc(t,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var E0=typeof WeakMap=="function"?WeakMap:Map;function gh(t,e,n){n=dn(-1,n),n.tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){Qo||(Qo=!0,xc=r),dc(t,e)},n}function yh(t,e,n){n=dn(-1,n),n.tag=3;var r=t.type.getDerivedStateFromError;if(typeof r=="function"){var s=e.value;n.payload=function(){return r(s)},n.callback=function(){dc(t,e)}}var i=t.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){dc(t,e),typeof r!="function"&&(Bn===null?Bn=new Set([this]):Bn.add(this));var a=e.stack;this.componentDidCatch(e.value,{componentStack:a!==null?a:""})}),n}function Tp(t,e,n){var r=t.pingCache;if(r===null){r=t.pingCache=new E0;var s=new Set;r.set(e,s)}else s=r.get(e),s===void 0&&(s=new Set,r.set(e,s));s.has(n)||(s.add(n),t=$0.bind(null,t,e,n),e.then(t,t))}function Ip(t){do{var e;if((e=t.tag===13)&&(e=t.memoizedState,e=e!==null?e.dehydrated!==null:!0),e)return t;t=t.return}while(t!==null);return null}function Op(t,e,n,r,s){return t.mode&1?(t.flags|=65536,t.lanes=s,t):(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(e=dn(-1,1),e.tag=2,Un(n,e,1))),n.lanes|=1),t)}var P0=gn.ReactCurrentOwner,He=!1;function je(t,e,n,r){e.child=t===null?Hm(e,null,n,r):bs(e,t.child,n,r)}function Rp(t,e,n,r,s){n=n.render;var i=e.ref;return Ts(e,s),r=Gc(t,e,n,r,i,s),n=ed(),t!==null&&!He?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~s,hn(t,e,s)):(se&&n&&Uc(e),e.flags|=1,je(t,e,r,s),e.child)}function Np(t,e,n,r,s){if(t===null){var i=n.type;return typeof i=="function"&&!cd(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(e.tag=15,e.type=i,vh(t,e,i,r,s)):(t=To(n.type,null,r,e,e.mode,s),t.ref=e.ref,t.return=e,e.child=t)}if(i=t.child,!(t.lanes&s)){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:Yi,n(a,r)&&t.ref===e.ref)return hn(t,e,s)}return e.flags|=1,t=Zn(i,r),t.ref=e.ref,t.return=e,e.child=t}function vh(t,e,n,r,s){if(t!==null){var i=t.memoizedProps;if(Yi(i,r)&&t.ref===e.ref)if(He=!1,e.pendingProps=r=i,(t.lanes&s)!==0)t.flags&131072&&(He=!0);else return e.lanes=t.lanes,hn(t,e,s)}return fc(t,e,n,r,s)}function _h(t,e,n){var r=e.pendingProps,s=r.children,i=t!==null?t.memoizedState:null;if(r.mode==="hidden")if(!(e.mode&1))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(Ss,et),et|=n;else{if(!(n&1073741824))return t=i!==null?i.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,G(Ss,et),et|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,G(Ss,et),et|=r}else i!==null?(r=i.baseLanes|n,e.memoizedState=null):r=n,G(Ss,et),et|=r;return je(t,e,s,n),e.child}function wh(t,e){var n=e.ref;(t===null&&n!==null||t!==null&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function fc(t,e,n,r,s){var i=Ke(n)?xr:be.current;return i=Rs(e,i),Ts(e,s),n=Gc(t,e,n,r,i,s),r=ed(),t!==null&&!He?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~s,hn(t,e,s)):(se&&r&&Uc(e),e.flags|=1,je(t,e,n,s),e.child)}function bp(t,e,n,r,s){if(Ke(n)){var i=!0;Fo(e)}else i=!1;if(Ts(e,s),e.stateNode===null)Po(t,e),hh(e,n,r),cc(e,n,r,s),r=!0;else if(t===null){var a=e.stateNode,o=e.memoizedProps;a.props=o;var l=a.context,u=n.contextType;typeof u=="object"&&u!==null?u=gt(u):(u=Ke(n)?xr:be.current,u=Rs(e,u));var c=n.getDerivedStateFromProps,f=typeof c=="function"||typeof a.getSnapshotBeforeUpdate=="function";f||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(o!==r||l!==u)&&Ap(e,a,r,u),Nn=!1;var h=e.memoizedState;a.state=h,Zo(e,r,a,s),l=e.memoizedState,o!==r||h!==l||qe.current||Nn?(typeof c=="function"&&(uc(e,n,c,r),l=e.memoizedState),(o=Nn||Cp(e,n,o,r,h,l,u))?(f||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(e.flags|=4194308)):(typeof a.componentDidMount=="function"&&(e.flags|=4194308),e.memoizedProps=r,e.memoizedState=l),a.props=r,a.state=l,a.context=u,r=o):(typeof a.componentDidMount=="function"&&(e.flags|=4194308),r=!1)}else{a=e.stateNode,Km(t,e),o=e.memoizedProps,u=e.type===e.elementType?o:Pt(e.type,o),a.props=u,f=e.pendingProps,h=a.context,l=n.contextType,typeof l=="object"&&l!==null?l=gt(l):(l=Ke(n)?xr:be.current,l=Rs(e,l));var g=n.getDerivedStateFromProps;(c=typeof g=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(o!==f||h!==l)&&Ap(e,a,r,l),Nn=!1,h=e.memoizedState,a.state=h,Zo(e,r,a,s);var v=e.memoizedState;o!==f||h!==v||qe.current||Nn?(typeof g=="function"&&(uc(e,n,g,r),v=e.memoizedState),(u=Nn||Cp(e,n,u,r,h,v,l)||!1)?(c||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,v,l),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,v,l)),typeof a.componentDidUpdate=="function"&&(e.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(e.flags|=1024)):(typeof a.componentDidUpdate!="function"||o===t.memoizedProps&&h===t.memoizedState||(e.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||o===t.memoizedProps&&h===t.memoizedState||(e.flags|=1024),e.memoizedProps=r,e.memoizedState=v),a.props=r,a.state=v,a.context=l,r=u):(typeof a.componentDidUpdate!="function"||o===t.memoizedProps&&h===t.memoizedState||(e.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||o===t.memoizedProps&&h===t.memoizedState||(e.flags|=1024),r=!1)}return pc(t,e,n,r,i,s)}function pc(t,e,n,r,s,i){wh(t,e);var a=(e.flags&128)!==0;if(!r&&!a)return s&&vp(e,n,!1),hn(t,e,i);r=e.stateNode,P0.current=e;var o=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return e.flags|=1,t!==null&&a?(e.child=bs(e,t.child,null,i),e.child=bs(e,null,o,i)):je(t,e,o,i),e.memoizedState=r.state,s&&vp(e,n,!0),e.child}function xh(t){var e=t.stateNode;e.pendingContext?yp(t,e.pendingContext,e.pendingContext!==e.context):e.context&&yp(t,e.context,!1),Qc(t,e.containerInfo)}function Mp(t,e,n,r,s){return Ns(),Vc(s),e.flags|=256,je(t,e,n,r),e.child}var mc={dehydrated:null,treeContext:null,retryLane:0};function hc(t){return{baseLanes:t,cachePool:null,transitions:null}}function kh(t,e,n){var r=e.pendingProps,s=ie.current,i=!1,a=(e.flags&128)!==0,o;if((o=a)||(o=t!==null&&t.memoizedState===null?!1:(s&2)!==0),o?(i=!0,e.flags&=-129):(t===null||t.memoizedState!==null)&&(s|=1),G(ie,s&1),t===null)return oc(e),t=e.memoizedState,t!==null&&(t=t.dehydrated,t!==null)?(e.mode&1?t.data==="$!"?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(a=r.children,t=r.fallback,i?(r=e.mode,i=e.child,a={mode:"hidden",children:a},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=a):i=ul(a,r,0,null),t=wr(t,r,n,null),i.return=e,t.return=e,i.sibling=t,e.child=i,e.child.memoizedState=hc(n),e.memoizedState=mc,t):rd(e,a));if(s=t.memoizedState,s!==null&&(o=s.dehydrated,o!==null))return C0(t,e,a,r,o,s,n);if(i){i=r.fallback,a=e.mode,s=t.child,o=s.sibling;var l={mode:"hidden",children:r.children};return!(a&1)&&e.child!==s?(r=e.child,r.childLanes=0,r.pendingProps=l,e.deletions=null):(r=Zn(s,l),r.subtreeFlags=s.subtreeFlags&14680064),o!==null?i=Zn(o,i):(i=wr(i,a,n,null),i.flags|=2),i.return=e,r.return=e,r.sibling=i,e.child=r,r=i,i=e.child,a=t.child.memoizedState,a=a===null?hc(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=t.childLanes&~n,e.memoizedState=mc,r}return i=t.child,t=i.sibling,r=Zn(i,{mode:"visible",children:r.children}),!(e.mode&1)&&(r.lanes=n),r.return=e,r.sibling=null,t!==null&&(n=e.deletions,n===null?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=r,e.memoizedState=null,r}function rd(t,e){return e=ul({mode:"visible",children:e},t.mode,0,null),e.return=t,t.child=e}function go(t,e,n,r){return r!==null&&Vc(r),bs(e,t.child,null,n),t=rd(e,e.pendingProps.children),t.flags|=2,e.memoizedState=null,t}function C0(t,e,n,r,s,i,a){if(n)return e.flags&256?(e.flags&=-257,r=Iu(Error(k(422))),go(t,e,a,r)):e.memoizedState!==null?(e.child=t.child,e.flags|=128,null):(i=r.fallback,s=e.mode,r=ul({mode:"visible",children:r.children},s,0,null),i=wr(i,s,a,null),i.flags|=2,r.return=e,i.return=e,r.sibling=i,e.child=r,e.mode&1&&bs(e,t.child,null,a),e.child.memoizedState=hc(a),e.memoizedState=mc,i);if(!(e.mode&1))return go(t,e,a,null);if(s.data==="$!"){if(r=s.nextSibling&&s.nextSibling.dataset,r)var o=r.dgst;return r=o,i=Error(k(419)),r=Iu(i,r,void 0),go(t,e,a,r)}if(o=(a&t.childLanes)!==0,He||o){if(r=xe,r!==null){switch(a&-a){case 4:s=2;break;case 16:s=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:s=32;break;case 536870912:s=268435456;break;default:s=0}s=s&(r.suspendedLanes|a)?0:s,s!==0&&s!==i.retryLane&&(i.retryLane=s,mn(t,s),It(r,t,s,-1))}return ud(),r=Iu(Error(k(421))),go(t,e,a,r)}return s.data==="$?"?(e.flags|=128,e.child=t.child,e=F0.bind(null,t),s._reactRetry=e,null):(t=i.treeContext,tt=zn(s.nextSibling),nt=e,se=!0,At=null,t!==null&&(ft[pt++]=un,ft[pt++]=cn,ft[pt++]=kr,un=t.id,cn=t.overflow,kr=e),e=rd(e,r.children),e.flags|=4096,e)}function Dp(t,e,n){t.lanes|=e;var r=t.alternate;r!==null&&(r.lanes|=e),lc(t.return,e,n)}function Ou(t,e,n,r,s){var i=t.memoizedState;i===null?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:s}:(i.isBackwards=e,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=s)}function Sh(t,e,n){var r=e.pendingProps,s=r.revealOrder,i=r.tail;if(je(t,e,r.children,n),r=ie.current,r&2)r=r&1|2,e.flags|=128;else{if(t!==null&&t.flags&128)e:for(t=e.child;t!==null;){if(t.tag===13)t.memoizedState!==null&&Dp(t,n,e);else if(t.tag===19)Dp(t,n,e);else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;t.sibling===null;){if(t.return===null||t.return===e)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(G(ie,r),!(e.mode&1))e.memoizedState=null;else switch(s){case"forwards":for(n=e.child,s=null;n!==null;)t=n.alternate,t!==null&&Wo(t)===null&&(s=n),n=n.sibling;n=s,n===null?(s=e.child,e.child=null):(s=n.sibling,n.sibling=null),Ou(e,!1,s,n,i);break;case"backwards":for(n=null,s=e.child,e.child=null;s!==null;){if(t=s.alternate,t!==null&&Wo(t)===null){e.child=s;break}t=s.sibling,s.sibling=n,n=s,s=t}Ou(e,!0,n,null,i);break;case"together":Ou(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Po(t,e){!(e.mode&1)&&t!==null&&(t.alternate=null,e.alternate=null,e.flags|=2)}function hn(t,e,n){if(t!==null&&(e.dependencies=t.dependencies),Er|=e.lanes,!(n&e.childLanes))return null;if(t!==null&&e.child!==t.child)throw Error(k(153));if(e.child!==null){for(t=e.child,n=Zn(t,t.pendingProps),e.child=n,n.return=e;t.sibling!==null;)t=t.sibling,n=n.sibling=Zn(t,t.pendingProps),n.return=e;n.sibling=null}return e.child}function A0(t,e,n){switch(e.tag){case 3:xh(e),Ns();break;case 5:Qm(e);break;case 1:Ke(e.type)&&Fo(e);break;case 4:Qc(e,e.stateNode.containerInfo);break;case 10:var r=e.type._context,s=e.memoizedProps.value;G(Bo,r._currentValue),r._currentValue=s;break;case 13:if(r=e.memoizedState,r!==null)return r.dehydrated!==null?(G(ie,ie.current&1),e.flags|=128,null):n&e.child.childLanes?kh(t,e,n):(G(ie,ie.current&1),t=hn(t,e,n),t!==null?t.sibling:null);G(ie,ie.current&1);break;case 19:if(r=(n&e.childLanes)!==0,t.flags&128){if(r)return Sh(t,e,n);e.flags|=128}if(s=e.memoizedState,s!==null&&(s.rendering=null,s.tail=null,s.lastEffect=null),G(ie,ie.current),r)break;return null;case 22:case 23:return e.lanes=0,_h(t,e,n)}return hn(t,e,n)}var Eh,gc,Ph,Ch;Eh=function(t,e){for(var n=e.child;n!==null;){if(n.tag===5||n.tag===6)t.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===e)break;for(;n.sibling===null;){if(n.return===null||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};gc=function(){};Ph=function(t,e,n,r){var s=t.memoizedProps;if(s!==r){t=e.stateNode,vr(Zt.current);var i=null;switch(n){case"input":s=$u(t,s),r=$u(t,r),i=[];break;case"select":s=oe({},s,{value:void 0}),r=oe({},r,{value:void 0}),i=[];break;case"textarea":s=Uu(t,s),r=Uu(t,r),i=[];break;default:typeof s.onClick!="function"&&typeof r.onClick=="function"&&(t.onclick=jo)}Vu(n,r);var a;n=null;for(u in s)if(!r.hasOwnProperty(u)&&s.hasOwnProperty(u)&&s[u]!=null)if(u==="style"){var o=s[u];for(a in o)o.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(Wi.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var l=r[u];if(o=s!=null?s[u]:void 0,r.hasOwnProperty(u)&&l!==o&&(l!=null||o!=null))if(u==="style")if(o){for(a in o)!o.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&o[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(i||(i=[]),i.push(u,n)),n=l;else u==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,o=o?o.__html:void 0,l!=null&&o!==l&&(i=i||[]).push(u,l)):u==="children"?typeof l!="string"&&typeof l!="number"||(i=i||[]).push(u,""+l):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(Wi.hasOwnProperty(u)?(l!=null&&u==="onScroll"&&te("scroll",t),i||o===l||(i=[])):(i=i||[]).push(u,l))}n&&(i=i||[]).push("style",n);var u=i;(e.updateQueue=u)&&(e.flags|=4)}};Ch=function(t,e,n,r){n!==r&&(e.flags|=4)};function Ii(t,e){if(!se)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;e!==null;)e.alternate!==null&&(n=e),e=e.sibling;n===null?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?e||t.tail===null?t.tail=null:t.tail.sibling=null:r.sibling=null}}function Re(t){var e=t.alternate!==null&&t.alternate.child===t.child,n=0,r=0;if(e)for(var s=t.child;s!==null;)n|=s.lanes|s.childLanes,r|=s.subtreeFlags&14680064,r|=s.flags&14680064,s.return=t,s=s.sibling;else for(s=t.child;s!==null;)n|=s.lanes|s.childLanes,r|=s.subtreeFlags,r|=s.flags,s.return=t,s=s.sibling;return t.subtreeFlags|=r,t.childLanes=n,e}function T0(t,e,n){var r=e.pendingProps;switch(Bc(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Re(e),null;case 1:return Ke(e.type)&&$o(),Re(e),null;case 3:return r=e.stateNode,Ms(),ne(qe),ne(be),Jc(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(t===null||t.child===null)&&(mo(e)?e.flags|=4:t===null||t.memoizedState.isDehydrated&&!(e.flags&256)||(e.flags|=1024,At!==null&&(Ec(At),At=null))),gc(t,e),Re(e),null;case 5:Xc(e);var s=vr(ra.current);if(n=e.type,t!==null&&e.stateNode!=null)Ph(t,e,n,r,s),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!r){if(e.stateNode===null)throw Error(k(166));return Re(e),null}if(t=vr(Zt.current),mo(e)){r=e.stateNode,n=e.type;var i=e.memoizedProps;switch(r[Bt]=e,r[ta]=i,t=(e.mode&1)!==0,n){case"dialog":te("cancel",r),te("close",r);break;case"iframe":case"object":case"embed":te("load",r);break;case"video":case"audio":for(s=0;s<Di.length;s++)te(Di[s],r);break;case"source":te("error",r);break;case"img":case"image":case"link":te("error",r),te("load",r);break;case"details":te("toggle",r);break;case"input":Vf(r,i),te("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},te("invalid",r);break;case"textarea":Wf(r,i),te("invalid",r)}Vu(n,i),s=null;for(var a in i)if(i.hasOwnProperty(a)){var o=i[a];a==="children"?typeof o=="string"?r.textContent!==o&&(i.suppressHydrationWarning!==!0&&po(r.textContent,o,t),s=["children",o]):typeof o=="number"&&r.textContent!==""+o&&(i.suppressHydrationWarning!==!0&&po(r.textContent,o,t),s=["children",""+o]):Wi.hasOwnProperty(a)&&o!=null&&a==="onScroll"&&te("scroll",r)}switch(n){case"input":eo(r),Zf(r,i,!0);break;case"textarea":eo(r),Hf(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=jo)}r=s,e.updateQueue=r,r!==null&&(e.flags|=4)}else{a=s.nodeType===9?s:s.ownerDocument,t==="http://www.w3.org/1999/xhtml"&&(t=em(n)),t==="http://www.w3.org/1999/xhtml"?n==="script"?(t=a.createElement("div"),t.innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):typeof r.is=="string"?t=a.createElement(n,{is:r.is}):(t=a.createElement(n),n==="select"&&(a=t,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):t=a.createElementNS(t,n),t[Bt]=e,t[ta]=r,Eh(t,e,!1,!1),e.stateNode=t;e:{switch(a=Zu(n,r),n){case"dialog":te("cancel",t),te("close",t),s=r;break;case"iframe":case"object":case"embed":te("load",t),s=r;break;case"video":case"audio":for(s=0;s<Di.length;s++)te(Di[s],t);s=r;break;case"source":te("error",t),s=r;break;case"img":case"image":case"link":te("error",t),te("load",t),s=r;break;case"details":te("toggle",t),s=r;break;case"input":Vf(t,r),s=$u(t,r),te("invalid",t);break;case"option":s=r;break;case"select":t._wrapperState={wasMultiple:!!r.multiple},s=oe({},r,{value:void 0}),te("invalid",t);break;case"textarea":Wf(t,r),s=Uu(t,r),te("invalid",t);break;default:s=r}Vu(n,s),o=s;for(i in o)if(o.hasOwnProperty(i)){var l=o[i];i==="style"?rm(t,l):i==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&tm(t,l)):i==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&Hi(t,l):typeof l=="number"&&Hi(t,""+l):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(Wi.hasOwnProperty(i)?l!=null&&i==="onScroll"&&te("scroll",t):l!=null&&Ac(t,i,l,a))}switch(n){case"input":eo(t),Zf(t,r,!1);break;case"textarea":eo(t),Hf(t);break;case"option":r.value!=null&&t.setAttribute("value",""+Wn(r.value));break;case"select":t.multiple=!!r.multiple,i=r.value,i!=null?Es(t,!!r.multiple,i,!1):r.defaultValue!=null&&Es(t,!!r.multiple,r.defaultValue,!0);break;default:typeof s.onClick=="function"&&(t.onclick=jo)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(e.flags|=4)}e.ref!==null&&(e.flags|=512,e.flags|=2097152)}return Re(e),null;case 6:if(t&&e.stateNode!=null)Ch(t,e,t.memoizedProps,r);else{if(typeof r!="string"&&e.stateNode===null)throw Error(k(166));if(n=vr(ra.current),vr(Zt.current),mo(e)){if(r=e.stateNode,n=e.memoizedProps,r[Bt]=e,(i=r.nodeValue!==n)&&(t=nt,t!==null))switch(t.tag){case 3:po(r.nodeValue,n,(t.mode&1)!==0);break;case 5:t.memoizedProps.suppressHydrationWarning!==!0&&po(r.nodeValue,n,(t.mode&1)!==0)}i&&(e.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[Bt]=e,e.stateNode=r}return Re(e),null;case 13:if(ne(ie),r=e.memoizedState,t===null||t.memoizedState!==null&&t.memoizedState.dehydrated!==null){if(se&&tt!==null&&e.mode&1&&!(e.flags&128))Zm(),Ns(),e.flags|=98560,i=!1;else if(i=mo(e),r!==null&&r.dehydrated!==null){if(t===null){if(!i)throw Error(k(318));if(i=e.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(k(317));i[Bt]=e}else Ns(),!(e.flags&128)&&(e.memoizedState=null),e.flags|=4;Re(e),i=!1}else At!==null&&(Ec(At),At=null),i=!0;if(!i)return e.flags&65536?e:null}return e.flags&128?(e.lanes=n,e):(r=r!==null,r!==(t!==null&&t.memoizedState!==null)&&r&&(e.child.flags|=8192,e.mode&1&&(t===null||ie.current&1?ge===0&&(ge=3):ud())),e.updateQueue!==null&&(e.flags|=4),Re(e),null);case 4:return Ms(),gc(t,e),t===null&&Gi(e.stateNode.containerInfo),Re(e),null;case 10:return Hc(e.type._context),Re(e),null;case 17:return Ke(e.type)&&$o(),Re(e),null;case 19:if(ne(ie),i=e.memoizedState,i===null)return Re(e),null;if(r=(e.flags&128)!==0,a=i.rendering,a===null)if(r)Ii(i,!1);else{if(ge!==0||t!==null&&t.flags&128)for(t=e.child;t!==null;){if(a=Wo(t),a!==null){for(e.flags|=128,Ii(i,!1),r=a.updateQueue,r!==null&&(e.updateQueue=r,e.flags|=4),e.subtreeFlags=0,r=n,n=e.child;n!==null;)i=n,t=r,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=t,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,t=a.dependencies,i.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return G(ie,ie.current&1|2),e.child}t=t.sibling}i.tail!==null&&fe()>Ls&&(e.flags|=128,r=!0,Ii(i,!1),e.lanes=4194304)}else{if(!r)if(t=Wo(a),t!==null){if(e.flags|=128,r=!0,n=t.updateQueue,n!==null&&(e.updateQueue=n,e.flags|=4),Ii(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!se)return Re(e),null}else 2*fe()-i.renderingStartTime>Ls&&n!==1073741824&&(e.flags|=128,r=!0,Ii(i,!1),e.lanes=4194304);i.isBackwards?(a.sibling=e.child,e.child=a):(n=i.last,n!==null?n.sibling=a:e.child=a,i.last=a)}return i.tail!==null?(e=i.tail,i.rendering=e,i.tail=e.sibling,i.renderingStartTime=fe(),e.sibling=null,n=ie.current,G(ie,r?n&1|2:n&1),e):(Re(e),null);case 22:case 23:return ld(),r=e.memoizedState!==null,t!==null&&t.memoizedState!==null!==r&&(e.flags|=8192),r&&e.mode&1?et&1073741824&&(Re(e),e.subtreeFlags&6&&(e.flags|=8192)):Re(e),null;case 24:return null;case 25:return null}throw Error(k(156,e.tag))}function I0(t,e){switch(Bc(e),e.tag){case 1:return Ke(e.type)&&$o(),t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 3:return Ms(),ne(qe),ne(be),Jc(),t=e.flags,t&65536&&!(t&128)?(e.flags=t&-65537|128,e):null;case 5:return Xc(e),null;case 13:if(ne(ie),t=e.memoizedState,t!==null&&t.dehydrated!==null){if(e.alternate===null)throw Error(k(340));Ns()}return t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 19:return ne(ie),null;case 4:return Ms(),null;case 10:return Hc(e.type._context),null;case 22:case 23:return ld(),null;case 24:return null;default:return null}}var yo=!1,Ne=!1,O0=typeof WeakSet=="function"?WeakSet:Set,O=null;function ks(t,e){var n=t.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){ce(t,e,r)}else n.current=null}function yc(t,e,n){try{n()}catch(r){ce(t,e,r)}}var Lp=!1;function R0(t,e){if(ec=Mo,t=Rm(),zc(t)){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else e:{n=(n=t.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var s=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(_){n=null;break e}var a=0,o=-1,l=-1,u=0,c=0,f=t,h=null;t:for(;;){for(var g;f!==n||s!==0&&f.nodeType!==3||(o=a+s),f!==i||r!==0&&f.nodeType!==3||(l=a+r),f.nodeType===3&&(a+=f.nodeValue.length),(g=f.firstChild)!==null;)h=f,f=g;for(;;){if(f===t)break t;if(h===n&&++u===s&&(o=a),h===i&&++c===r&&(l=a),(g=f.nextSibling)!==null)break;f=h,h=f.parentNode}f=g}n=o===-1||l===-1?null:{start:o,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(tc={focusedElem:t,selectionRange:n},Mo=!1,O=e;O!==null;)if(e=O,t=e.child,(e.subtreeFlags&1028)!==0&&t!==null)t.return=e,O=t;else for(;O!==null;){e=O;try{var v=e.alternate;if(e.flags&1024)switch(e.tag){case 0:case 11:case 15:break;case 1:if(v!==null){var w=v.memoizedProps,E=v.memoizedState,p=e.stateNode,d=p.getSnapshotBeforeUpdate(e.elementType===e.type?w:Pt(e.type,w),E);p.__reactInternalSnapshotBeforeUpdate=d}break;case 3:var m=e.stateNode.containerInfo;m.nodeType===1?m.textContent="":m.nodeType===9&&m.documentElement&&m.removeChild(m.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(k(163))}}catch(_){ce(e,e.return,_)}if(t=e.sibling,t!==null){t.return=e.return,O=t;break}O=e.return}return v=Lp,Lp=!1,v}function Bi(t,e,n){var r=e.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var s=r=r.next;do{if((s.tag&t)===t){var i=s.destroy;s.destroy=void 0,i!==void 0&&yc(e,n,i)}s=s.next}while(s!==r)}}function ol(t,e){if(e=e.updateQueue,e=e!==null?e.lastEffect:null,e!==null){var n=e=e.next;do{if((n.tag&t)===t){var r=n.create;n.destroy=r()}n=n.next}while(n!==e)}}function vc(t){var e=t.ref;if(e!==null){var n=t.stateNode;switch(t.tag){case 5:t=n;break;default:t=n}typeof e=="function"?e(t):e.current=t}}function Ah(t){var e=t.alternate;e!==null&&(t.alternate=null,Ah(e)),t.child=null,t.deletions=null,t.sibling=null,t.tag===5&&(e=t.stateNode,e!==null&&(delete e[Bt],delete e[ta],delete e[sc],delete e[p0],delete e[m0])),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function Th(t){return t.tag===5||t.tag===3||t.tag===4}function jp(t){e:for(;;){for(;t.sibling===null;){if(t.return===null||Th(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==5&&t.tag!==6&&t.tag!==18;){if(t.flags&2||t.child===null||t.tag===4)continue e;t.child.return=t,t=t.child}if(!(t.flags&2))return t.stateNode}}function _c(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.nodeType===8?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(n.nodeType===8?(e=n.parentNode,e.insertBefore(t,n)):(e=n,e.appendChild(t)),n=n._reactRootContainer,n!=null||e.onclick!==null||(e.onclick=jo));else if(r!==4&&(t=t.child,t!==null))for(_c(t,e,n),t=t.sibling;t!==null;)_c(t,e,n),t=t.sibling}function wc(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(r!==4&&(t=t.child,t!==null))for(wc(t,e,n),t=t.sibling;t!==null;)wc(t,e,n),t=t.sibling}var Pe=null,Ct=!1;function On(t,e,n){for(n=n.child;n!==null;)Ih(t,e,n),n=n.sibling}function Ih(t,e,n){if(Vt&&typeof Vt.onCommitFiberUnmount=="function")try{Vt.onCommitFiberUnmount(Go,n)}catch(o){}switch(n.tag){case 5:Ne||ks(n,e);case 6:var r=Pe,s=Ct;Pe=null,On(t,e,n),Pe=r,Ct=s,Pe!==null&&(Ct?(t=Pe,n=n.stateNode,t.nodeType===8?t.parentNode.removeChild(n):t.removeChild(n)):Pe.removeChild(n.stateNode));break;case 18:Pe!==null&&(Ct?(t=Pe,n=n.stateNode,t.nodeType===8?Su(t.parentNode,n):t.nodeType===1&&Su(t,n),Xi(t)):Su(Pe,n.stateNode));break;case 4:r=Pe,s=Ct,Pe=n.stateNode.containerInfo,Ct=!0,On(t,e,n),Pe=r,Ct=s;break;case 0:case 11:case 14:case 15:if(!Ne&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){s=r=r.next;do{var i=s,a=i.destroy;i=i.tag,a!==void 0&&(i&2||i&4)&&yc(n,e,a),s=s.next}while(s!==r)}On(t,e,n);break;case 1:if(!Ne&&(ks(n,e),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(o){ce(n,e,o)}On(t,e,n);break;case 21:On(t,e,n);break;case 22:n.mode&1?(Ne=(r=Ne)||n.memoizedState!==null,On(t,e,n),Ne=r):On(t,e,n);break;default:On(t,e,n)}}function $p(t){var e=t.updateQueue;if(e!==null){t.updateQueue=null;var n=t.stateNode;n===null&&(n=t.stateNode=new O0),e.forEach(function(r){var s=z0.bind(null,t,r);n.has(r)||(n.add(r),r.then(s,s))})}}function Et(t,e){var n=e.deletions;if(n!==null)for(var r=0;r<n.length;r++){var s=n[r];try{var i=t,a=e,o=a;e:for(;o!==null;){switch(o.tag){case 5:Pe=o.stateNode,Ct=!1;break e;case 3:Pe=o.stateNode.containerInfo,Ct=!0;break e;case 4:Pe=o.stateNode.containerInfo,Ct=!0;break e}o=o.return}if(Pe===null)throw Error(k(160));Ih(i,a,s),Pe=null,Ct=!1;var l=s.alternate;l!==null&&(l.return=null),s.return=null}catch(u){ce(s,e,u)}}if(e.subtreeFlags&12854)for(e=e.child;e!==null;)Oh(e,t),e=e.sibling}function Oh(t,e){var n=t.alternate,r=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(Et(e,t),zt(t),r&4){try{Bi(3,t,t.return),ol(3,t)}catch(w){ce(t,t.return,w)}try{Bi(5,t,t.return)}catch(w){ce(t,t.return,w)}}break;case 1:Et(e,t),zt(t),r&512&&n!==null&&ks(n,n.return);break;case 5:if(Et(e,t),zt(t),r&512&&n!==null&&ks(n,n.return),t.flags&32){var s=t.stateNode;try{Hi(s,"")}catch(w){ce(t,t.return,w)}}if(r&4&&(s=t.stateNode,s!=null)){var i=t.memoizedProps,a=n!==null?n.memoizedProps:i,o=t.type,l=t.updateQueue;if(t.updateQueue=null,l!==null)try{o==="input"&&i.type==="radio"&&i.name!=null&&Yp(s,i),Zu(o,a);var u=Zu(o,i);for(a=0;a<l.length;a+=2){var c=l[a],f=l[a+1];c==="style"?rm(s,f):c==="dangerouslySetInnerHTML"?tm(s,f):c==="children"?Hi(s,f):Ac(s,c,f,u)}switch(o){case"input":Fu(s,i);break;case"textarea":Gp(s,i);break;case"select":var h=s._wrapperState.wasMultiple;s._wrapperState.wasMultiple=!!i.multiple;var g=i.value;g!=null?Es(s,!!i.multiple,g,!1):h!==!!i.multiple&&(i.defaultValue!=null?Es(s,!!i.multiple,i.defaultValue,!0):Es(s,!!i.multiple,i.multiple?[]:"",!1))}s[ta]=i}catch(w){ce(t,t.return,w)}}break;case 6:if(Et(e,t),zt(t),r&4){if(t.stateNode===null)throw Error(k(162));s=t.stateNode,i=t.memoizedProps;try{s.nodeValue=i}catch(w){ce(t,t.return,w)}}break;case 3:if(Et(e,t),zt(t),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Xi(e.containerInfo)}catch(w){ce(t,t.return,w)}break;case 4:Et(e,t),zt(t);break;case 13:Et(e,t),zt(t),s=t.child,s.flags&8192&&(i=s.memoizedState!==null,s.stateNode.isHidden=i,!i||s.alternate!==null&&s.alternate.memoizedState!==null||(ad=fe())),r&4&&$p(t);break;case 22:if(c=n!==null&&n.memoizedState!==null,t.mode&1?(Ne=(u=Ne)||c,Et(e,t),Ne=u):Et(e,t),zt(t),r&8192){if(u=t.memoizedState!==null,(t.stateNode.isHidden=u)&&!c&&t.mode&1)for(O=t,c=t.child;c!==null;){for(f=O=c;O!==null;){switch(h=O,g=h.child,h.tag){case 0:case 11:case 14:case 15:Bi(4,h,h.return);break;case 1:ks(h,h.return);var v=h.stateNode;if(typeof v.componentWillUnmount=="function"){r=h,n=h.return;try{e=r,v.props=e.memoizedProps,v.state=e.memoizedState,v.componentWillUnmount()}catch(w){ce(r,n,w)}}break;case 5:ks(h,h.return);break;case 22:if(h.memoizedState!==null){zp(f);continue}}g!==null?(g.return=h,O=g):zp(f)}c=c.sibling}e:for(c=null,f=t;;){if(f.tag===5){if(c===null){c=f;try{s=f.stateNode,u?(i=s.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(o=f.stateNode,l=f.memoizedProps.style,a=l!=null&&l.hasOwnProperty("display")?l.display:null,o.style.display=nm("display",a))}catch(w){ce(t,t.return,w)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(w){ce(t,t.return,w)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===t)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===t)break e;for(;f.sibling===null;){if(f.return===null||f.return===t)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:Et(e,t),zt(t),r&4&&$p(t);break;case 21:break;default:Et(e,t),zt(t)}}function zt(t){var e=t.flags;if(e&2){try{e:{for(var n=t.return;n!==null;){if(Th(n)){var r=n;break e}n=n.return}throw Error(k(160))}switch(r.tag){case 5:var s=r.stateNode;r.flags&32&&(Hi(s,""),r.flags&=-33);var i=jp(t);wc(t,i,s);break;case 3:case 4:var a=r.stateNode.containerInfo,o=jp(t);_c(t,o,a);break;default:throw Error(k(161))}}catch(l){ce(t,t.return,l)}t.flags&=-3}e&4096&&(t.flags&=-4097)}function N0(t,e,n){O=t,Rh(t,e,n)}function Rh(t,e,n){for(var r=(t.mode&1)!==0;O!==null;){var s=O,i=s.child;if(s.tag===22&&r){var a=s.memoizedState!==null||yo;if(!a){var o=s.alternate,l=o!==null&&o.memoizedState!==null||Ne;o=yo;var u=Ne;if(yo=a,(Ne=l)&&!u)for(O=s;O!==null;)a=O,l=a.child,a.tag===22&&a.memoizedState!==null?Up(s):l!==null?(l.return=a,O=l):Up(s);for(;i!==null;)O=i,Rh(i,e,n),i=i.sibling;O=s,yo=o,Ne=u}Fp(t,e,n)}else s.subtreeFlags&8772&&i!==null?(i.return=s,O=i):Fp(t,e,n)}}function Fp(t){for(;O!==null;){var e=O;if(e.flags&8772){var n=e.alternate;try{if(e.flags&8772)switch(e.tag){case 0:case 11:case 15:Ne||ol(5,e);break;case 1:var r=e.stateNode;if(e.flags&4&&!Ne)if(n===null)r.componentDidMount();else{var s=e.elementType===e.type?n.memoizedProps:Pt(e.type,n.memoizedProps);r.componentDidUpdate(s,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=e.updateQueue;i!==null&&Sp(e,i,r);break;case 3:var a=e.updateQueue;if(a!==null){if(n=null,e.child!==null)switch(e.child.tag){case 5:n=e.child.stateNode;break;case 1:n=e.child.stateNode}Sp(e,a,n)}break;case 5:var o=e.stateNode;if(n===null&&e.flags&4){n=o;var l=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(e.memoizedState===null){var u=e.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&Xi(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(k(163))}Ne||e.flags&512&&vc(e)}catch(h){ce(e,e.return,h)}}if(e===t){O=null;break}if(n=e.sibling,n!==null){n.return=e.return,O=n;break}O=e.return}}function zp(t){for(;O!==null;){var e=O;if(e===t){O=null;break}var n=e.sibling;if(n!==null){n.return=e.return,O=n;break}O=e.return}}function Up(t){for(;O!==null;){var e=O;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{ol(4,e)}catch(l){ce(e,n,l)}break;case 1:var r=e.stateNode;if(typeof r.componentDidMount=="function"){var s=e.return;try{r.componentDidMount()}catch(l){ce(e,s,l)}}var i=e.return;try{vc(e)}catch(l){ce(e,i,l)}break;case 5:var a=e.return;try{vc(e)}catch(l){ce(e,a,l)}}}catch(l){ce(e,e.return,l)}if(e===t){O=null;break}var o=e.sibling;if(o!==null){o.return=e.return,O=o;break}O=e.return}}var b0=Math.ceil,Ko=gn.ReactCurrentDispatcher,sd=gn.ReactCurrentOwner,ht=gn.ReactCurrentBatchConfig,Q=0,xe=null,me=null,Ce=0,et=0,Ss=Kn(0),ge=0,oa=null,Er=0,ll=0,id=0,Vi=null,We=null,ad=0,Ls=1/0,on=null,Qo=!1,xc=null,Bn=null,vo=!1,Ln=null,Xo=0,Zi=0,kc=null,Co=-1,Ao=0;function $e(){return Q&6?fe():Co!==-1?Co:Co=fe()}function Vn(t){return t.mode&1?Q&2&&Ce!==0?Ce&-Ce:g0.transition!==null?(Ao===0&&(Ao=hm()),Ao):(t=X,t!==0||(t=window.event,t=t===void 0?16:km(t.type)),t):1}function It(t,e,n,r){if(50<Zi)throw Zi=0,kc=null,Error(k(185));la(t,n,r),(!(Q&2)||t!==xe)&&(t===xe&&(!(Q&2)&&(ll|=n),ge===4&&Mn(t,Ce)),Qe(t,r),n===1&&Q===0&&!(e.mode&1)&&(Ls=fe()+500,sl&&Qn()))}function Qe(t,e){var n=t.callbackNode;v_(t,e);var r=bo(t,t===xe?Ce:0);if(r===0)n!==null&&Qf(n),t.callbackNode=null,t.callbackPriority=0;else if(e=r&-r,t.callbackPriority!==e){if(n!=null&&Qf(n),e===1)t.tag===0?h0(Bp.bind(null,t)):Um(Bp.bind(null,t)),d0(function(){!(Q&6)&&Qn()}),n=null;else{switch(gm(r)){case 1:n=Nc;break;case 4:n=pm;break;case 16:n=No;break;case 536870912:n=mm;break;default:n=No}n=Fh(n,Nh.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function Nh(t,e){if(Co=-1,Ao=0,Q&6)throw Error(k(327));var n=t.callbackNode;if(Is()&&t.callbackNode!==n)return null;var r=bo(t,t===xe?Ce:0);if(r===0)return null;if(r&30||r&t.expiredLanes||e)e=Jo(t,r);else{e=r;var s=Q;Q|=2;var i=Mh();(xe!==t||Ce!==e)&&(on=null,Ls=fe()+500,_r(t,e));do try{L0();break}catch(o){bh(t,o)}while(1);Wc(),Ko.current=i,Q=s,me!==null?e=0:(xe=null,Ce=0,e=ge)}if(e!==0){if(e===2&&(s=Qu(t),s!==0&&(r=s,e=Sc(t,s))),e===1)throw n=oa,_r(t,0),Mn(t,r),Qe(t,fe()),n;if(e===6)Mn(t,r);else{if(s=t.current.alternate,!(r&30)&&!M0(s)&&(e=Jo(t,r),e===2&&(i=Qu(t),i!==0&&(r=i,e=Sc(t,i))),e===1))throw n=oa,_r(t,0),Mn(t,r),Qe(t,fe()),n;switch(t.finishedWork=s,t.finishedLanes=r,e){case 0:case 1:throw Error(k(345));case 2:hr(t,We,on);break;case 3:if(Mn(t,r),(r&130023424)===r&&(e=ad+500-fe(),10<e)){if(bo(t,0)!==0)break;if(s=t.suspendedLanes,(s&r)!==r){$e(),t.pingedLanes|=t.suspendedLanes&s;break}t.timeoutHandle=rc(hr.bind(null,t,We,on),e);break}hr(t,We,on);break;case 4:if(Mn(t,r),(r&4194240)===r)break;for(e=t.eventTimes,s=-1;0<r;){var a=31-Tt(r);i=1<<a,a=e[a],a>s&&(s=a),r&=~i}if(r=s,r=fe()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*b0(r/1960))-r,10<r){t.timeoutHandle=rc(hr.bind(null,t,We,on),r);break}hr(t,We,on);break;case 5:hr(t,We,on);break;default:throw Error(k(329))}}}return Qe(t,fe()),t.callbackNode===n?Nh.bind(null,t):null}function Sc(t,e){var n=Vi;return t.current.memoizedState.isDehydrated&&(_r(t,e).flags|=256),t=Jo(t,e),t!==2&&(e=We,We=n,e!==null&&Ec(e)),t}function Ec(t){We===null?We=t:We.push.apply(We,t)}function M0(t){for(var e=t;;){if(e.flags&16384){var n=e.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var s=n[r],i=s.getSnapshot;s=s.value;try{if(!Ot(i(),s))return!1}catch(a){return!1}}}if(n=e.child,e.subtreeFlags&16384&&n!==null)n.return=e,e=n;else{if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}function Mn(t,e){for(e&=~id,e&=~ll,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-Tt(e),r=1<<n;t[n]=-1,e&=~r}}function Bp(t){if(Q&6)throw Error(k(327));Is();var e=bo(t,0);if(!(e&1))return Qe(t,fe()),null;var n=Jo(t,e);if(t.tag!==0&&n===2){var r=Qu(t);r!==0&&(e=r,n=Sc(t,r))}if(n===1)throw n=oa,_r(t,0),Mn(t,e),Qe(t,fe()),n;if(n===6)throw Error(k(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,hr(t,We,on),Qe(t,fe()),null}function od(t,e){var n=Q;Q|=1;try{return t(e)}finally{Q=n,Q===0&&(Ls=fe()+500,sl&&Qn())}}function Pr(t){Ln!==null&&Ln.tag===0&&!(Q&6)&&Is();var e=Q;Q|=1;var n=ht.transition,r=X;try{if(ht.transition=null,X=1,t)return t()}finally{X=r,ht.transition=n,Q=e,!(Q&6)&&Qn()}}function ld(){et=Ss.current,ne(Ss)}function _r(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==-1&&(t.timeoutHandle=-1,c0(n)),me!==null)for(n=me.return;n!==null;){var r=n;switch(Bc(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&$o();break;case 3:Ms(),ne(qe),ne(be),Jc();break;case 5:Xc(r);break;case 4:Ms();break;case 13:ne(ie);break;case 19:ne(ie);break;case 10:Hc(r.type._context);break;case 22:case 23:ld()}n=n.return}if(xe=t,me=t=Zn(t.current,null),Ce=et=e,ge=0,oa=null,id=ll=Er=0,We=Vi=null,yr!==null){for(e=0;e<yr.length;e++)if(n=yr[e],r=n.interleaved,r!==null){n.interleaved=null;var s=r.next,i=n.pending;if(i!==null){var a=i.next;i.next=s,r.next=a}n.pending=r}yr=null}return t}function bh(t,e){do{var n=me;try{if(Wc(),So.current=qo,Ho){for(var r=ae.memoizedState;r!==null;){var s=r.queue;s!==null&&(s.pending=null),r=r.next}Ho=!1}if(Sr=0,we=he=ae=null,Ui=!1,sa=0,sd.current=null,n===null||n.return===null){ge=1,oa=e,me=null;break}e:{var i=t,a=n.return,o=n,l=e;if(e=Ce,o.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var u=l,c=o,f=c.tag;if(!(c.mode&1)&&(f===0||f===11||f===15)){var h=c.alternate;h?(c.updateQueue=h.updateQueue,c.memoizedState=h.memoizedState,c.lanes=h.lanes):(c.updateQueue=null,c.memoizedState=null)}var g=Ip(a);if(g!==null){g.flags&=-257,Op(g,a,o,i,e),g.mode&1&&Tp(i,u,e),e=g,l=u;var v=e.updateQueue;if(v===null){var w=new Set;w.add(l),e.updateQueue=w}else v.add(l);break e}else{if(!(e&1)){Tp(i,u,e),ud();break e}l=Error(k(426))}}else if(se&&o.mode&1){var E=Ip(a);if(E!==null){!(E.flags&65536)&&(E.flags|=256),Op(E,a,o,i,e),Vc(Ds(l,o));break e}}i=l=Ds(l,o),ge!==4&&(ge=2),Vi===null?Vi=[i]:Vi.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,e&=-e,i.lanes|=e;var p=gh(i,l,e);kp(i,p);break e;case 1:o=l;var d=i.type,m=i.stateNode;if(!(i.flags&128)&&(typeof d.getDerivedStateFromError=="function"||m!==null&&typeof m.componentDidCatch=="function"&&(Bn===null||!Bn.has(m)))){i.flags|=65536,e&=-e,i.lanes|=e;var _=yh(i,o,e);kp(i,_);break e}}i=i.return}while(i!==null)}Lh(n)}catch(x){e=x,me===n&&n!==null&&(me=n=n.return);continue}break}while(1)}function Mh(){var t=Ko.current;return Ko.current=qo,t===null?qo:t}function ud(){(ge===0||ge===3||ge===2)&&(ge=4),xe===null||!(Er&268435455)&&!(ll&268435455)||Mn(xe,Ce)}function Jo(t,e){var n=Q;Q|=2;var r=Mh();(xe!==t||Ce!==e)&&(on=null,_r(t,e));do try{D0();break}catch(s){bh(t,s)}while(1);if(Wc(),Q=n,Ko.current=r,me!==null)throw Error(k(261));return xe=null,Ce=0,ge}function D0(){for(;me!==null;)Dh(me)}function L0(){for(;me!==null&&!u_();)Dh(me)}function Dh(t){var e=$h(t.alternate,t,et);t.memoizedProps=t.pendingProps,e===null?Lh(t):me=e,sd.current=null}function Lh(t){var e=t;do{var n=e.alternate;if(t=e.return,e.flags&32768){if(n=I0(n,e),n!==null){n.flags&=32767,me=n;return}if(t!==null)t.flags|=32768,t.subtreeFlags=0,t.deletions=null;else{ge=6,me=null;return}}else if(n=T0(n,e,et),n!==null){me=n;return}if(e=e.sibling,e!==null){me=e;return}me=e=t}while(e!==null);ge===0&&(ge=5)}function hr(t,e,n){var r=X,s=ht.transition;try{ht.transition=null,X=1,j0(t,e,n,r)}finally{ht.transition=s,X=r}return null}function j0(t,e,n,r){do Is();while(Ln!==null);if(Q&6)throw Error(k(327));n=t.finishedWork;var s=t.finishedLanes;if(n===null)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(k(177));t.callbackNode=null,t.callbackPriority=0;var i=n.lanes|n.childLanes;if(__(t,i),t===xe&&(me=xe=null,Ce=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||vo||(vo=!0,Fh(No,function(){return Is(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=ht.transition,ht.transition=null;var a=X;X=1;var o=Q;Q|=4,sd.current=null,R0(t,n),Oh(n,t),i0(tc),Mo=!!ec,tc=ec=null,t.current=n,N0(n,t,s),c_(),Q=o,X=a,ht.transition=i}else t.current=n;if(vo&&(vo=!1,Ln=t,Xo=s),i=t.pendingLanes,i===0&&(Bn=null),p_(n.stateNode,r),Qe(t,fe()),e!==null)for(r=t.onRecoverableError,n=0;n<e.length;n++)s=e[n],r(s.value,{componentStack:s.stack,digest:s.digest});if(Qo)throw Qo=!1,t=xc,xc=null,t;return Xo&1&&t.tag!==0&&Is(),i=t.pendingLanes,i&1?t===kc?Zi++:(Zi=0,kc=t):Zi=0,Qn(),null}function Is(){if(Ln!==null){var t=gm(Xo),e=ht.transition,n=X;try{if(ht.transition=null,X=16>t?16:t,Ln===null)var r=!1;else{if(t=Ln,Ln=null,Xo=0,Q&6)throw Error(k(331));var s=Q;for(Q|=4,O=t.current;O!==null;){var i=O,a=i.child;if(O.flags&16){var o=i.deletions;if(o!==null){for(var l=0;l<o.length;l++){var u=o[l];for(O=u;O!==null;){var c=O;switch(c.tag){case 0:case 11:case 15:Bi(8,c,i)}var f=c.child;if(f!==null)f.return=c,O=f;else for(;O!==null;){c=O;var h=c.sibling,g=c.return;if(Ah(c),c===u){O=null;break}if(h!==null){h.return=g,O=h;break}O=g}}}var v=i.alternate;if(v!==null){var w=v.child;if(w!==null){v.child=null;do{var E=w.sibling;w.sibling=null,w=E}while(w!==null)}}O=i}}if(i.subtreeFlags&2064&&a!==null)a.return=i,O=a;else e:for(;O!==null;){if(i=O,i.flags&2048)switch(i.tag){case 0:case 11:case 15:Bi(9,i,i.return)}var p=i.sibling;if(p!==null){p.return=i.return,O=p;break e}O=i.return}}var d=t.current;for(O=d;O!==null;){a=O;var m=a.child;if(a.subtreeFlags&2064&&m!==null)m.return=a,O=m;else e:for(a=d;O!==null;){if(o=O,o.flags&2048)try{switch(o.tag){case 0:case 11:case 15:ol(9,o)}}catch(x){ce(o,o.return,x)}if(o===a){O=null;break e}var _=o.sibling;if(_!==null){_.return=o.return,O=_;break e}O=o.return}}if(Q=s,Qn(),Vt&&typeof Vt.onPostCommitFiberRoot=="function")try{Vt.onPostCommitFiberRoot(Go,t)}catch(x){}r=!0}return r}finally{X=n,ht.transition=e}}return!1}function Vp(t,e,n){e=Ds(n,e),e=gh(t,e,1),t=Un(t,e,1),e=$e(),t!==null&&(la(t,1,e),Qe(t,e))}function ce(t,e,n){if(t.tag===3)Vp(t,t,n);else for(;e!==null;){if(e.tag===3){Vp(e,t,n);break}else if(e.tag===1){var r=e.stateNode;if(typeof e.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Bn===null||!Bn.has(r))){t=Ds(n,t),t=yh(e,t,1),e=Un(e,t,1),t=$e(),e!==null&&(la(e,1,t),Qe(e,t));break}}e=e.return}}function $0(t,e,n){var r=t.pingCache;r!==null&&r.delete(e),e=$e(),t.pingedLanes|=t.suspendedLanes&n,xe===t&&(Ce&n)===n&&(ge===4||ge===3&&(Ce&130023424)===Ce&&500>fe()-ad?_r(t,0):id|=n),Qe(t,e)}function jh(t,e){e===0&&(t.mode&1?(e=ro,ro<<=1,!(ro&130023424)&&(ro=4194304)):e=1);var n=$e();t=mn(t,e),t!==null&&(la(t,e,n),Qe(t,n))}function F0(t){var e=t.memoizedState,n=0;e!==null&&(n=e.retryLane),jh(t,n)}function z0(t,e){var n=0;switch(t.tag){case 13:var r=t.stateNode,s=t.memoizedState;s!==null&&(n=s.retryLane);break;case 19:r=t.stateNode;break;default:throw Error(k(314))}r!==null&&r.delete(e),jh(t,n)}var $h;$h=function(t,e,n){if(t!==null)if(t.memoizedProps!==e.pendingProps||qe.current)He=!0;else{if(!(t.lanes&n)&&!(e.flags&128))return He=!1,A0(t,e,n);He=!!(t.flags&131072)}else He=!1,se&&e.flags&1048576&&Bm(e,Uo,e.index);switch(e.lanes=0,e.tag){case 2:var r=e.type;Po(t,e),t=e.pendingProps;var s=Rs(e,be.current);Ts(e,n),s=Gc(null,e,r,t,s,n);var i=ed();return e.flags|=1,typeof s=="object"&&s!==null&&typeof s.render=="function"&&s.$$typeof===void 0?(e.tag=1,e.memoizedState=null,e.updateQueue=null,Ke(r)?(i=!0,Fo(e)):i=!1,e.memoizedState=s.state!==null&&s.state!==void 0?s.state:null,Kc(e),s.updater=al,e.stateNode=s,s._reactInternals=e,cc(e,r,t,n),e=pc(null,e,r,!0,i,n)):(e.tag=0,se&&i&&Uc(e),je(null,e,s,n),e=e.child),e;case 16:r=e.elementType;e:{switch(Po(t,e),t=e.pendingProps,s=r._init,r=s(r._payload),e.type=r,s=e.tag=B0(r),t=Pt(r,t),s){case 0:e=fc(null,e,r,t,n);break e;case 1:e=bp(null,e,r,t,n);break e;case 11:e=Rp(null,e,r,t,n);break e;case 14:e=Np(null,e,r,Pt(r.type,t),n);break e}throw Error(k(306,r,""))}return e;case 0:return r=e.type,s=e.pendingProps,s=e.elementType===r?s:Pt(r,s),fc(t,e,r,s,n);case 1:return r=e.type,s=e.pendingProps,s=e.elementType===r?s:Pt(r,s),bp(t,e,r,s,n);case 3:e:{if(xh(e),t===null)throw Error(k(387));r=e.pendingProps,i=e.memoizedState,s=i.element,Km(t,e),Zo(e,r,null,n);var a=e.memoizedState;if(r=a.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},e.updateQueue.baseState=i,e.memoizedState=i,e.flags&256){s=Ds(Error(k(423)),e),e=Mp(t,e,r,n,s);break e}else if(r!==s){s=Ds(Error(k(424)),e),e=Mp(t,e,r,n,s);break e}else for(tt=zn(e.stateNode.containerInfo.firstChild),nt=e,se=!0,At=null,n=Hm(e,null,r,n),e.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Ns(),r===s){e=hn(t,e,n);break e}je(t,e,r,n)}e=e.child}return e;case 5:return Qm(e),t===null&&oc(e),r=e.type,s=e.pendingProps,i=t!==null?t.memoizedProps:null,a=s.children,nc(r,s)?a=null:i!==null&&nc(r,i)&&(e.flags|=32),wh(t,e),je(t,e,a,n),e.child;case 6:return t===null&&oc(e),null;case 13:return kh(t,e,n);case 4:return Qc(e,e.stateNode.containerInfo),r=e.pendingProps,t===null?e.child=bs(e,null,r,n):je(t,e,r,n),e.child;case 11:return r=e.type,s=e.pendingProps,s=e.elementType===r?s:Pt(r,s),Rp(t,e,r,s,n);case 7:return je(t,e,e.pendingProps,n),e.child;case 8:return je(t,e,e.pendingProps.children,n),e.child;case 12:return je(t,e,e.pendingProps.children,n),e.child;case 10:e:{if(r=e.type._context,s=e.pendingProps,i=e.memoizedProps,a=s.value,G(Bo,r._currentValue),r._currentValue=a,i!==null)if(Ot(i.value,a)){if(i.children===s.children&&!qe.current){e=hn(t,e,n);break e}}else for(i=e.child,i!==null&&(i.return=e);i!==null;){var o=i.dependencies;if(o!==null){a=i.child;for(var l=o.firstContext;l!==null;){if(l.context===r){if(i.tag===1){l=dn(-1,n&-n),l.tag=2;var u=i.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?l.next=l:(l.next=c.next,c.next=l),u.pending=l}}i.lanes|=n,l=i.alternate,l!==null&&(l.lanes|=n),lc(i.return,n,e),o.lanes|=n;break}l=l.next}}else if(i.tag===10)a=i.type===e.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(k(341));a.lanes|=n,o=a.alternate,o!==null&&(o.lanes|=n),lc(a,n,e),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===e){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}je(t,e,s.children,n),e=e.child}return e;case 9:return s=e.type,r=e.pendingProps.children,Ts(e,n),s=gt(s),r=r(s),e.flags|=1,je(t,e,r,n),e.child;case 14:return r=e.type,s=Pt(r,e.pendingProps),s=Pt(r.type,s),Np(t,e,r,s,n);case 15:return vh(t,e,e.type,e.pendingProps,n);case 17:return r=e.type,s=e.pendingProps,s=e.elementType===r?s:Pt(r,s),Po(t,e),e.tag=1,Ke(r)?(t=!0,Fo(e)):t=!1,Ts(e,n),hh(e,r,s),cc(e,r,s,n),pc(null,e,r,!0,t,n);case 19:return Sh(t,e,n);case 22:return _h(t,e,n)}throw Error(k(156,e.tag))};function Fh(t,e){return fm(t,e)}function U0(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function mt(t,e,n,r){return new U0(t,e,n,r)}function cd(t){return t=t.prototype,!(!t||!t.isReactComponent)}function B0(t){if(typeof t=="function")return cd(t)?1:0;if(t!=null){if(t=t.$$typeof,t===Ic)return 11;if(t===Oc)return 14}return 2}function Zn(t,e){var n=t.alternate;return n===null?(n=mt(t.tag,e,t.key,t.mode),n.elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=t.flags&14680064,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function To(t,e,n,r,s,i){var a=2;if(r=t,typeof t=="function")cd(t)&&(a=1);else if(typeof t=="string")a=5;else e:switch(t){case ps:return wr(n.children,s,i,e);case Tc:a=8,s|=8;break;case Mu:return t=mt(12,n,e,s|2),t.elementType=Mu,t.lanes=i,t;case Du:return t=mt(13,n,e,s),t.elementType=Du,t.lanes=i,t;case Lu:return t=mt(19,n,e,s),t.elementType=Lu,t.lanes=i,t;case Qp:return ul(n,s,i,e);default:if(typeof t=="object"&&t!==null)switch(t.$$typeof){case qp:a=10;break e;case Kp:a=9;break e;case Ic:a=11;break e;case Oc:a=14;break e;case Rn:a=16,r=null;break e}throw Error(k(130,t==null?t:typeof t,""))}return e=mt(a,n,e,s),e.elementType=t,e.type=r,e.lanes=i,e}function wr(t,e,n,r){return t=mt(7,t,r,e),t.lanes=n,t}function ul(t,e,n,r){return t=mt(22,t,r,e),t.elementType=Qp,t.lanes=n,t.stateNode={isHidden:!1},t}function Ru(t,e,n){return t=mt(6,t,null,e),t.lanes=n,t}function Nu(t,e,n){return e=mt(4,t.children!==null?t.children:[],t.key,e),e.lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function V0(t,e,n,r,s){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=hu(0),this.expirationTimes=hu(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=hu(0),this.identifierPrefix=r,this.onRecoverableError=s,this.mutableSourceEagerHydrationData=null}function dd(t,e,n,r,s,i,a,o,l){return t=new V0(t,e,n,o,l),e===1?(e=1,i===!0&&(e|=8)):e=0,i=mt(3,null,null,e),t.current=i,i.stateNode=t,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Kc(i),t}function Z0(t,e,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:fs,key:r==null?null:""+r,children:t,containerInfo:e,implementation:n}}function zh(t){if(!t)return Hn;t=t._reactInternals;e:{if(Ar(t)!==t||t.tag!==1)throw Error(k(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break e;case 1:if(Ke(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break e}}e=e.return}while(e!==null);throw Error(k(171))}if(t.tag===1){var n=t.type;if(Ke(n))return zm(t,n,e)}return e}function Uh(t,e,n,r,s,i,a,o,l){return t=dd(n,r,!0,t,s,i,a,o,l),t.context=zh(null),n=t.current,r=$e(),s=Vn(n),i=dn(r,s),i.callback=e!=null?e:null,Un(n,i,s),t.current.lanes=s,la(t,s,r),Qe(t,r),t}function cl(t,e,n,r){var s=e.current,i=$e(),a=Vn(s);return n=zh(n),e.context===null?e.context=n:e.pendingContext=n,e=dn(i,a),e.payload={element:t},r=r===void 0?null:r,r!==null&&(e.callback=r),t=Un(s,e,a),t!==null&&(It(t,s,a,i),ko(t,s,a)),a}function Yo(t){if(t=t.current,!t.child)return null;switch(t.child.tag){case 5:return t.child.stateNode;default:return t.child.stateNode}}function Zp(t,e){if(t=t.memoizedState,t!==null&&t.dehydrated!==null){var n=t.retryLane;t.retryLane=n!==0&&n<e?n:e}}function fd(t,e){Zp(t,e),(t=t.alternate)&&Zp(t,e)}function W0(){return null}var Bh=typeof reportError=="function"?reportError:function(t){console.error(t)};function pd(t){this._internalRoot=t}dl.prototype.render=pd.prototype.render=function(t){var e=this._internalRoot;if(e===null)throw Error(k(409));cl(t,e,null,null)};dl.prototype.unmount=pd.prototype.unmount=function(){var t=this._internalRoot;if(t!==null){this._internalRoot=null;var e=t.containerInfo;Pr(function(){cl(null,t,null,null)}),e[pn]=null}};function dl(t){this._internalRoot=t}dl.prototype.unstable_scheduleHydration=function(t){if(t){var e=_m();t={blockedOn:null,target:t,priority:e};for(var n=0;n<bn.length&&e!==0&&e<bn[n].priority;n++);bn.splice(n,0,t),n===0&&xm(t)}};function md(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)}function fl(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11&&(t.nodeType!==8||t.nodeValue!==" react-mount-point-unstable "))}function Wp(){}function H0(t,e,n,r,s){if(s){if(typeof r=="function"){var i=r;r=function(){var u=Yo(a);i.call(u)}}var a=Uh(e,r,t,0,null,!1,!1,"",Wp);return t._reactRootContainer=a,t[pn]=a.current,Gi(t.nodeType===8?t.parentNode:t),Pr(),a}for(;s=t.lastChild;)t.removeChild(s);if(typeof r=="function"){var o=r;r=function(){var u=Yo(l);o.call(u)}}var l=dd(t,0,!1,null,null,!1,!1,"",Wp);return t._reactRootContainer=l,t[pn]=l.current,Gi(t.nodeType===8?t.parentNode:t),Pr(function(){cl(e,l,n,r)}),l}function pl(t,e,n,r,s){var i=n._reactRootContainer;if(i){var a=i;if(typeof s=="function"){var o=s;s=function(){var l=Yo(a);o.call(l)}}cl(e,a,t,s)}else a=H0(n,e,t,s,r);return Yo(a)}ym=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=Mi(e.pendingLanes);n!==0&&(bc(e,n|1),Qe(e,fe()),!(Q&6)&&(Ls=fe()+500,Qn()))}break;case 13:Pr(function(){var r=mn(t,1);if(r!==null){var s=$e();It(r,t,1,s)}}),fd(t,1)}};Mc=function(t){if(t.tag===13){var e=mn(t,134217728);if(e!==null){var n=$e();It(e,t,134217728,n)}fd(t,134217728)}};vm=function(t){if(t.tag===13){var e=Vn(t),n=mn(t,e);if(n!==null){var r=$e();It(n,t,e,r)}fd(t,e)}};_m=function(){return X};wm=function(t,e){var n=X;try{return X=t,e()}finally{X=n}};Hu=function(t,e,n){switch(e){case"input":if(Fu(t,n),e=n.name,n.type==="radio"&&e!=null){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var s=rl(r);if(!s)throw Error(k(90));Jp(r),Fu(r,s)}}}break;case"textarea":Gp(t,n);break;case"select":e=n.value,e!=null&&Es(t,!!n.multiple,e,!1)}};am=od;om=Pr;var q0={usingClientEntryPoint:!1,Events:[ca,ys,rl,sm,im,od]},Oi={findFiberByHostInstance:gr,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},K0={bundleType:Oi.bundleType,version:Oi.version,rendererPackageName:Oi.rendererPackageName,rendererConfig:Oi.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:gn.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return t=cm(t),t===null?null:t.stateNode},findFiberByHostInstance:Oi.findFiberByHostInstance||W0,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!="undefined"&&(Ri=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Ri.isDisabled&&Ri.supportsFiber))try{Go=Ri.inject(K0),Vt=Ri}catch(t){}var Ri;it.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=q0;it.createPortal=function(t,e){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!md(e))throw Error(k(200));return Z0(t,e,null,n)};it.createRoot=function(t,e){if(!md(t))throw Error(k(299));var n=!1,r="",s=Bh;return e!=null&&(e.unstable_strictMode===!0&&(n=!0),e.identifierPrefix!==void 0&&(r=e.identifierPrefix),e.onRecoverableError!==void 0&&(s=e.onRecoverableError)),e=dd(t,1,!1,null,null,n,!1,r,s),t[pn]=e.current,Gi(t.nodeType===8?t.parentNode:t),new pd(e)};it.findDOMNode=function(t){if(t==null)return null;if(t.nodeType===1)return t;var e=t._reactInternals;if(e===void 0)throw typeof t.render=="function"?Error(k(188)):(t=Object.keys(t).join(","),Error(k(268,t)));return t=cm(e),t=t===null?null:t.stateNode,t};it.flushSync=function(t){return Pr(t)};it.hydrate=function(t,e,n){if(!fl(e))throw Error(k(200));return pl(null,t,e,!0,n)};it.hydrateRoot=function(t,e,n){if(!md(t))throw Error(k(405));var r=n!=null&&n.hydratedSources||null,s=!1,i="",a=Bh;if(n!=null&&(n.unstable_strictMode===!0&&(s=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),e=Uh(e,null,t,1,n!=null?n:null,s,!1,i,a),t[pn]=e.current,Gi(t),r)for(t=0;t<r.length;t++)n=r[t],s=n._getVersion,s=s(n._source),e.mutableSourceEagerHydrationData==null?e.mutableSourceEagerHydrationData=[n,s]:e.mutableSourceEagerHydrationData.push(n,s);return new dl(e)};it.render=function(t,e,n){if(!fl(e))throw Error(k(200));return pl(null,t,e,!1,n)};it.unmountComponentAtNode=function(t){if(!fl(t))throw Error(k(40));return t._reactRootContainer?(Pr(function(){pl(null,null,t,!1,function(){t._reactRootContainer=null,t[pn]=null})}),!0):!1};it.unstable_batchedUpdates=od;it.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!fl(n))throw Error(k(200));if(t==null||t._reactInternals===void 0)throw Error(k(38));return pl(t,e,n,!1,r)};it.version="18.3.1-next-f1338f8080-20240426"});var Hh=fr((Ak,Wh)=>{"use strict";function Zh(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__=="undefined"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Zh)}catch(t){console.error(t)}}Zh(),Wh.exports=Vh()});var ml=fr(hd=>{"use strict";var qh=Hh();hd.createRoot=qh.createRoot,hd.hydrateRoot=qh.hydrateRoot;var Tk});var _k={};Ov(_k,{default:()=>Xl});module.exports=Rv(_k);var Va=require("obsidian");var ng=require("obsidian");var ls="mh-ai-writers-tools";var yd=Ze(Ge()),rg=Ze(ml());var eg=require("obsidian"),pe=Ze(Ge());var Xe=Ze(Ge());var Kh=require("obsidian"),Fs=Ze(Ge());var zs=({iconName:t,tooltip:e})=>{let n=(0,Fs.useRef)(null);return(0,Fs.useEffect)(()=>{n.current&&(0,Kh.setIcon)(n.current,t)},[t]),Fs.default.createElement("div",{ref:n,className:"clickable-icon","aria-label":e||"","data-tooltip-position":"top","data-tooltip-delay":"300"})};var Qh=({left:t,right:e})=>{let[n,r]=(0,Xe.useState)([]),[s,i]=(0,Xe.useState)(""),a=(0,Xe.useRef)(null),o=(0,Xe.useRef)(null);return Xe.default.createElement("div",{className:"ai-writer__button-bar"},Xe.default.createElement("div",{className:"left-item"},t.map((l,u)=>Xe.default.createElement("div",{key:u,className:"button",onClick:l.onClick},Xe.default.createElement(zs,{iconName:l.icon,tooltip:l.label})))),Xe.default.createElement("div",{className:"right-item"},e.map((l,u)=>Xe.default.createElement("div",{key:u,className:"button",onClick:l.onClick},Xe.default.createElement(zs,{iconName:l.icon,tooltip:l.label})))))};var Wt=Ze(Ge());var Xh=({message:t})=>{let e=(0,Wt.useRef)(null),n=t.role==="user"?"left":"right";return Wt.default.createElement("div",{className:`chat-message ${n}`},Wt.default.createElement("div",{className:"markdown"},t.message),Wt.default.createElement("div",{className:`infoBar ${t.role}`},Wt.default.createElement("div",{className:"info"},t.model),Wt.default.createElement("div",{className:"actions"},Wt.default.createElement(zs,{iconName:"copy",tooltip:"Copy to Clipboard"}),Wt.default.createElement(zs,{iconName:"between-horizontal-end",tooltip:"Insert into Document"}))))};var gd=Ze(Ge());var Jh=Ze(Ge()),yn=(0,Jh.createContext)(void 0);var Yh=()=>{var t;return(t=(0,gd.useContext)(yn))==null?void 0:t.app},Gh=()=>{var t;return(t=(0,gd.useContext)(yn))==null?void 0:t.plugin};var tg=({openSettings:t})=>{let[e,n]=(0,pe.useState)([]),[r,s]=(0,pe.useState)(""),i=(0,pe.useRef)(null),a=(0,pe.useRef)(null),o=(0,pe.useRef)(null),l=Yh(),u=Gh();if(!u||!u.agent||!u.llm)throw new Error("Agent or LLM not found");let c=u.agent;console.dir({agent:c});let f=[],h=[{label:"Settings",icon:"settings",onClick:t},{label:"Clear conversation",icon:"trash-2",onClick:t}],g=async()=>{let w=r.trim();if(console.log(`Sending message: ${w}`),w!==""){let E={message:w,role:"user"},p=[...e];p.push(E),n(p),i.current&&(i.current.readOnly=!0),c.model=u.settings.model,await c.ask(w).then(d=>{let m={message:d,role:"assistant",model:c.model||void 0};p.push(m),console.dir(p),n(p)}).catch(d=>{console.error(d)}),s(""),i.current&&(i.current.readOnly=!1),i.current&&i.current.focus()}},v=w=>{w.key==="Enter"&&w.shiftKey&&(w.preventDefault(),g())};return(0,pe.useEffect)(()=>{a.current&&(a.current.scrollTop=a.current.scrollHeight)},[e.length]),(0,pe.useEffect)(()=>{o.current&&(0,eg.setIcon)(o.current,"send")},[]),pe.default.createElement("div",{className:"ai-writer"},pe.default.createElement("div",{className:"ai-writer-header"},pe.default.createElement("h2",null,"AI Chat")),pe.default.createElement("div",{className:"ai-writer-chat-display",ref:a},e.map((w,E)=>pe.default.createElement(Xh,{key:E,message:w}))),pe.default.createElement("div",{className:"ai-writer-chat-input"},pe.default.createElement(Qh,{left:f,right:h}),pe.default.createElement("div",{className:"input-submit"},pe.default.createElement("textarea",{placeholder:"Type a message...",value:r,onChange:w=>s(w.target.value),onKeyDown:v,ref:i,rows:3}),pe.default.createElement("button",{ref:o,onClick:g,className:"sendButton"}))))};var fa=class extends ng.ItemView{constructor(n,r){super(n);this.openSettings=()=>{var n;console.log("Opening Settings"),console.dir(this),(n=this.app)==null||n.setting.open("obsidian-nem-ai-writing-tools")};this.plugin=r}getViewType(){return ls}getDisplayText(){return"Example View"}async onOpen(){let n=this.containerEl.children[1];n.style.setProperty("padding","0"),n.empty(),this.root=(0,rg.createRoot)(n,{identifierPrefix:"aiw"});let r={app:this.app,plugin:this.plugin};this.root.render(yd.default.createElement(yn.Provider,{value:r},yd.default.createElement(tg,{openSettings:this.openSettings})))}async onClose(){this.root.unmount()}};var or=require("obsidian");var hl="RFC3986",gl={RFC1738:t=>String(t).replace(/%20/g,"+"),RFC3986:t=>String(t)},sg="RFC1738";var Q0=Array.isArray,Ht=(()=>{let t=[];for(let e=0;e<256;++e)t.push("%"+((e<16?"0":"")+e.toString(16)).toUpperCase());return t})();var vd=1024,ig=(t,e,n,r,s)=>{if(t.length===0)return t;let i=t;if(typeof t=="symbol"?i=Symbol.prototype.toString.call(t):typeof t!="string"&&(i=String(t)),n==="iso-8859-1")return escape(i).replace(/%u[0-9a-f]{4}/gi,function(o){return"%26%23"+parseInt(o.slice(2),16)+"%3B"});let a="";for(let o=0;o<i.length;o+=vd){let l=i.length>=vd?i.slice(o,o+vd):i,u=[];for(let c=0;c<l.length;++c){let f=l.charCodeAt(c);if(f===45||f===46||f===95||f===126||f>=48&&f<=57||f>=65&&f<=90||f>=97&&f<=122||s===sg&&(f===40||f===41)){u[u.length]=l.charAt(c);continue}if(f<128){u[u.length]=Ht[f];continue}if(f<2048){u[u.length]=Ht[192|f>>6]+Ht[128|f&63];continue}if(f<55296||f>=57344){u[u.length]=Ht[224|f>>12]+Ht[128|f>>6&63]+Ht[128|f&63];continue}c+=1,f=65536+((f&1023)<<10|l.charCodeAt(c)&1023),u[u.length]=Ht[240|f>>18]+Ht[128|f>>12&63]+Ht[128|f>>6&63]+Ht[128|f&63]}a+=u.join("")}return a};function ag(t){return!t||typeof t!="object"?!1:!!(t.constructor&&t.constructor.isBuffer&&t.constructor.isBuffer(t))}function _d(t,e){if(Q0(t)){let n=[];for(let r=0;r<t.length;r+=1)n.push(e(t[r]));return n}return e(t)}var X0=Object.prototype.hasOwnProperty,og={brackets(t){return String(t)+"[]"},comma:"comma",indices(t,e){return String(t)+"["+e+"]"},repeat(t){return String(t)}},qt=Array.isArray,J0=Array.prototype.push,lg=function(t,e){J0.apply(t,qt(e)?e:[e])},Y0=Date.prototype.toISOString,ye={addQueryPrefix:!1,allowDots:!1,allowEmptyArrays:!1,arrayFormat:"indices",charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encodeDotInKeys:!1,encoder:ig,encodeValuesOnly:!1,format:hl,formatter:gl[hl],indices:!1,serializeDate(t){return Y0.call(t)},skipNulls:!1,strictNullHandling:!1};function G0(t){return typeof t=="string"||typeof t=="number"||typeof t=="boolean"||typeof t=="symbol"||typeof t=="bigint"}var wd={};function ug(t,e,n,r,s,i,a,o,l,u,c,f,h,g,v,w,E,p){let d=t,m=p,_=0,x=!1;for(;(m=m.get(wd))!==void 0&&!x;){let R=m.get(t);if(_+=1,typeof R!="undefined"){if(R===_)throw new RangeError("Cyclic object value");x=!0}typeof m.get(wd)=="undefined"&&(_=0)}if(typeof u=="function"?d=u(e,d):d instanceof Date?d=h==null?void 0:h(d):n==="comma"&&qt(d)&&(d=_d(d,function(R){return R instanceof Date?h==null?void 0:h(R):R})),d===null){if(i)return l&&!w?l(e,ye.encoder,E,"key",g):e;d=""}if(G0(d)||ag(d)){if(l){let R=w?e:l(e,ye.encoder,E,"key",g);return[(v==null?void 0:v(R))+"="+(v==null?void 0:v(l(d,ye.encoder,E,"value",g)))]}return[(v==null?void 0:v(e))+"="+(v==null?void 0:v(String(d)))]}let C=[];if(typeof d=="undefined")return C;let P;if(n==="comma"&&qt(d))w&&l&&(d=_d(d,l)),P=[{value:d.length>0?d.join(",")||null:void 0}];else if(qt(u))P=u;else{let R=Object.keys(d);P=c?R.sort(c):R}let A=o?String(e).replace(/\./g,"%2E"):String(e),D=r&&qt(d)&&d.length===1?A+"[]":A;if(s&&qt(d)&&d.length===0)return D+"[]";for(let R=0;R<P.length;++R){let B=P[R],K=typeof B=="object"&&typeof B.value!="undefined"?B.value:d[B];if(a&&K===null)continue;let De=f&&o?B.replace(/\./g,"%2E"):B,an=qt(d)?typeof n=="function"?n(D,De):D:D+(f?"."+De:"["+De+"]");p.set(t,_);let Ye=new WeakMap;Ye.set(wd,p),lg(C,ug(K,an,n,r,s,i,a,o,n==="comma"&&w&&qt(d)?null:l,u,c,f,h,g,v,w,E,Ye))}return C}function ew(t=ye){if(typeof t.allowEmptyArrays!="undefined"&&typeof t.allowEmptyArrays!="boolean")throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");if(typeof t.encodeDotInKeys!="undefined"&&typeof t.encodeDotInKeys!="boolean")throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");if(t.encoder!==null&&typeof t.encoder!="undefined"&&typeof t.encoder!="function")throw new TypeError("Encoder has to be a function.");let e=t.charset||ye.charset;if(typeof t.charset!="undefined"&&t.charset!=="utf-8"&&t.charset!=="iso-8859-1")throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");let n=hl;if(typeof t.format!="undefined"){if(!X0.call(gl,t.format))throw new TypeError("Unknown format option provided.");n=t.format}let r=gl[n],s=ye.filter;(typeof t.filter=="function"||qt(t.filter))&&(s=t.filter);let i;if(t.arrayFormat&&t.arrayFormat in og?i=t.arrayFormat:"indices"in t?i=t.indices?"indices":"repeat":i=ye.arrayFormat,"commaRoundTrip"in t&&typeof t.commaRoundTrip!="boolean")throw new TypeError("`commaRoundTrip` must be a boolean, or absent");let a=typeof t.allowDots=="undefined"?t.encodeDotInKeys?!0:ye.allowDots:!!t.allowDots;return{addQueryPrefix:typeof t.addQueryPrefix=="boolean"?t.addQueryPrefix:ye.addQueryPrefix,allowDots:a,allowEmptyArrays:typeof t.allowEmptyArrays=="boolean"?!!t.allowEmptyArrays:ye.allowEmptyArrays,arrayFormat:i,charset:e,charsetSentinel:typeof t.charsetSentinel=="boolean"?t.charsetSentinel:ye.charsetSentinel,commaRoundTrip:!!t.commaRoundTrip,delimiter:typeof t.delimiter=="undefined"?ye.delimiter:t.delimiter,encode:typeof t.encode=="boolean"?t.encode:ye.encode,encodeDotInKeys:typeof t.encodeDotInKeys=="boolean"?t.encodeDotInKeys:ye.encodeDotInKeys,encoder:typeof t.encoder=="function"?t.encoder:ye.encoder,encodeValuesOnly:typeof t.encodeValuesOnly=="boolean"?t.encodeValuesOnly:ye.encodeValuesOnly,filter:s,format:n,formatter:r,serializeDate:typeof t.serializeDate=="function"?t.serializeDate:ye.serializeDate,skipNulls:typeof t.skipNulls=="boolean"?t.skipNulls:ye.skipNulls,sort:typeof t.sort=="function"?t.sort:null,strictNullHandling:typeof t.strictNullHandling=="boolean"?t.strictNullHandling:ye.strictNullHandling}}function xd(t,e={}){let n=t,r=ew(e),s,i;typeof r.filter=="function"?(i=r.filter,n=i("",n)):qt(r.filter)&&(i=r.filter,s=i);let a=[];if(typeof n!="object"||n===null)return"";let o=og[r.arrayFormat],l=o==="comma"&&r.commaRoundTrip;s||(s=Object.keys(n)),r.sort&&s.sort(r.sort);let u=new WeakMap;for(let h=0;h<s.length;++h){let g=s[h];r.skipNulls&&n[g]===null||lg(a,ug(n[g],g,o,l,r.allowEmptyArrays,r.strictNullHandling,r.skipNulls,r.encodeDotInKeys,r.encode?r.encoder:null,r.filter,r.sort,r.allowDots,r.serializeDate,r.format,r.formatter,r.encodeValuesOnly,r.charset,u))}let c=a.join(r.delimiter),f=r.addQueryPrefix===!0?"?":"";return r.charsetSentinel&&(r.charset==="iso-8859-1"?f+="utf8=%26%2310003%3B&":f+="utf8=%E2%9C%93&"),c.length>0?f+c:""}var Tr="4.76.1";var cg=!1,Ir,kd,nw,rw,sw,Sd,iw,yl,Ed,Pd,Cd,vl,Ad;function dg(t,e={auto:!1}){if(cg)throw new Error(`you must \`import 'openai/shims/${t.kind}'\` before importing anything else from openai`);if(Ir)throw new Error(`can't \`import 'openai/shims/${t.kind}'\` after \`import 'openai/shims/${Ir}'\``);cg=e.auto,Ir=t.kind,kd=t.fetch,nw=t.Request,rw=t.Response,sw=t.Headers,Sd=t.FormData,iw=t.Blob,yl=t.File,Ed=t.ReadableStream,Pd=t.getMultipartRequestOptions,Cd=t.getDefaultAgent,vl=t.fileFromPath,Ad=t.isFsReadStream}var _l=class{constructor(e){this.body=e}get[Symbol.toStringTag](){return"MultipartBody"}};function fg({manuallyImported:t}={}){let e=t?"You may need to use polyfills":"Add one of these imports before your first `import \u2026 from 'openai'`:\n- `import 'openai/shims/node'` (if you're running on Node)\n- `import 'openai/shims/web'` (otherwise)\n",n,r,s,i;try{n=fetch,r=Request,s=Response,i=Headers}catch(a){throw new Error(`this environment is missing the following Web Fetch API type: ${a.message}. ${e}`)}return{kind:"web",fetch:n,Request:r,Response:s,Headers:i,FormData:typeof FormData!="undefined"?FormData:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${e}`)}},Blob:typeof Blob!="undefined"?Blob:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${e}`)}},File:typeof File!="undefined"?File:class{constructor(){throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${e}`)}},ReadableStream:typeof ReadableStream!="undefined"?ReadableStream:class{constructor(){throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${e}`)}},getMultipartRequestOptions:async(a,o)=>({...o,body:new _l(a)}),getDefaultAgent:a=>{},fileFromPath:()=>{throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads")},isFsReadStream:a=>!1}}Ir||dg(fg(),{auto:!0});var F=class extends Error{},de=class extends F{constructor(e,n,r,s){super(`${de.makeMessage(e,n,r)}`),this.status=e,this.headers=s,this.request_id=s==null?void 0:s["x-request-id"];let i=n;this.error=i,this.code=i==null?void 0:i.code,this.param=i==null?void 0:i.param,this.type=i==null?void 0:i.type}static makeMessage(e,n,r){let s=n!=null&&n.message?typeof n.message=="string"?n.message:JSON.stringify(n.message):n?JSON.stringify(n):r;return e&&s?`${e} ${s}`:e?`${e} status code (no body)`:s||"(no status code or body)"}static generate(e,n,r,s){if(!e)return new Xn({message:r,cause:wl(n)});let i=n==null?void 0:n.error;return e===400?new pa(e,i,r,s):e===401?new ma(e,i,r,s):e===403?new ha(e,i,r,s):e===404?new ga(e,i,r,s):e===409?new ya(e,i,r,s):e===422?new va(e,i,r,s):e===429?new _a(e,i,r,s):e>=500?new wa(e,i,r,s):new de(e,i,r,s)}},ke=class extends de{constructor({message:e}={}){super(void 0,void 0,e||"Request was aborted.",void 0),this.status=void 0}},Xn=class extends de{constructor({message:e,cause:n}){super(void 0,void 0,e||"Connection error.",void 0),this.status=void 0,n&&(this.cause=n)}},Jn=class extends Xn{constructor({message:e}={}){super({message:e!=null?e:"Request timed out."})}},pa=class extends de{constructor(){super(...arguments),this.status=400}},ma=class extends de{constructor(){super(...arguments),this.status=401}},ha=class extends de{constructor(){super(...arguments),this.status=403}},ga=class extends de{constructor(){super(...arguments),this.status=404}},ya=class extends de{constructor(){super(...arguments),this.status=409}},va=class extends de{constructor(){super(...arguments),this.status=422}},_a=class extends de{constructor(){super(...arguments),this.status=429}},wa=class extends de{},Us=class extends F{constructor(){super("Could not parse response content as the length limit was reached")}},Bs=class extends F{constructor(){super("Could not parse response content as the request was rejected by the content filter")}};var Kt=class{constructor(){this.buffer=[],this.trailingCR=!1}decode(e){let n=this.decodeText(e);if(this.trailingCR&&(n="\r"+n,this.trailingCR=!1),n.endsWith("\r")&&(this.trailingCR=!0,n=n.slice(0,-1)),!n)return[];let r=Kt.NEWLINE_CHARS.has(n[n.length-1]||""),s=n.split(Kt.NEWLINE_REGEXP);return r&&s.pop(),s.length===1&&!r?(this.buffer.push(s[0]),[]):(this.buffer.length>0&&(s=[this.buffer.join("")+s[0],...s.slice(1)],this.buffer=[]),r||(this.buffer=[s.pop()||""]),s)}decodeText(e){var n;if(e==null)return"";if(typeof e=="string")return e;if(typeof Buffer!="undefined"){if(e instanceof Buffer)return e.toString();if(e instanceof Uint8Array)return Buffer.from(e).toString();throw new F(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`)}if(typeof TextDecoder!="undefined"){if(e instanceof Uint8Array||e instanceof ArrayBuffer)return(n=this.textDecoder)!=null||(this.textDecoder=new TextDecoder("utf8")),this.textDecoder.decode(e);throw new F(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`)}throw new F("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.")}flush(){if(!this.buffer.length&&!this.trailingCR)return[];let e=[this.buffer.join("")];return this.buffer=[],this.trailingCR=!1,e}};Kt.NEWLINE_CHARS=new Set([`
`,"\r"]);Kt.NEWLINE_REGEXP=/\r\n|[\n\r]/g;var ze=class{constructor(e,n){this.iterator=e,this.controller=n}static fromSSEResponse(e,n){let r=!1;async function*s(){if(r)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");r=!0;let i=!1;try{for await(let a of lw(e,n))if(!i){if(a.data.startsWith("[DONE]")){i=!0;continue}if(a.event===null){let o;try{o=JSON.parse(a.data)}catch(l){throw console.error("Could not parse message into JSON:",a.data),console.error("From chunk:",a.raw),l}if(o&&o.error)throw new de(void 0,o.error,void 0,void 0);yield o}else{let o;try{o=JSON.parse(a.data)}catch(l){throw console.error("Could not parse message into JSON:",a.data),console.error("From chunk:",a.raw),l}if(a.event=="error")throw new de(void 0,o.error,o.message,void 0);yield{event:a.event,data:o}}}i=!0}catch(a){if(a instanceof Error&&a.name==="AbortError")return;throw a}finally{i||n.abort()}}return new ze(s,n)}static fromReadableStream(e,n){let r=!1;async function*s(){let a=new Kt,o=pg(e);for await(let l of o)for(let u of a.decode(l))yield u;for(let l of a.flush())yield l}async function*i(){if(r)throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");r=!0;let a=!1;try{for await(let o of s())a||o&&(yield JSON.parse(o));a=!0}catch(o){if(o instanceof Error&&o.name==="AbortError")return;throw o}finally{a||n.abort()}}return new ze(i,n)}[Symbol.asyncIterator](){return this.iterator()}tee(){let e=[],n=[],r=this.iterator(),s=i=>({next:()=>{if(i.length===0){let a=r.next();e.push(a),n.push(a)}return i.shift()}});return[new ze(()=>s(e),this.controller),new ze(()=>s(n),this.controller)]}toReadableStream(){let e=this,n,r=new TextEncoder;return new Ed({async start(){n=e[Symbol.asyncIterator]()},async pull(s){try{let{value:i,done:a}=await n.next();if(a)return s.close();let o=r.encode(JSON.stringify(i)+`
`);s.enqueue(o)}catch(i){s.error(i)}},async cancel(){var s;await((s=n.return)==null?void 0:s.call(n))}})}};async function*lw(t,e){if(!t.body)throw e.abort(),new F("Attempted to iterate over a response with no body");let n=new Td,r=new Kt,s=pg(t.body);for await(let i of uw(s))for(let a of r.decode(i)){let o=n.decode(a);o&&(yield o)}for(let i of r.flush()){let a=n.decode(i);a&&(yield a)}}async function*uw(t){let e=new Uint8Array;for await(let n of t){if(n==null)continue;let r=n instanceof ArrayBuffer?new Uint8Array(n):typeof n=="string"?new TextEncoder().encode(n):n,s=new Uint8Array(e.length+r.length);s.set(e),s.set(r,e.length),e=s;let i;for(;(i=cw(e))!==-1;)yield e.slice(0,i),e=e.slice(i)}e.length>0&&(yield e)}function cw(t){for(let r=0;r<t.length-2;r++){if(t[r]===10&&t[r+1]===10||t[r]===13&&t[r+1]===13)return r+2;if(t[r]===13&&t[r+1]===10&&r+3<t.length&&t[r+2]===13&&t[r+3]===10)return r+4}return-1}var Td=class{constructor(){this.event=null,this.data=[],this.chunks=[]}decode(e){if(e.endsWith("\r")&&(e=e.substring(0,e.length-1)),!e){if(!this.event&&!this.data.length)return null;let i={event:this.event,data:this.data.join(`
`),raw:this.chunks};return this.event=null,this.data=[],this.chunks=[],i}if(this.chunks.push(e),e.startsWith(":"))return null;let[n,r,s]=dw(e,":");return s.startsWith(" ")&&(s=s.substring(1)),n==="event"?this.event=s:n==="data"&&this.data.push(s),null}};function dw(t,e){let n=t.indexOf(e);return n!==-1?[t.substring(0,n),e,t.substring(n+e.length)]:[t,"",""]}function pg(t){if(t[Symbol.asyncIterator])return t;let e=t.getReader();return{async next(){try{let n=await e.read();return n!=null&&n.done&&e.releaseLock(),n}catch(n){throw e.releaseLock(),n}},async return(){let n=e.cancel();return e.releaseLock(),await n,{done:!0,value:void 0}},[Symbol.asyncIterator](){return this}}}var mg=t=>t!=null&&typeof t=="object"&&typeof t.url=="string"&&typeof t.blob=="function",hg=t=>t!=null&&typeof t=="object"&&typeof t.name=="string"&&typeof t.lastModified=="number"&&xa(t),xa=t=>t!=null&&typeof t=="object"&&typeof t.size=="number"&&typeof t.type=="string"&&typeof t.text=="function"&&typeof t.slice=="function"&&typeof t.arrayBuffer=="function",fw=t=>hg(t)||mg(t)||Ad(t);async function Rd(t,e,n){var s,i,a;if(t=await t,hg(t))return t;if(mg(t)){let o=await t.blob();e||(e=(s=new URL(t.url).pathname.split(/[\\/]/).pop())!=null?s:"unknown_file");let l=xa(o)?[await o.arrayBuffer()]:[o];return new yl(l,e,n)}let r=await pw(t);if(e||(e=(i=hw(t))!=null?i:"unknown_file"),!(n!=null&&n.type)){let o=(a=r[0])==null?void 0:a.type;typeof o=="string"&&(n={...n,type:o})}return new yl(r,e,n)}async function pw(t){var n;let e=[];if(typeof t=="string"||ArrayBuffer.isView(t)||t instanceof ArrayBuffer)e.push(t);else if(xa(t))e.push(await t.arrayBuffer());else if(gw(t))for await(let r of t)e.push(r);else throw new Error(`Unexpected data type: ${typeof t}; constructor: ${(n=t==null?void 0:t.constructor)==null?void 0:n.name}; props: ${mw(t)}`);return e}function mw(t){return`[${Object.getOwnPropertyNames(t).map(n=>`"${n}"`).join(", ")}]`}function hw(t){var e;return Id(t.name)||Id(t.filename)||((e=Id(t.path))==null?void 0:e.split(/[\\/]/).pop())}var Id=t=>{if(typeof t=="string")return t;if(typeof Buffer!="undefined"&&t instanceof Buffer)return String(t)},gw=t=>t!=null&&typeof t=="object"&&typeof t[Symbol.asyncIterator]=="function",Nd=t=>t&&typeof t=="object"&&t.body&&t[Symbol.toStringTag]==="MultipartBody";var vt=async t=>{let e=await gg(t.body);return Pd(e,t)},gg=async t=>{let e=new Sd;return await Promise.all(Object.entries(t||{}).map(([n,r])=>Od(e,n,r))),e};var Od=async(t,e,n)=>{if(n!==void 0){if(n==null)throw new TypeError(`Received null for "${e}"; to pass null in FormData, you must use the string 'null'`);if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")t.append(e,String(n));else if(fw(n)){let r=await Rd(n);t.append(e,r)}else if(Array.isArray(n))await Promise.all(n.map(r=>Od(t,e+"[]",r)));else if(typeof n=="object")await Promise.all(Object.entries(n).map(([r,s])=>Od(t,`${e}[${r}]`,s)));else throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${n} instead`)}};var vw=function(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n},_w=function(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)},xl;async function xg(t){let{response:e}=t;if(t.options.stream)return Vs("response",e.status,e.url,e.headers,e.body),t.options.__streamClass?t.options.__streamClass.fromSSEResponse(e,t.controller):ze.fromSSEResponse(e,t.controller);if(e.status===204)return null;if(t.options.__binaryResponse)return e;let n=e.headers.get("content-type");if((n==null?void 0:n.includes("application/json"))||(n==null?void 0:n.includes("application/vnd.api+json"))){let i=await e.json();return Vs("response",e.status,e.url,e.headers,i),kg(i,e)}let s=await e.text();return Vs("response",e.status,e.url,e.headers,s),s}function kg(t,e){return!t||typeof t!="object"||Array.isArray(t)?t:Object.defineProperty(t,"_request_id",{value:e.headers.get("x-request-id"),enumerable:!1})}var Zs=class extends Promise{constructor(e,n=xg){super(r=>{r(null)}),this.responsePromise=e,this.parseResponse=n}_thenUnwrap(e){return new Zs(this.responsePromise,async n=>kg(e(await this.parseResponse(n),n),n.response))}asResponse(){return this.responsePromise.then(e=>e.response)}async withResponse(){let[e,n]=await Promise.all([this.parse(),this.asResponse()]);return{data:e,response:n,request_id:n.headers.get("x-request-id")}}parse(){return this.parsedPromise||(this.parsedPromise=this.responsePromise.then(this.parseResponse)),this.parsedPromise}then(e,n){return this.parse().then(e,n)}catch(e){return this.parse().catch(e)}finally(e){return this.parse().finally(e)}},Sl=class{constructor({baseURL:e,maxRetries:n=2,timeout:r=6e5,httpAgent:s,fetch:i}){this.baseURL=e,this.maxRetries=bd("maxRetries",n),this.timeout=bd("timeout",r),this.httpAgent=s,this.fetch=i!=null?i:kd}authHeaders(e){return{}}defaultHeaders(e){return{Accept:"application/json","Content-Type":"application/json","User-Agent":this.getUserAgent(),...Ew(),...this.authHeaders(e)}}validateHeaders(e,n){}defaultIdempotencyKey(){return`stainless-node-retry-${Tw()}`}get(e,n){return this.methodRequest("get",e,n)}post(e,n){return this.methodRequest("post",e,n)}patch(e,n){return this.methodRequest("patch",e,n)}put(e,n){return this.methodRequest("put",e,n)}delete(e,n){return this.methodRequest("delete",e,n)}methodRequest(e,n,r){return this.request(Promise.resolve(r).then(async s=>{let i=s&&xa(s==null?void 0:s.body)?new DataView(await s.body.arrayBuffer()):(s==null?void 0:s.body)instanceof DataView?s.body:(s==null?void 0:s.body)instanceof ArrayBuffer?new DataView(s.body):s&&ArrayBuffer.isView(s==null?void 0:s.body)?new DataView(s.body.buffer):s==null?void 0:s.body;return{method:e,path:n,...s,body:i}}))}getAPIList(e,n,r){return this.requestAPIList(n,{method:"get",path:e,...r})}calculateContentLength(e){if(typeof e=="string"){if(typeof Buffer!="undefined")return Buffer.byteLength(e,"utf8").toString();if(typeof TextEncoder!="undefined")return new TextEncoder().encode(e).length.toString()}else if(ArrayBuffer.isView(e))return e.byteLength.toString();return null}buildRequest(e,{retryCount:n=0}={}){var w,E,p,d,m,_;let{method:r,path:s,query:i,headers:a={}}=e,o=ArrayBuffer.isView(e.body)||e.__binaryRequest&&typeof e.body=="string"?e.body:Nd(e.body)?e.body.body:e.body?JSON.stringify(e.body,null,2):null,l=this.calculateContentLength(o),u=this.buildURL(s,i);"timeout"in e&&bd("timeout",e.timeout);let c=(w=e.timeout)!=null?w:this.timeout,f=(p=(E=e.httpAgent)!=null?E:this.httpAgent)!=null?p:Cd(u),h=c+1e3;typeof((d=f==null?void 0:f.options)==null?void 0:d.timeout)=="number"&&h>((m=f.options.timeout)!=null?m:0)&&(f.options.timeout=h),this.idempotencyHeader&&r!=="get"&&(e.idempotencyKey||(e.idempotencyKey=this.defaultIdempotencyKey()),a[this.idempotencyHeader]=e.idempotencyKey);let g=this.buildHeaders({options:e,headers:a,contentLength:l,retryCount:n});return{req:{method:r,...o&&{body:o},headers:g,...f&&{agent:f},signal:(_=e.signal)!=null?_:null},url:u,timeout:c}}buildHeaders({options:e,headers:n,contentLength:r,retryCount:s}){let i={};r&&(i["content-length"]=r);let a=this.defaultHeaders(e);return _g(i,a),_g(i,n),Nd(e.body)&&Ir!=="node"&&delete i["content-type"],wg(a,"x-stainless-retry-count")===void 0&&wg(n,"x-stainless-retry-count")===void 0&&(i["x-stainless-retry-count"]=String(s)),this.validateHeaders(i,n),i}async prepareOptions(e){}async prepareRequest(e,{url:n,options:r}){}parseHeaders(e){return e?Symbol.iterator in e?Object.fromEntries(Array.from(e).map(n=>[...n])):{...e}:{}}makeStatusError(e,n,r,s){return de.generate(e,n,r,s)}request(e,n=null){return new Zs(this.makeRequest(e,n))}async makeRequest(e,n){var f,h,g;let r=await e,s=(f=r.maxRetries)!=null?f:this.maxRetries;n==null&&(n=s),await this.prepareOptions(r);let{req:i,url:a,timeout:o}=this.buildRequest(r,{retryCount:s-n});if(await this.prepareRequest(i,{url:a,options:r}),Vs("request",a,r,i.headers),(h=r.signal)!=null&&h.aborted)throw new ke;let l=new AbortController,u=await this.fetchWithTimeout(a,i,o,l).catch(wl);if(u instanceof Error){if((g=r.signal)!=null&&g.aborted)throw new ke;if(n)return this.retryRequest(r,n);throw u.name==="AbortError"?new Jn:new Xn({cause:u})}let c=ww(u.headers);if(!u.ok){if(n&&this.shouldRetry(u)){let m=`retrying, ${n} attempts remaining`;return Vs(`response (error; ${m})`,u.status,a,c),this.retryRequest(r,n,c)}let v=await u.text().catch(m=>wl(m).message),w=Pw(v),E=w?void 0:v;throw Vs(`response (error; ${n?"(error; no more retries left)":"(error; not retryable)"})`,u.status,a,c,E),this.makeStatusError(u.status,w,E,c)}return{response:u,options:r,controller:l}}requestAPIList(e,n){let r=this.makeRequest(n,null);return new Md(this,r,e)}buildURL(e,n){let r=Aw(e)?new URL(e):new URL(this.baseURL+(this.baseURL.endsWith("/")&&e.startsWith("/")?e.slice(1):e)),s=this.defaultQuery();return Sg(s)||(n={...s,...n}),typeof n=="object"&&n&&!Array.isArray(n)&&(r.search=this.stringifyQuery(n)),r.toString()}stringifyQuery(e){return Object.entries(e).filter(([n,r])=>typeof r!="undefined").map(([n,r])=>{if(typeof r=="string"||typeof r=="number"||typeof r=="boolean")return`${encodeURIComponent(n)}=${encodeURIComponent(r)}`;if(r===null)return`${encodeURIComponent(n)}=`;throw new F(`Cannot stringify type ${typeof r}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`)}).join("&")}async fetchWithTimeout(e,n,r,s){let{signal:i,...a}=n||{};i&&i.addEventListener("abort",()=>s.abort());let o=setTimeout(()=>s.abort(),r);return this.fetch.call(void 0,e,{signal:s.signal,...a}).finally(()=>{clearTimeout(o)})}shouldRetry(e){let n=e.headers.get("x-should-retry");return n==="true"?!0:n==="false"?!1:e.status===408||e.status===409||e.status===429||e.status>=500}async retryRequest(e,n,r){var o;let s,i=r==null?void 0:r["retry-after-ms"];if(i){let l=parseFloat(i);Number.isNaN(l)||(s=l)}let a=r==null?void 0:r["retry-after"];if(a&&!s){let l=parseFloat(a);Number.isNaN(l)?s=Date.parse(a)-Date.now():s=l*1e3}if(!(s&&0<=s&&s<60*1e3)){let l=(o=e.maxRetries)!=null?o:this.maxRetries;s=this.calculateDefaultRetryTimeoutMillis(n,l)}return await vn(s),this.makeRequest(e,n-1)}calculateDefaultRetryTimeoutMillis(e,n){let i=n-e,a=Math.min(.5*Math.pow(2,i),8),o=1-Math.random()*.25;return a*o*1e3}getUserAgent(){return`${this.constructor.name}/JS ${Tr}`}},ka=class{constructor(e,n,r,s){xl.set(this,void 0),vw(this,xl,e,"f"),this.options=s,this.response=n,this.body=r}hasNextPage(){return this.getPaginatedItems().length?this.nextPageInfo()!=null:!1}async getNextPage(){let e=this.nextPageInfo();if(!e)throw new F("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");let n={...this.options};if("params"in e&&typeof n.query=="object")n.query={...n.query,...e.params};else if("url"in e){let r=[...Object.entries(n.query||{}),...e.url.searchParams.entries()];for(let[s,i]of r)e.url.searchParams.set(s,i);n.query=void 0,n.path=e.url.toString()}return await _w(this,xl,"f").requestAPIList(this.constructor,n)}async*iterPages(){let e=this;for(yield e;e.hasNextPage();)e=await e.getNextPage(),yield e}async*[(xl=new WeakMap,Symbol.asyncIterator)](){for await(let e of this.iterPages())for(let n of e.getPaginatedItems())yield n}},Md=class extends Zs{constructor(e,n,r){super(n,async s=>new r(e,s.response,await xg(s),s.options))}async*[Symbol.asyncIterator](){let e=await this;for await(let n of e)yield n}},ww=t=>new Proxy(Object.fromEntries(t.entries()),{get(e,n){let r=n.toString();return e[r.toLowerCase()]||e[r]}}),xw={method:!0,path:!0,query:!0,body:!0,headers:!0,maxRetries:!0,stream:!0,timeout:!0,httpAgent:!0,signal:!0,idempotencyKey:!0,__binaryRequest:!0,__binaryResponse:!0,__streamClass:!0},ee=t=>typeof t=="object"&&t!==null&&!Sg(t)&&Object.keys(t).every(e=>Eg(xw,e)),kw=()=>{var e,n;if(typeof Deno!="undefined"&&Deno.build!=null)return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Tr,"X-Stainless-OS":vg(Deno.build.os),"X-Stainless-Arch":yg(Deno.build.arch),"X-Stainless-Runtime":"deno","X-Stainless-Runtime-Version":typeof Deno.version=="string"?Deno.version:(n=(e=Deno.version)==null?void 0:e.deno)!=null?n:"unknown"};if(typeof EdgeRuntime!="undefined")return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Tr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":`other:${EdgeRuntime}`,"X-Stainless-Runtime":"edge","X-Stainless-Runtime-Version":process.version};if(Object.prototype.toString.call(typeof process!="undefined"?process:0)==="[object process]")return{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Tr,"X-Stainless-OS":vg(process.platform),"X-Stainless-Arch":yg(process.arch),"X-Stainless-Runtime":"node","X-Stainless-Runtime-Version":process.version};let t=Sw();return t?{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Tr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":`browser:${t.browser}`,"X-Stainless-Runtime-Version":t.version}:{"X-Stainless-Lang":"js","X-Stainless-Package-Version":Tr,"X-Stainless-OS":"Unknown","X-Stainless-Arch":"unknown","X-Stainless-Runtime":"unknown","X-Stainless-Runtime-Version":"unknown"}};function Sw(){if(typeof navigator=="undefined"||!navigator)return null;let t=[{key:"edge",pattern:/Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"ie",pattern:/Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"chrome",pattern:/Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"firefox",pattern:/Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/},{key:"safari",pattern:/(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/}];for(let{key:e,pattern:n}of t){let r=n.exec(navigator.userAgent);if(r){let s=r[1]||0,i=r[2]||0,a=r[3]||0;return{browser:e,version:`${s}.${i}.${a}`}}}return null}var yg=t=>t==="x32"?"x32":t==="x86_64"||t==="x64"?"x64":t==="arm"?"arm":t==="aarch64"||t==="arm64"?"arm64":t?`other:${t}`:"unknown",vg=t=>(t=t.toLowerCase(),t.includes("ios")?"iOS":t==="android"?"Android":t==="darwin"?"MacOS":t==="win32"?"Windows":t==="freebsd"?"FreeBSD":t==="openbsd"?"OpenBSD":t==="linux"?"Linux":t?`Other:${t}`:"Unknown"),kl,Ew=()=>kl!=null?kl:kl=kw(),Pw=t=>{try{return JSON.parse(t)}catch(e){return}},Cw=new RegExp("^(?:[a-z]+:)?//","i"),Aw=t=>Cw.test(t),vn=t=>new Promise(e=>setTimeout(e,t)),bd=(t,e)=>{if(typeof e!="number"||!Number.isInteger(e))throw new F(`${t} must be an integer`);if(e<0)throw new F(`${t} must be a positive integer`);return e},wl=t=>{if(t instanceof Error)return t;if(typeof t=="object"&&t!==null)try{return new Error(JSON.stringify(t))}catch(e){}return new Error(t)};var Sa=t=>{var e,n,r,s,i,a;if(typeof process!="undefined")return(r=(n=(e=process.env)==null?void 0:e[t])==null?void 0:n.trim())!=null?r:void 0;if(typeof Deno!="undefined")return(a=(i=(s=Deno.env)==null?void 0:s.get)==null?void 0:i.call(s,t))==null?void 0:a.trim()};function Sg(t){if(!t)return!0;for(let e in t)return!1;return!0}function Eg(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function _g(t,e){for(let n in e){if(!Eg(e,n))continue;let r=n.toLowerCase();if(!r)continue;let s=e[n];s===null?delete t[r]:s!==void 0&&(t[r]=s)}}function Vs(t,...e){var n;typeof process!="undefined"&&((n=process==null?void 0:process.env)==null?void 0:n.DEBUG)==="true"&&console.log(`OpenAI:DEBUG:${t}`,...e)}var Tw=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,t=>{let e=Math.random()*16|0;return(t==="x"?e:e&3|8).toString(16)}),Pg=()=>typeof window!="undefined"&&typeof window.document!="undefined"&&typeof navigator!="undefined",Iw=t=>typeof(t==null?void 0:t.get)=="function";var wg=(t,e)=>{var r;let n=e.toLowerCase();if(Iw(t)){let s=((r=e[0])==null?void 0:r.toUpperCase())+e.substring(1).replace(/([^\w])(\w)/g,(i,a,o)=>a+o.toUpperCase());for(let i of[e,n,e.toUpperCase(),s]){let a=t.get(i);if(a)return a}}for(let[s,i]of Object.entries(t))if(s.toLowerCase()===n)return Array.isArray(i)?(i.length<=1||console.warn(`Received ${i.length} entries for the ${e} header, using the first entry.`),i[0]):i};function Ea(t){return t!=null&&typeof t=="object"&&!Array.isArray(t)}var El=class extends ka{constructor(e,n,r,s){super(e,n,r,s),this.data=r.data||[],this.object=r.object}getPaginatedItems(){var e;return(e=this.data)!=null?e:[]}nextPageParams(){return null}nextPageInfo(){return null}},le=class extends ka{constructor(e,n,r,s){super(e,n,r,s),this.data=r.data||[]}getPaginatedItems(){var e;return(e=this.data)!=null?e:[]}nextPageParams(){let e=this.nextPageInfo();if(!e)return null;if("params"in e)return e.params;let n=Object.fromEntries(e.url.searchParams);return Object.keys(n).length?n:null}nextPageInfo(){var r;let e=this.getPaginatedItems();if(!e.length)return null;let n=(r=e[e.length-1])==null?void 0:r.id;return n?{params:{after:n}}:null}};var N=class{constructor(e){this._client=e}};var Ws=class extends N{create(e,n){var r;return this._client.post("/chat/completions",{body:e,...n,stream:(r=e.stream)!=null?r:!1})}};var Yn=class extends N{constructor(){super(...arguments),this.completions=new Ws(this._client)}};Yn.Completions=Ws;var Hs=class extends N{create(e,n){return this._client.post("/audio/speech",{body:e,...n,__binaryResponse:!0})}};var qs=class extends N{create(e,n){return this._client.post("/audio/transcriptions",vt({body:e,...n}))}};var Ks=class extends N{create(e,n){return this._client.post("/audio/translations",vt({body:e,...n}))}};var Qt=class extends N{constructor(){super(...arguments),this.transcriptions=new qs(this._client),this.translations=new Ks(this._client),this.speech=new Hs(this._client)}};Qt.Transcriptions=qs;Qt.Translations=Ks;Qt.Speech=Hs;var Gn=class extends N{create(e,n){return this._client.post("/batches",{body:e,...n})}retrieve(e,n){return this._client.get(`/batches/${e}`,n)}list(e={},n){return ee(e)?this.list({},e):this._client.getAPIList("/batches",Rr,{query:e,...n})}cancel(e,n){return this._client.post(`/batches/${e}/cancel`,n)}},Rr=class extends le{};Gn.BatchesPage=Rr;var Nr=class extends N{create(e,n){return this._client.post("/assistants",{body:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}retrieve(e,n){return this._client.get(`/assistants/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}update(e,n,r){return this._client.post(`/assistants/${e}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}list(e={},n){return ee(e)?this.list({},e):this._client.getAPIList("/assistants",Qs,{query:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}del(e,n){return this._client.delete(`/assistants/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}},Qs=class extends le{};Nr.AssistantsPage=Qs;function Dd(t){return typeof t.parse=="function"}var er=t=>(t==null?void 0:t.role)==="assistant",Ld=t=>(t==null?void 0:t.role)==="function",jd=t=>(t==null?void 0:t.role)==="tool";var Rt=function(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n},ue=function(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)},$d,Pl,Cl,Pa,Ca,Al,Aa,_n,Ta,Tl,Il,Xs,Cg,Js=class{constructor(){$d.add(this),this.controller=new AbortController,Pl.set(this,void 0),Cl.set(this,()=>{}),Pa.set(this,()=>{}),Ca.set(this,void 0),Al.set(this,()=>{}),Aa.set(this,()=>{}),_n.set(this,{}),Ta.set(this,!1),Tl.set(this,!1),Il.set(this,!1),Xs.set(this,!1),Rt(this,Pl,new Promise((e,n)=>{Rt(this,Cl,e,"f"),Rt(this,Pa,n,"f")}),"f"),Rt(this,Ca,new Promise((e,n)=>{Rt(this,Al,e,"f"),Rt(this,Aa,n,"f")}),"f"),ue(this,Pl,"f").catch(()=>{}),ue(this,Ca,"f").catch(()=>{})}_run(e){setTimeout(()=>{e().then(()=>{this._emitFinal(),this._emit("end")},ue(this,$d,"m",Cg).bind(this))},0)}_connected(){this.ended||(ue(this,Cl,"f").call(this),this._emit("connect"))}get ended(){return ue(this,Ta,"f")}get errored(){return ue(this,Tl,"f")}get aborted(){return ue(this,Il,"f")}abort(){this.controller.abort()}on(e,n){return(ue(this,_n,"f")[e]||(ue(this,_n,"f")[e]=[])).push({listener:n}),this}off(e,n){let r=ue(this,_n,"f")[e];if(!r)return this;let s=r.findIndex(i=>i.listener===n);return s>=0&&r.splice(s,1),this}once(e,n){return(ue(this,_n,"f")[e]||(ue(this,_n,"f")[e]=[])).push({listener:n,once:!0}),this}emitted(e){return new Promise((n,r)=>{Rt(this,Xs,!0,"f"),e!=="error"&&this.once("error",r),this.once(e,n)})}async done(){Rt(this,Xs,!0,"f"),await ue(this,Ca,"f")}_emit(e,...n){if(ue(this,Ta,"f"))return;e==="end"&&(Rt(this,Ta,!0,"f"),ue(this,Al,"f").call(this));let r=ue(this,_n,"f")[e];if(r&&(ue(this,_n,"f")[e]=r.filter(s=>!s.once),r.forEach(({listener:s})=>s(...n))),e==="abort"){let s=n[0];!ue(this,Xs,"f")&&!(r!=null&&r.length)&&Promise.reject(s),ue(this,Pa,"f").call(this,s),ue(this,Aa,"f").call(this,s),this._emit("end");return}if(e==="error"){let s=n[0];!ue(this,Xs,"f")&&!(r!=null&&r.length)&&Promise.reject(s),ue(this,Pa,"f").call(this,s),ue(this,Aa,"f").call(this,s),this._emit("end")}}_emitFinal(){}};Pl=new WeakMap,Cl=new WeakMap,Pa=new WeakMap,Ca=new WeakMap,Al=new WeakMap,Aa=new WeakMap,_n=new WeakMap,Ta=new WeakMap,Tl=new WeakMap,Il=new WeakMap,Xs=new WeakMap,$d=new WeakSet,Cg=function(e){if(Rt(this,Tl,!0,"f"),e instanceof Error&&e.name==="AbortError"&&(e=new ke),e instanceof ke)return Rt(this,Il,!0,"f"),this._emit("abort",e);if(e instanceof F)return this._emit("error",e);if(e instanceof Error){let n=new F(e.message);return n.cause=e,this._emit("error",n)}return this._emit("error",new F(String(e)))};function Ag(t,e){let n={...t};return Object.defineProperties(n,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),n}function Fd(t){return(t==null?void 0:t.$brand)==="auto-parseable-response-format"}function br(t){return(t==null?void 0:t.$brand)==="auto-parseable-tool"}function Tg(t,e){return!e||!zd(e)?{...t,choices:t.choices.map(n=>{var r;return{...n,message:{...n.message,parsed:null,tool_calls:(r=n.message.tool_calls)!=null?r:[]}}})}:Ia(t,e)}function Ia(t,e){let n=t.choices.map(r=>{var s,i;if(r.finish_reason==="length")throw new Us;if(r.finish_reason==="content_filter")throw new Bs;return{...r,message:{...r.message,tool_calls:(i=(s=r.message.tool_calls)==null?void 0:s.map(a=>Lw(e,a)))!=null?i:[],parsed:r.message.content&&!r.message.refusal?Dw(e,r.message.content):null}}});return{...t,choices:n}}function Dw(t,e){var n,r;return((n=t.response_format)==null?void 0:n.type)!=="json_schema"?null:((r=t.response_format)==null?void 0:r.type)==="json_schema"?"$parseRaw"in t.response_format?t.response_format.$parseRaw(e):JSON.parse(e):null}function Lw(t,e){var r;let n=(r=t.tools)==null?void 0:r.find(s=>{var i;return((i=s.function)==null?void 0:i.name)===e.function.name});return{...e,function:{...e.function,parsed_arguments:br(n)?n.$parseRaw(e.function.arguments):n!=null&&n.function.strict?JSON.parse(e.function.arguments):null}}}function Ig(t,e){var r;if(!t)return!1;let n=(r=t.tools)==null?void 0:r.find(s=>{var i;return((i=s.function)==null?void 0:i.name)===e.function.name});return br(n)||(n==null?void 0:n.function.strict)||!1}function zd(t){var e,n;return Fd(t.response_format)?!0:(n=(e=t.tools)==null?void 0:e.some(r=>br(r)||r.type==="function"&&r.function.strict===!0))!=null?n:!1}function Og(t){for(let e of t!=null?t:[]){if(e.type!=="function")throw new F(`Currently only \`function\` tool types support auto-parsing; Received \`${e.type}\``);if(e.function.strict!==!0)throw new F(`The \`${e.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`)}}var Je=function(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)},Me,Ud,Ol,Bd,Vd,Zd,Ng,Wd,Rg=10,Ys=class extends Js{constructor(){super(...arguments),Me.add(this),this._chatCompletions=[],this.messages=[]}_addChatCompletion(e){var r;this._chatCompletions.push(e),this._emit("chatCompletion",e);let n=(r=e.choices[0])==null?void 0:r.message;return n&&this._addMessage(n),e}_addMessage(e,n=!0){if("content"in e||(e.content=null),this.messages.push(e),n){if(this._emit("message",e),(Ld(e)||jd(e))&&e.content)this._emit("functionCallResult",e.content);else if(er(e)&&e.function_call)this._emit("functionCall",e.function_call);else if(er(e)&&e.tool_calls)for(let r of e.tool_calls)r.type==="function"&&this._emit("functionCall",r.function)}}async finalChatCompletion(){await this.done();let e=this._chatCompletions[this._chatCompletions.length-1];if(!e)throw new F("stream ended without producing a ChatCompletion");return e}async finalContent(){return await this.done(),Je(this,Me,"m",Ud).call(this)}async finalMessage(){return await this.done(),Je(this,Me,"m",Ol).call(this)}async finalFunctionCall(){return await this.done(),Je(this,Me,"m",Bd).call(this)}async finalFunctionCallResult(){return await this.done(),Je(this,Me,"m",Vd).call(this)}async totalUsage(){return await this.done(),Je(this,Me,"m",Zd).call(this)}allChatCompletions(){return[...this._chatCompletions]}_emitFinal(){let e=this._chatCompletions[this._chatCompletions.length-1];e&&this._emit("finalChatCompletion",e);let n=Je(this,Me,"m",Ol).call(this);n&&this._emit("finalMessage",n);let r=Je(this,Me,"m",Ud).call(this);r&&this._emit("finalContent",r);let s=Je(this,Me,"m",Bd).call(this);s&&this._emit("finalFunctionCall",s);let i=Je(this,Me,"m",Vd).call(this);i!=null&&this._emit("finalFunctionCallResult",i),this._chatCompletions.some(a=>a.usage)&&this._emit("totalUsage",Je(this,Me,"m",Zd).call(this))}async _createChatCompletion(e,n,r){let s=r==null?void 0:r.signal;s&&(s.aborted&&this.controller.abort(),s.addEventListener("abort",()=>this.controller.abort())),Je(this,Me,"m",Ng).call(this,n);let i=await e.chat.completions.create({...n,stream:!1},{...r,signal:this.controller.signal});return this._connected(),this._addChatCompletion(Ia(i,n))}async _runChatCompletion(e,n,r){for(let s of n.messages)this._addMessage(s,!1);return await this._createChatCompletion(e,n,r)}async _runFunctions(e,n,r){var h;let s="function",{function_call:i="auto",stream:a,...o}=n,l=typeof i!="string"&&(i==null?void 0:i.name),{maxChatCompletions:u=Rg}=r||{},c={};for(let g of n.functions)c[g.name||g.function.name]=g;let f=n.functions.map(g=>({name:g.name||g.function.name,parameters:g.parameters,description:g.description}));for(let g of n.messages)this._addMessage(g,!1);for(let g=0;g<u;++g){let w=(h=(await this._createChatCompletion(e,{...o,function_call:i,functions:f,messages:[...this.messages]},r)).choices[0])==null?void 0:h.message;if(!w)throw new F("missing message in ChatCompletion response");if(!w.function_call)return;let{name:E,arguments:p}=w.function_call,d=c[E];if(d){if(l&&l!==E){let C=`Invalid function_call: ${JSON.stringify(E)}. ${JSON.stringify(l)} requested. Please try again`;this._addMessage({role:s,name:E,content:C});continue}}else{let C=`Invalid function_call: ${JSON.stringify(E)}. Available options are: ${f.map(P=>JSON.stringify(P.name)).join(", ")}. Please try again`;this._addMessage({role:s,name:E,content:C});continue}let m;try{m=Dd(d)?await d.parse(p):p}catch(C){this._addMessage({role:s,name:E,content:C instanceof Error?C.message:String(C)});continue}let _=await d.function(m,this),x=Je(this,Me,"m",Wd).call(this,_);if(this._addMessage({role:s,name:E,content:x}),l)return}}async _runTools(e,n,r){var g,v,w;let s="tool",{tool_choice:i="auto",stream:a,...o}=n,l=typeof i!="string"&&((g=i==null?void 0:i.function)==null?void 0:g.name),{maxChatCompletions:u=Rg}=r||{},c=n.tools.map(E=>{if(br(E)){if(!E.$callback)throw new F("Tool given to `.runTools()` that does not have an associated function");return{type:"function",function:{function:E.$callback,name:E.function.name,description:E.function.description||"",parameters:E.function.parameters,parse:E.$parseRaw,strict:!0}}}return E}),f={};for(let E of c)E.type==="function"&&(f[E.function.name||E.function.function.name]=E.function);let h="tools"in n?c.map(E=>E.type==="function"?{type:"function",function:{name:E.function.name||E.function.function.name,parameters:E.function.parameters,description:E.function.description,strict:E.function.strict}}:E):void 0;for(let E of n.messages)this._addMessage(E,!1);for(let E=0;E<u;++E){let d=(v=(await this._createChatCompletion(e,{...o,tool_choice:i,tools:h,messages:[...this.messages]},r)).choices[0])==null?void 0:v.message;if(!d)throw new F("missing message in ChatCompletion response");if(!((w=d.tool_calls)!=null&&w.length))return;for(let m of d.tool_calls){if(m.type!=="function")continue;let _=m.id,{name:x,arguments:C}=m.function,P=f[x];if(P){if(l&&l!==x){let B=`Invalid tool_call: ${JSON.stringify(x)}. ${JSON.stringify(l)} requested. Please try again`;this._addMessage({role:s,tool_call_id:_,content:B});continue}}else{let B=`Invalid tool_call: ${JSON.stringify(x)}. Available options are: ${Object.keys(f).map(K=>JSON.stringify(K)).join(", ")}. Please try again`;this._addMessage({role:s,tool_call_id:_,content:B});continue}let A;try{A=Dd(P)?await P.parse(C):C}catch(B){let K=B instanceof Error?B.message:String(B);this._addMessage({role:s,tool_call_id:_,content:K});continue}let D=await P.function(A,this),R=Je(this,Me,"m",Wd).call(this,D);if(this._addMessage({role:s,tool_call_id:_,content:R}),l)return}}}};Me=new WeakSet,Ud=function(){var e;return(e=Je(this,Me,"m",Ol).call(this).content)!=null?e:null},Ol=function(){var n,r;let e=this.messages.length;for(;e-- >0;){let s=this.messages[e];if(er(s)){let{function_call:i,...a}=s,o={...a,content:(n=s.content)!=null?n:null,refusal:(r=s.refusal)!=null?r:null};return i&&(o.function_call=i),o}}throw new F("stream ended without producing a ChatCompletionMessage with role=assistant")},Bd=function(){var e,n;for(let r=this.messages.length-1;r>=0;r--){let s=this.messages[r];if(er(s)&&(s!=null&&s.function_call))return s.function_call;if(er(s)&&((e=s==null?void 0:s.tool_calls)!=null&&e.length))return(n=s.tool_calls.at(-1))==null?void 0:n.function}},Vd=function(){for(let e=this.messages.length-1;e>=0;e--){let n=this.messages[e];if(Ld(n)&&n.content!=null||jd(n)&&n.content!=null&&typeof n.content=="string"&&this.messages.some(r=>{var s;return r.role==="assistant"&&((s=r.tool_calls)==null?void 0:s.some(i=>i.type==="function"&&i.id===n.tool_call_id))}))return n.content}},Zd=function(){let e={completion_tokens:0,prompt_tokens:0,total_tokens:0};for(let{usage:n}of this._chatCompletions)n&&(e.completion_tokens+=n.completion_tokens,e.prompt_tokens+=n.prompt_tokens,e.total_tokens+=n.total_tokens);return e},Ng=function(e){if(e.n!=null&&e.n>1)throw new F("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.")},Wd=function(e){return typeof e=="string"?e:e===void 0?"undefined":JSON.stringify(e)};var tr=class extends Ys{static runFunctions(e,n,r){let s=new tr,i={...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"runFunctions"}};return s._run(()=>s._runFunctions(e,n,i)),s}static runTools(e,n,r){let s=new tr,i={...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"runTools"}};return s._run(()=>s._runTools(e,n,i)),s}_addMessage(e,n=!0){super._addMessage(e,n),er(e)&&e.content&&this._emit("content",e.content)}};var Se={STR:1,NUM:2,ARR:4,OBJ:8,NULL:16,BOOL:32,NAN:64,INFINITY:128,MINUS_INFINITY:256,INF:384,SPECIAL:496,ATOM:499,COLLECTION:12,ALL:511},Hd=class extends Error{},qd=class extends Error{};function jw(t,e=Se.ALL){if(typeof t!="string")throw new TypeError(`expecting str, got ${typeof t}`);if(!t.trim())throw new Error(`${t} is empty`);return $w(t.trim(),e)}var $w=(t,e)=>{let n=t.length,r=0,s=h=>{throw new Hd(`${h} at position ${r}`)},i=h=>{throw new qd(`${h} at position ${r}`)},a=()=>(f(),r>=n&&s("Unexpected end of input"),t[r]==='"'?o():t[r]==="{"?l():t[r]==="["?u():t.substring(r,r+4)==="null"||Se.NULL&e&&n-r<4&&"null".startsWith(t.substring(r))?(r+=4,null):t.substring(r,r+4)==="true"||Se.BOOL&e&&n-r<4&&"true".startsWith(t.substring(r))?(r+=4,!0):t.substring(r,r+5)==="false"||Se.BOOL&e&&n-r<5&&"false".startsWith(t.substring(r))?(r+=5,!1):t.substring(r,r+8)==="Infinity"||Se.INFINITY&e&&n-r<8&&"Infinity".startsWith(t.substring(r))?(r+=8,1/0):t.substring(r,r+9)==="-Infinity"||Se.MINUS_INFINITY&e&&1<n-r&&n-r<9&&"-Infinity".startsWith(t.substring(r))?(r+=9,-1/0):t.substring(r,r+3)==="NaN"||Se.NAN&e&&n-r<3&&"NaN".startsWith(t.substring(r))?(r+=3,NaN):c()),o=()=>{let h=r,g=!1;for(r++;r<n&&(t[r]!=='"'||g&&t[r-1]==="\\");)g=t[r]==="\\"?!g:!1,r++;if(t.charAt(r)=='"')try{return JSON.parse(t.substring(h,++r-Number(g)))}catch(v){i(String(v))}else if(Se.STR&e)try{return JSON.parse(t.substring(h,r-Number(g))+'"')}catch(v){return JSON.parse(t.substring(h,t.lastIndexOf("\\"))+'"')}s("Unterminated string literal")},l=()=>{r++,f();let h={};try{for(;t[r]!=="}";){if(f(),r>=n&&Se.OBJ&e)return h;let g=o();f(),r++;try{let v=a();Object.defineProperty(h,g,{value:v,writable:!0,enumerable:!0,configurable:!0})}catch(v){if(Se.OBJ&e)return h;throw v}f(),t[r]===","&&r++}}catch(g){if(Se.OBJ&e)return h;s("Expected '}' at end of object")}return r++,h},u=()=>{r++;let h=[];try{for(;t[r]!=="]";)h.push(a()),f(),t[r]===","&&r++}catch(g){if(Se.ARR&e)return h;s("Expected ']' at end of array")}return r++,h},c=()=>{if(r===0){t==="-"&&Se.NUM&e&&s("Not sure what '-' is");try{return JSON.parse(t)}catch(g){if(Se.NUM&e)try{return t[t.length-1]==="."?JSON.parse(t.substring(0,t.lastIndexOf("."))):JSON.parse(t.substring(0,t.lastIndexOf("e")))}catch(v){}i(String(g))}}let h=r;for(t[r]==="-"&&r++;t[r]&&!",]}".includes(t[r]);)r++;r==n&&!(Se.NUM&e)&&s("Unterminated number literal");try{return JSON.parse(t.substring(h,r))}catch(g){t.substring(h,r)==="-"&&Se.NUM&e&&s("Not sure what '-' is");try{return JSON.parse(t.substring(h,t.lastIndexOf("e")))}catch(v){i(String(v))}}},f=()=>{for(;r<n&&` 
\r	`.includes(t[r]);)r++};return a()},Kd=t=>jw(t,Se.ALL^Se.NUM);var Gs=function(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n},J=function(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)},ve,wn,ei,nr,Qd,Rl,Xd,Jd,Yd,Nl,Gd,bg,xn=class extends Ys{constructor(e){super(),ve.add(this),wn.set(this,void 0),ei.set(this,void 0),nr.set(this,void 0),Gs(this,wn,e,"f"),Gs(this,ei,[],"f")}get currentChatCompletionSnapshot(){return J(this,nr,"f")}static fromReadableStream(e){let n=new xn(null);return n._run(()=>n._fromReadableStream(e)),n}static createChatCompletion(e,n,r){let s=new xn(n);return s._run(()=>s._runChatCompletion(e,{...n,stream:!0},{...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"stream"}})),s}async _createChatCompletion(e,n,r){var a;super._createChatCompletion;let s=r==null?void 0:r.signal;s&&(s.aborted&&this.controller.abort(),s.addEventListener("abort",()=>this.controller.abort())),J(this,ve,"m",Qd).call(this);let i=await e.chat.completions.create({...n,stream:!0},{...r,signal:this.controller.signal});this._connected();for await(let o of i)J(this,ve,"m",Xd).call(this,o);if((a=i.controller.signal)!=null&&a.aborted)throw new ke;return this._addChatCompletion(J(this,ve,"m",Nl).call(this))}async _fromReadableStream(e,n){var a;let r=n==null?void 0:n.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",()=>this.controller.abort())),J(this,ve,"m",Qd).call(this),this._connected();let s=ze.fromReadableStream(e,this.controller),i;for await(let o of s)i&&i!==o.id&&this._addChatCompletion(J(this,ve,"m",Nl).call(this)),J(this,ve,"m",Xd).call(this,o),i=o.id;if((a=s.controller.signal)!=null&&a.aborted)throw new ke;return this._addChatCompletion(J(this,ve,"m",Nl).call(this))}[(wn=new WeakMap,ei=new WeakMap,nr=new WeakMap,ve=new WeakSet,Qd=function(){this.ended||Gs(this,nr,void 0,"f")},Rl=function(n){let r=J(this,ei,"f")[n.index];return r||(r={content_done:!1,refusal_done:!1,logprobs_content_done:!1,logprobs_refusal_done:!1,done_tool_calls:new Set,current_tool_call_index:null},J(this,ei,"f")[n.index]=r,r)},Xd=function(n){var s,i,a,o,l,u,c,f,h,g,v,w,E,p,d,m,_,x,C,P;if(this.ended)return;let r=J(this,ve,"m",bg).call(this,n);this._emit("chunk",n,r);for(let A of n.choices){let D=r.choices[A.index];A.delta.content!=null&&((s=D.message)==null?void 0:s.role)==="assistant"&&((i=D.message)!=null&&i.content)&&(this._emit("content",A.delta.content,D.message.content),this._emit("content.delta",{delta:A.delta.content,snapshot:D.message.content,parsed:D.message.parsed})),A.delta.refusal!=null&&((a=D.message)==null?void 0:a.role)==="assistant"&&((o=D.message)!=null&&o.refusal)&&this._emit("refusal.delta",{delta:A.delta.refusal,snapshot:D.message.refusal}),((l=A.logprobs)==null?void 0:l.content)!=null&&((u=D.message)==null?void 0:u.role)==="assistant"&&this._emit("logprobs.content.delta",{content:(c=A.logprobs)==null?void 0:c.content,snapshot:(h=(f=D.logprobs)==null?void 0:f.content)!=null?h:[]}),((g=A.logprobs)==null?void 0:g.refusal)!=null&&((v=D.message)==null?void 0:v.role)==="assistant"&&this._emit("logprobs.refusal.delta",{refusal:(w=A.logprobs)==null?void 0:w.refusal,snapshot:(p=(E=D.logprobs)==null?void 0:E.refusal)!=null?p:[]});let R=J(this,ve,"m",Rl).call(this,D);D.finish_reason&&(J(this,ve,"m",Yd).call(this,D),R.current_tool_call_index!=null&&J(this,ve,"m",Jd).call(this,D,R.current_tool_call_index));for(let B of(d=A.delta.tool_calls)!=null?d:[])R.current_tool_call_index!==B.index&&(J(this,ve,"m",Yd).call(this,D),R.current_tool_call_index!=null&&J(this,ve,"m",Jd).call(this,D,R.current_tool_call_index)),R.current_tool_call_index=B.index;for(let B of(m=A.delta.tool_calls)!=null?m:[]){let K=(_=D.message.tool_calls)==null?void 0:_[B.index];K!=null&&K.type&&((K==null?void 0:K.type)==="function"?this._emit("tool_calls.function.arguments.delta",{name:(x=K.function)==null?void 0:x.name,index:B.index,arguments:K.function.arguments,parsed_arguments:K.function.parsed_arguments,arguments_delta:(P=(C=B.function)==null?void 0:C.arguments)!=null?P:""}):(K==null||K.type,void 0))}}},Jd=function(n,r){var a,o,l;if(J(this,ve,"m",Rl).call(this,n).done_tool_calls.has(r))return;let i=(a=n.message.tool_calls)==null?void 0:a[r];if(!i)throw new Error("no tool call snapshot");if(!i.type)throw new Error("tool call snapshot missing `type`");if(i.type==="function"){let u=(l=(o=J(this,wn,"f"))==null?void 0:o.tools)==null?void 0:l.find(c=>c.type==="function"&&c.function.name===i.function.name);this._emit("tool_calls.function.arguments.done",{name:i.function.name,index:r,arguments:i.function.arguments,parsed_arguments:br(u)?u.$parseRaw(i.function.arguments):u!=null&&u.function.strict?JSON.parse(i.function.arguments):null})}else i.type},Yd=function(n){var s,i;let r=J(this,ve,"m",Rl).call(this,n);if(n.message.content&&!r.content_done){r.content_done=!0;let a=J(this,ve,"m",Gd).call(this);this._emit("content.done",{content:n.message.content,parsed:a?a.$parseRaw(n.message.content):null})}n.message.refusal&&!r.refusal_done&&(r.refusal_done=!0,this._emit("refusal.done",{refusal:n.message.refusal})),(s=n.logprobs)!=null&&s.content&&!r.logprobs_content_done&&(r.logprobs_content_done=!0,this._emit("logprobs.content.done",{content:n.logprobs.content})),(i=n.logprobs)!=null&&i.refusal&&!r.logprobs_refusal_done&&(r.logprobs_refusal_done=!0,this._emit("logprobs.refusal.done",{refusal:n.logprobs.refusal}))},Nl=function(){if(this.ended)throw new F("stream has ended, this shouldn't happen");let n=J(this,nr,"f");if(!n)throw new F("request ended without sending any chunks");return Gs(this,nr,void 0,"f"),Gs(this,ei,[],"f"),Fw(n,J(this,wn,"f"))},Gd=function(){var r;let n=(r=J(this,wn,"f"))==null?void 0:r.response_format;return Fd(n)?n:null},bg=function(n){var c,f,h,g,v,w;var r,s,i,a;let o=J(this,nr,"f"),{choices:l,...u}=n;o?Object.assign(o,u):o=Gs(this,nr,{...u,choices:[]},"f");for(let{delta:E,finish_reason:p,index:d,logprobs:m=null,..._}of n.choices){let x=o.choices[d];if(x||(x=o.choices[d]={finish_reason:p,index:d,message:{},logprobs:m,..._}),m)if(!x.logprobs)x.logprobs=Object.assign({},m);else{let{content:K,refusal:De,...an}=m;Object.assign(x.logprobs,an),K&&((c=(r=x.logprobs).content)!=null||(r.content=[]),x.logprobs.content.push(...K)),De&&((f=(s=x.logprobs).refusal)!=null||(s.refusal=[]),x.logprobs.refusal.push(...De))}if(p&&(x.finish_reason=p,J(this,wn,"f")&&zd(J(this,wn,"f")))){if(p==="length")throw new Us;if(p==="content_filter")throw new Bs}if(Object.assign(x,_),!E)continue;let{content:C,refusal:P,function_call:A,role:D,tool_calls:R,...B}=E;if(Object.assign(x.message,B),P&&(x.message.refusal=(x.message.refusal||"")+P),D&&(x.message.role=D),A&&(x.message.function_call?(A.name&&(x.message.function_call.name=A.name),A.arguments&&((h=(i=x.message.function_call).arguments)!=null||(i.arguments=""),x.message.function_call.arguments+=A.arguments)):x.message.function_call=A),C&&(x.message.content=(x.message.content||"")+C,!x.message.refusal&&J(this,ve,"m",Gd).call(this)&&(x.message.parsed=Kd(x.message.content))),R){x.message.tool_calls||(x.message.tool_calls=[]);for(let{index:K,id:De,type:an,function:Ye,...Ev}of R){let $t=(g=(a=x.message.tool_calls)[K])!=null?g:a[K]={};Object.assign($t,Ev),De&&($t.id=De),an&&($t.type=an),Ye&&((w=$t.function)!=null||($t.function={name:(v=Ye.name)!=null?v:"",arguments:""})),Ye!=null&&Ye.name&&($t.function.name=Ye.name),Ye!=null&&Ye.arguments&&($t.function.arguments+=Ye.arguments,Ig(J(this,wn,"f"),$t)&&($t.function.parsed_arguments=Kd($t.function.arguments)))}}}return o},Symbol.asyncIterator)](){let e=[],n=[],r=!1;return this.on("chunk",s=>{let i=n.shift();i?i.resolve(s):e.push(s)}),this.on("end",()=>{r=!0;for(let s of n)s.resolve(void 0);n.length=0}),this.on("abort",s=>{r=!0;for(let i of n)i.reject(s);n.length=0}),this.on("error",s=>{r=!0;for(let i of n)i.reject(s);n.length=0}),{next:async()=>e.length?{value:e.shift(),done:!1}:r?{value:void 0,done:!0}:new Promise((i,a)=>n.push({resolve:i,reject:a})).then(i=>i?{value:i,done:!1}:{value:void 0,done:!0}),return:async()=>(this.abort(),{value:void 0,done:!0})}}toReadableStream(){return new ze(this[Symbol.asyncIterator].bind(this),this.controller).toReadableStream()}};function Fw(t,e){let{id:n,choices:r,created:s,model:i,system_fingerprint:a,...o}=t,l={...o,id:n,choices:r.map(({message:u,finish_reason:c,index:f,logprobs:h,...g})=>{var m,_,x;if(!c)throw new F(`missing finish_reason for choice ${f}`);let{content:v=null,function_call:w,tool_calls:E,...p}=u,d=u.role;if(!d)throw new F(`missing role for choice ${f}`);if(w){let{arguments:C,name:P}=w;if(C==null)throw new F(`missing function_call.arguments for choice ${f}`);if(!P)throw new F(`missing function_call.name for choice ${f}`);return{...g,message:{content:v,function_call:{arguments:C,name:P},role:d,refusal:(m=u.refusal)!=null?m:null},finish_reason:c,index:f,logprobs:h}}return E?{...g,index:f,finish_reason:c,logprobs:h,message:{...p,role:d,content:v,refusal:(_=u.refusal)!=null?_:null,tool_calls:E.map((C,P)=>{let{function:A,type:D,id:R,...B}=C,{arguments:K,name:De,...an}=A||{};if(R==null)throw new F(`missing choices[${f}].tool_calls[${P}].id
${bl(t)}`);if(D==null)throw new F(`missing choices[${f}].tool_calls[${P}].type
${bl(t)}`);if(De==null)throw new F(`missing choices[${f}].tool_calls[${P}].function.name
${bl(t)}`);if(K==null)throw new F(`missing choices[${f}].tool_calls[${P}].function.arguments
${bl(t)}`);return{...B,id:R,type:D,function:{...an,name:De,arguments:K}}})}}:{...g,message:{...p,content:v,role:d,refusal:(x=u.refusal)!=null?x:null},finish_reason:c,index:f,logprobs:h}}),created:s,model:i,object:"chat.completion",...a?{system_fingerprint:a}:{}};return Tg(l,e)}function bl(t){return JSON.stringify(t)}var kn=class extends xn{static fromReadableStream(e){let n=new kn(null);return n._run(()=>n._fromReadableStream(e)),n}static runFunctions(e,n,r){let s=new kn(null),i={...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"runFunctions"}};return s._run(()=>s._runFunctions(e,n,i)),s}static runTools(e,n,r){let s=new kn(n),i={...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"runTools"}};return s._run(()=>s._runTools(e,n,i)),s}};var Oa=class extends N{parse(e,n){return Og(e.tools),this._client.chat.completions.create(e,{...n,headers:{...n==null?void 0:n.headers,"X-Stainless-Helper-Method":"beta.chat.completions.parse"}})._thenUnwrap(r=>Ia(r,e))}runFunctions(e,n){return e.stream?kn.runFunctions(this._client,e,n):tr.runFunctions(this._client,e,n)}runTools(e,n){return e.stream?kn.runTools(this._client,e,n):tr.runTools(this._client,e,n)}stream(e,n){return xn.createChatCompletion(this._client,e,n)}};var ti=class extends N{constructor(){super(...arguments),this.completions=new Oa(this._client)}};(function(t){t.Completions=Oa})(ti||(ti={}));var M=function(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)},at=function(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n},Te,ef,Xt,Ml,Nt,Dr,ni,Mr,jl,ot,Dl,Ll,ba,Ra,Na,Mg,Dg,Lg,jg,$g,Fg,zg,Ue=class extends Js{constructor(){super(...arguments),Te.add(this),ef.set(this,[]),Xt.set(this,{}),Ml.set(this,{}),Nt.set(this,void 0),Dr.set(this,void 0),ni.set(this,void 0),Mr.set(this,void 0),jl.set(this,void 0),ot.set(this,void 0),Dl.set(this,void 0),Ll.set(this,void 0),ba.set(this,void 0)}[(ef=new WeakMap,Xt=new WeakMap,Ml=new WeakMap,Nt=new WeakMap,Dr=new WeakMap,ni=new WeakMap,Mr=new WeakMap,jl=new WeakMap,ot=new WeakMap,Dl=new WeakMap,Ll=new WeakMap,ba=new WeakMap,Te=new WeakSet,Symbol.asyncIterator)](){let e=[],n=[],r=!1;return this.on("event",s=>{let i=n.shift();i?i.resolve(s):e.push(s)}),this.on("end",()=>{r=!0;for(let s of n)s.resolve(void 0);n.length=0}),this.on("abort",s=>{r=!0;for(let i of n)i.reject(s);n.length=0}),this.on("error",s=>{r=!0;for(let i of n)i.reject(s);n.length=0}),{next:async()=>e.length?{value:e.shift(),done:!1}:r?{value:void 0,done:!0}:new Promise((i,a)=>n.push({resolve:i,reject:a})).then(i=>i?{value:i,done:!1}:{value:void 0,done:!0}),return:async()=>(this.abort(),{value:void 0,done:!0})}}static fromReadableStream(e){let n=new Ue;return n._run(()=>n._fromReadableStream(e)),n}async _fromReadableStream(e,n){var i;let r=n==null?void 0:n.signal;r&&(r.aborted&&this.controller.abort(),r.addEventListener("abort",()=>this.controller.abort())),this._connected();let s=ze.fromReadableStream(e,this.controller);for await(let a of s)M(this,Te,"m",Ra).call(this,a);if((i=s.controller.signal)!=null&&i.aborted)throw new ke;return this._addRun(M(this,Te,"m",Na).call(this))}toReadableStream(){return new ze(this[Symbol.asyncIterator].bind(this),this.controller).toReadableStream()}static createToolAssistantStream(e,n,r,s,i){let a=new Ue;return a._run(()=>a._runToolAssistantStream(e,n,r,s,{...i,headers:{...i==null?void 0:i.headers,"X-Stainless-Helper-Method":"stream"}})),a}async _createToolAssistantStream(e,n,r,s,i){var u;let a=i==null?void 0:i.signal;a&&(a.aborted&&this.controller.abort(),a.addEventListener("abort",()=>this.controller.abort()));let o={...s,stream:!0},l=await e.submitToolOutputs(n,r,o,{...i,signal:this.controller.signal});this._connected();for await(let c of l)M(this,Te,"m",Ra).call(this,c);if((u=l.controller.signal)!=null&&u.aborted)throw new ke;return this._addRun(M(this,Te,"m",Na).call(this))}static createThreadAssistantStream(e,n,r){let s=new Ue;return s._run(()=>s._threadAssistantStream(e,n,{...r,headers:{...r==null?void 0:r.headers,"X-Stainless-Helper-Method":"stream"}})),s}static createAssistantStream(e,n,r,s){let i=new Ue;return i._run(()=>i._runAssistantStream(e,n,r,{...s,headers:{...s==null?void 0:s.headers,"X-Stainless-Helper-Method":"stream"}})),i}currentEvent(){return M(this,Dl,"f")}currentRun(){return M(this,Ll,"f")}currentMessageSnapshot(){return M(this,Nt,"f")}currentRunStepSnapshot(){return M(this,ba,"f")}async finalRunSteps(){return await this.done(),Object.values(M(this,Xt,"f"))}async finalMessages(){return await this.done(),Object.values(M(this,Ml,"f"))}async finalRun(){if(await this.done(),!M(this,Dr,"f"))throw Error("Final run was not received.");return M(this,Dr,"f")}async _createThreadAssistantStream(e,n,r){var o;let s=r==null?void 0:r.signal;s&&(s.aborted&&this.controller.abort(),s.addEventListener("abort",()=>this.controller.abort()));let i={...n,stream:!0},a=await e.createAndRun(i,{...r,signal:this.controller.signal});this._connected();for await(let l of a)M(this,Te,"m",Ra).call(this,l);if((o=a.controller.signal)!=null&&o.aborted)throw new ke;return this._addRun(M(this,Te,"m",Na).call(this))}async _createAssistantStream(e,n,r,s){var l;let i=s==null?void 0:s.signal;i&&(i.aborted&&this.controller.abort(),i.addEventListener("abort",()=>this.controller.abort()));let a={...r,stream:!0},o=await e.create(n,a,{...s,signal:this.controller.signal});this._connected();for await(let u of o)M(this,Te,"m",Ra).call(this,u);if((l=o.controller.signal)!=null&&l.aborted)throw new ke;return this._addRun(M(this,Te,"m",Na).call(this))}static accumulateDelta(e,n){for(let[r,s]of Object.entries(n)){if(!e.hasOwnProperty(r)){e[r]=s;continue}let i=e[r];if(i==null){e[r]=s;continue}if(r==="index"||r==="type"){e[r]=s;continue}if(typeof i=="string"&&typeof s=="string")i+=s;else if(typeof i=="number"&&typeof s=="number")i+=s;else if(Ea(i)&&Ea(s))i=this.accumulateDelta(i,s);else if(Array.isArray(i)&&Array.isArray(s)){if(i.every(a=>typeof a=="string"||typeof a=="number")){i.push(...s);continue}for(let a of s){if(!Ea(a))throw new Error(`Expected array delta entry to be an object but got: ${a}`);let o=a.index;if(o==null)throw console.error(a),new Error("Expected array delta entry to have an `index` property");if(typeof o!="number")throw new Error(`Expected array delta entry \`index\` property to be a number but got ${o}`);let l=i[o];l==null?i.push(a):i[o]=this.accumulateDelta(l,a)}continue}else throw Error(`Unhandled record type: ${r}, deltaValue: ${s}, accValue: ${i}`);e[r]=i}return e}_addRun(e){return e}async _threadAssistantStream(e,n,r){return await this._createThreadAssistantStream(n,e,r)}async _runAssistantStream(e,n,r,s){return await this._createAssistantStream(n,e,r,s)}async _runToolAssistantStream(e,n,r,s,i){return await this._createToolAssistantStream(r,e,n,s,i)}};Ra=function(e){if(!this.ended)switch(at(this,Dl,e,"f"),M(this,Te,"m",Lg).call(this,e),e.event){case"thread.created":break;case"thread.run.created":case"thread.run.queued":case"thread.run.in_progress":case"thread.run.requires_action":case"thread.run.completed":case"thread.run.failed":case"thread.run.cancelling":case"thread.run.cancelled":case"thread.run.expired":M(this,Te,"m",zg).call(this,e);break;case"thread.run.step.created":case"thread.run.step.in_progress":case"thread.run.step.delta":case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":M(this,Te,"m",Dg).call(this,e);break;case"thread.message.created":case"thread.message.in_progress":case"thread.message.delta":case"thread.message.completed":case"thread.message.incomplete":M(this,Te,"m",Mg).call(this,e);break;case"error":throw new Error("Encountered an error event in event processing - errors should be processed earlier")}},Na=function(){if(this.ended)throw new F("stream has ended, this shouldn't happen");if(!M(this,Dr,"f"))throw Error("Final run has not been received");return M(this,Dr,"f")},Mg=function(e){let[n,r]=M(this,Te,"m",$g).call(this,e,M(this,Nt,"f"));at(this,Nt,n,"f"),M(this,Ml,"f")[n.id]=n;for(let s of r){let i=n.content[s.index];(i==null?void 0:i.type)=="text"&&this._emit("textCreated",i.text)}switch(e.event){case"thread.message.created":this._emit("messageCreated",e.data);break;case"thread.message.in_progress":break;case"thread.message.delta":if(this._emit("messageDelta",e.data.delta,n),e.data.delta.content)for(let s of e.data.delta.content){if(s.type=="text"&&s.text){let i=s.text,a=n.content[s.index];if(a&&a.type=="text")this._emit("textDelta",i,a.text);else throw Error("The snapshot associated with this text delta is not text or missing")}if(s.index!=M(this,ni,"f")){if(M(this,Mr,"f"))switch(M(this,Mr,"f").type){case"text":this._emit("textDone",M(this,Mr,"f").text,M(this,Nt,"f"));break;case"image_file":this._emit("imageFileDone",M(this,Mr,"f").image_file,M(this,Nt,"f"));break}at(this,ni,s.index,"f")}at(this,Mr,n.content[s.index],"f")}break;case"thread.message.completed":case"thread.message.incomplete":if(M(this,ni,"f")!==void 0){let s=e.data.content[M(this,ni,"f")];if(s)switch(s.type){case"image_file":this._emit("imageFileDone",s.image_file,M(this,Nt,"f"));break;case"text":this._emit("textDone",s.text,M(this,Nt,"f"));break}}M(this,Nt,"f")&&this._emit("messageDone",e.data),at(this,Nt,void 0,"f")}},Dg=function(e){let n=M(this,Te,"m",jg).call(this,e);switch(at(this,ba,n,"f"),e.event){case"thread.run.step.created":this._emit("runStepCreated",e.data);break;case"thread.run.step.delta":let r=e.data.delta;if(r.step_details&&r.step_details.type=="tool_calls"&&r.step_details.tool_calls&&n.step_details.type=="tool_calls")for(let i of r.step_details.tool_calls)i.index==M(this,jl,"f")?this._emit("toolCallDelta",i,n.step_details.tool_calls[i.index]):(M(this,ot,"f")&&this._emit("toolCallDone",M(this,ot,"f")),at(this,jl,i.index,"f"),at(this,ot,n.step_details.tool_calls[i.index],"f"),M(this,ot,"f")&&this._emit("toolCallCreated",M(this,ot,"f")));this._emit("runStepDelta",e.data.delta,n);break;case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":at(this,ba,void 0,"f"),e.data.step_details.type=="tool_calls"&&M(this,ot,"f")&&(this._emit("toolCallDone",M(this,ot,"f")),at(this,ot,void 0,"f")),this._emit("runStepDone",e.data,n);break;case"thread.run.step.in_progress":break}},Lg=function(e){M(this,ef,"f").push(e),this._emit("event",e)},jg=function(e){switch(e.event){case"thread.run.step.created":return M(this,Xt,"f")[e.data.id]=e.data,e.data;case"thread.run.step.delta":let n=M(this,Xt,"f")[e.data.id];if(!n)throw Error("Received a RunStepDelta before creation of a snapshot");let r=e.data;if(r.delta){let s=Ue.accumulateDelta(n,r.delta);M(this,Xt,"f")[e.data.id]=s}return M(this,Xt,"f")[e.data.id];case"thread.run.step.completed":case"thread.run.step.failed":case"thread.run.step.cancelled":case"thread.run.step.expired":case"thread.run.step.in_progress":M(this,Xt,"f")[e.data.id]=e.data;break}if(M(this,Xt,"f")[e.data.id])return M(this,Xt,"f")[e.data.id];throw new Error("No snapshot available")},$g=function(e,n){let r=[];switch(e.event){case"thread.message.created":return[e.data,r];case"thread.message.delta":if(!n)throw Error("Received a delta with no existing snapshot (there should be one from message creation)");let s=e.data;if(s.delta.content)for(let i of s.delta.content)if(i.index in n.content){let a=n.content[i.index];n.content[i.index]=M(this,Te,"m",Fg).call(this,i,a)}else n.content[i.index]=i,r.push(i);return[n,r];case"thread.message.in_progress":case"thread.message.completed":case"thread.message.incomplete":if(n)return[n,r];throw Error("Received thread message event with no existing snapshot")}throw Error("Tried to accumulate a non-message event")},Fg=function(e,n){return Ue.accumulateDelta(n,e)},zg=function(e){switch(at(this,Ll,e.data,"f"),e.event){case"thread.run.created":break;case"thread.run.queued":break;case"thread.run.in_progress":break;case"thread.run.requires_action":case"thread.run.cancelled":case"thread.run.failed":case"thread.run.completed":case"thread.run.expired":at(this,Dr,e.data,"f"),M(this,ot,"f")&&(this._emit("toolCallDone",M(this,ot,"f")),at(this,ot,void 0,"f"));break;case"thread.run.cancelling":break}};var Lr=class extends N{create(e,n,r){return this._client.post(`/threads/${e}/messages`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}retrieve(e,n,r){return this._client.get(`/threads/${e}/messages/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}update(e,n,r,s){return this._client.post(`/threads/${e}/messages/${n}`,{body:r,...s,headers:{"OpenAI-Beta":"assistants=v2",...s==null?void 0:s.headers}})}list(e,n={},r){return ee(n)?this.list(e,{},n):this._client.getAPIList(`/threads/${e}/messages`,ri,{query:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}del(e,n,r){return this._client.delete(`/threads/${e}/messages/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}},ri=class extends le{};Lr.MessagesPage=ri;var jr=class extends N{retrieve(e,n,r,s={},i){return ee(s)?this.retrieve(e,n,r,{},s):this._client.get(`/threads/${e}/runs/${n}/steps/${r}`,{query:s,...i,headers:{"OpenAI-Beta":"assistants=v2",...i==null?void 0:i.headers}})}list(e,n,r={},s){return ee(r)?this.list(e,n,{},r):this._client.getAPIList(`/threads/${e}/runs/${n}/steps`,si,{query:r,...s,headers:{"OpenAI-Beta":"assistants=v2",...s==null?void 0:s.headers}})}},si=class extends le{};jr.RunStepsPage=si;var Sn=class extends N{constructor(){super(...arguments),this.steps=new jr(this._client)}create(e,n,r){var a;let{include:s,...i}=n;return this._client.post(`/threads/${e}/runs`,{query:{include:s},body:i,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers},stream:(a=n.stream)!=null?a:!1})}retrieve(e,n,r){return this._client.get(`/threads/${e}/runs/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}update(e,n,r,s){return this._client.post(`/threads/${e}/runs/${n}`,{body:r,...s,headers:{"OpenAI-Beta":"assistants=v2",...s==null?void 0:s.headers}})}list(e,n={},r){return ee(n)?this.list(e,{},n):this._client.getAPIList(`/threads/${e}/runs`,ii,{query:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}cancel(e,n,r){return this._client.post(`/threads/${e}/runs/${n}/cancel`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}async createAndPoll(e,n,r){let s=await this.create(e,n,r);return await this.poll(e,s.id,r)}createAndStream(e,n,r){return Ue.createAssistantStream(e,this._client.beta.threads.runs,n,r)}async poll(e,n,r){let s={...r==null?void 0:r.headers,"X-Stainless-Poll-Helper":"true"};for(r!=null&&r.pollIntervalMs&&(s["X-Stainless-Custom-Poll-Interval"]=r.pollIntervalMs.toString());;){let{data:i,response:a}=await this.retrieve(e,n,{...r,headers:{...r==null?void 0:r.headers,...s}}).withResponse();switch(i.status){case"queued":case"in_progress":case"cancelling":let o=5e3;if(r!=null&&r.pollIntervalMs)o=r.pollIntervalMs;else{let l=a.headers.get("openai-poll-after-ms");if(l){let u=parseInt(l);isNaN(u)||(o=u)}}await vn(o);break;case"requires_action":case"incomplete":case"cancelled":case"completed":case"failed":case"expired":return i}}}stream(e,n,r){return Ue.createAssistantStream(e,this._client.beta.threads.runs,n,r)}submitToolOutputs(e,n,r,s){var i;return this._client.post(`/threads/${e}/runs/${n}/submit_tool_outputs`,{body:r,...s,headers:{"OpenAI-Beta":"assistants=v2",...s==null?void 0:s.headers},stream:(i=r.stream)!=null?i:!1})}async submitToolOutputsAndPoll(e,n,r,s){let i=await this.submitToolOutputs(e,n,r,s);return await this.poll(e,i.id,s)}submitToolOutputsStream(e,n,r,s){return Ue.createToolAssistantStream(e,n,this._client.beta.threads.runs,r,s)}},ii=class extends le{};Sn.RunsPage=ii;Sn.Steps=jr;Sn.RunStepsPage=si;var Jt=class extends N{constructor(){super(...arguments),this.runs=new Sn(this._client),this.messages=new Lr(this._client)}create(e={},n){return ee(e)?this.create({},e):this._client.post("/threads",{body:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}retrieve(e,n){return this._client.get(`/threads/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}update(e,n,r){return this._client.post(`/threads/${e}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}del(e,n){return this._client.delete(`/threads/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}createAndRun(e,n){var r;return this._client.post("/threads/runs",{body:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers},stream:(r=e.stream)!=null?r:!1})}async createAndRunPoll(e,n){let r=await this.createAndRun(e,n);return await this.runs.poll(r.thread_id,r.id,n)}createAndRunStream(e,n){return Ue.createThreadAssistantStream(e,this._client.beta.threads,n)}};Jt.Runs=Sn;Jt.RunsPage=ii;Jt.Messages=Lr;Jt.MessagesPage=ri;var Ug=async t=>{let e=await Promise.allSettled(t),n=e.filter(s=>s.status==="rejected");if(n.length){for(let s of n)console.error(s.reason);throw new Error(`${n.length} promise(s) failed - see the above errors`)}let r=[];for(let s of e)s.status==="fulfilled"&&r.push(s.value);return r};var $r=class extends N{create(e,n,r){return this._client.post(`/vector_stores/${e}/files`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}retrieve(e,n,r){return this._client.get(`/vector_stores/${e}/files/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}list(e,n={},r){return ee(n)?this.list(e,{},n):this._client.getAPIList(`/vector_stores/${e}/files`,rr,{query:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}del(e,n,r){return this._client.delete(`/vector_stores/${e}/files/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}async createAndPoll(e,n,r){let s=await this.create(e,n,r);return await this.poll(e,s.id,r)}async poll(e,n,r){let s={...r==null?void 0:r.headers,"X-Stainless-Poll-Helper":"true"};for(r!=null&&r.pollIntervalMs&&(s["X-Stainless-Custom-Poll-Interval"]=r.pollIntervalMs.toString());;){let i=await this.retrieve(e,n,{...r,headers:s}).withResponse(),a=i.data;switch(a.status){case"in_progress":let o=5e3;if(r!=null&&r.pollIntervalMs)o=r.pollIntervalMs;else{let l=i.response.headers.get("openai-poll-after-ms");if(l){let u=parseInt(l);isNaN(u)||(o=u)}}await vn(o);break;case"failed":case"completed":return a}}}async upload(e,n,r){let s=await this._client.files.create({file:n,purpose:"assistants"},r);return this.create(e,{file_id:s.id},r)}async uploadAndPoll(e,n,r){let s=await this.upload(e,n,r);return await this.poll(e,s.id,r)}},rr=class extends le{};$r.VectorStoreFilesPage=rr;var ai=class extends N{create(e,n,r){return this._client.post(`/vector_stores/${e}/file_batches`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}retrieve(e,n,r){return this._client.get(`/vector_stores/${e}/file_batches/${n}`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}cancel(e,n,r){return this._client.post(`/vector_stores/${e}/file_batches/${n}/cancel`,{...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}async createAndPoll(e,n,r){let s=await this.create(e,n);return await this.poll(e,s.id,r)}listFiles(e,n,r={},s){return ee(r)?this.listFiles(e,n,{},r):this._client.getAPIList(`/vector_stores/${e}/file_batches/${n}/files`,rr,{query:r,...s,headers:{"OpenAI-Beta":"assistants=v2",...s==null?void 0:s.headers}})}async poll(e,n,r){let s={...r==null?void 0:r.headers,"X-Stainless-Poll-Helper":"true"};for(r!=null&&r.pollIntervalMs&&(s["X-Stainless-Custom-Poll-Interval"]=r.pollIntervalMs.toString());;){let{data:i,response:a}=await this.retrieve(e,n,{...r,headers:s}).withResponse();switch(i.status){case"in_progress":let o=5e3;if(r!=null&&r.pollIntervalMs)o=r.pollIntervalMs;else{let l=a.headers.get("openai-poll-after-ms");if(l){let u=parseInt(l);isNaN(u)||(o=u)}}await vn(o);break;case"failed":case"cancelled":case"completed":return i}}}async uploadAndPoll(e,{files:n,fileIds:r=[]},s){var h;if(n==null||n.length==0)throw new Error("No `files` provided to process. If you've already uploaded files you should use `.createAndPoll()` instead");let i=(h=s==null?void 0:s.maxConcurrency)!=null?h:5,a=Math.min(i,n.length),o=this._client,l=n.values(),u=[...r];async function c(g){for(let v of g){let w=await o.files.create({file:v,purpose:"assistants"},s);u.push(w.id)}}let f=Array(a).fill(l).map(c);return await Ug(f),await this.createAndPoll(e,{file_ids:u})}};var Yt=class extends N{constructor(){super(...arguments),this.files=new $r(this._client),this.fileBatches=new ai(this._client)}create(e,n){return this._client.post("/vector_stores",{body:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}retrieve(e,n){return this._client.get(`/vector_stores/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}update(e,n,r){return this._client.post(`/vector_stores/${e}`,{body:n,...r,headers:{"OpenAI-Beta":"assistants=v2",...r==null?void 0:r.headers}})}list(e={},n){return ee(e)?this.list({},e):this._client.getAPIList("/vector_stores",oi,{query:e,...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}del(e,n){return this._client.delete(`/vector_stores/${e}`,{...n,headers:{"OpenAI-Beta":"assistants=v2",...n==null?void 0:n.headers}})}},oi=class extends le{};Yt.VectorStoresPage=oi;Yt.Files=$r;Yt.VectorStoreFilesPage=rr;Yt.FileBatches=ai;var _t=class extends N{constructor(){super(...arguments),this.vectorStores=new Yt(this._client),this.chat=new ti(this._client),this.assistants=new Nr(this._client),this.threads=new Jt(this._client)}};_t.VectorStores=Yt;_t.VectorStoresPage=oi;_t.Assistants=Nr;_t.AssistantsPage=Qs;_t.Threads=Jt;var Fr=class extends N{create(e,n){var r;return this._client.post("/completions",{body:e,...n,stream:(r=e.stream)!=null?r:!1})}};var zr=class extends N{create(e,n){return this._client.post("/embeddings",{body:e,...n})}};var sr=class extends N{create(e,n){return this._client.post("/files",vt({body:e,...n}))}retrieve(e,n){return this._client.get(`/files/${e}`,n)}list(e={},n){return ee(e)?this.list({},e):this._client.getAPIList("/files",Ur,{query:e,...n})}del(e,n){return this._client.delete(`/files/${e}`,n)}content(e,n){return this._client.get(`/files/${e}/content`,{...n,__binaryResponse:!0})}retrieveContent(e,n){return this._client.get(`/files/${e}/content`,{...n,headers:{Accept:"application/json",...n==null?void 0:n.headers}})}async waitForProcessing(e,{pollInterval:n=5e3,maxWait:r=30*60*1e3}={}){let s=new Set(["processed","error","deleted"]),i=Date.now(),a=await this.retrieve(e);for(;!a.status||!s.has(a.status);)if(await vn(n),a=await this.retrieve(e),Date.now()-i>r)throw new Jn({message:`Giving up on waiting for file ${e} to finish processing after ${r} milliseconds.`});return a}},Ur=class extends le{};sr.FileObjectsPage=Ur;var Br=class extends N{list(e,n={},r){return ee(n)?this.list(e,{},n):this._client.getAPIList(`/fine_tuning/jobs/${e}/checkpoints`,li,{query:n,...r})}},li=class extends le{};Br.FineTuningJobCheckpointsPage=li;var Gt=class extends N{constructor(){super(...arguments),this.checkpoints=new Br(this._client)}create(e,n){return this._client.post("/fine_tuning/jobs",{body:e,...n})}retrieve(e,n){return this._client.get(`/fine_tuning/jobs/${e}`,n)}list(e={},n){return ee(e)?this.list({},e):this._client.getAPIList("/fine_tuning/jobs",ui,{query:e,...n})}cancel(e,n){return this._client.post(`/fine_tuning/jobs/${e}/cancel`,n)}listEvents(e,n={},r){return ee(n)?this.listEvents(e,{},n):this._client.getAPIList(`/fine_tuning/jobs/${e}/events`,ci,{query:n,...r})}},ui=class extends le{},ci=class extends le{};Gt.FineTuningJobsPage=ui;Gt.FineTuningJobEventsPage=ci;Gt.Checkpoints=Br;Gt.FineTuningJobCheckpointsPage=li;var en=class extends N{constructor(){super(...arguments),this.jobs=new Gt(this._client)}};en.Jobs=Gt;en.FineTuningJobsPage=ui;en.FineTuningJobEventsPage=ci;var Vr=class extends N{createVariation(e,n){return this._client.post("/images/variations",vt({body:e,...n}))}edit(e,n){return this._client.post("/images/edits",vt({body:e,...n}))}generate(e,n){return this._client.post("/images/generations",{body:e,...n})}};var ir=class extends N{retrieve(e,n){return this._client.get(`/models/${e}`,n)}list(e){return this._client.getAPIList("/models",Zr,e)}del(e,n){return this._client.delete(`/models/${e}`,n)}},Zr=class extends El{};ir.ModelsPage=Zr;var Wr=class extends N{create(e,n){return this._client.post("/moderations",{body:e,...n})}};var di=class extends N{create(e,n,r){return this._client.post(`/uploads/${e}/parts`,vt({body:n,...r}))}};var ar=class extends N{constructor(){super(...arguments),this.parts=new di(this._client)}create(e,n){return this._client.post("/uploads",{body:e,...n})}cancel(e,n){return this._client.post(`/uploads/${e}/cancel`,n)}complete(e,n,r){return this._client.post(`/uploads/${e}/complete`,{body:n,...r})}};ar.Parts=di;var Bg,V=class extends Sl{constructor({baseURL:e=Sa("OPENAI_BASE_URL"),apiKey:n=Sa("OPENAI_API_KEY"),organization:r=(a=>(a=Sa("OPENAI_ORG_ID"))!=null?a:null)(),project:s=(o=>(o=Sa("OPENAI_PROJECT_ID"))!=null?o:null)(),...i}={}){var u;if(n===void 0)throw new F("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");let l={apiKey:n,organization:r,project:s,...i,baseURL:e||"https://api.openai.com/v1"};if(!l.dangerouslyAllowBrowser&&Pg())throw new F(`It looks like you're running in a browser-like environment.

This is disabled by default, as it risks exposing your secret API credentials to attackers.
If you understand the risks and have appropriate mitigations in place,
you can set the \`dangerouslyAllowBrowser\` option to \`true\`, e.g.,

new OpenAI({ apiKey, dangerouslyAllowBrowser: true });

https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
`);super({baseURL:l.baseURL,timeout:(u=l.timeout)!=null?u:6e5,httpAgent:l.httpAgent,maxRetries:l.maxRetries,fetch:l.fetch}),this.completions=new Fr(this),this.chat=new Yn(this),this.embeddings=new zr(this),this.files=new sr(this),this.images=new Vr(this),this.audio=new Qt(this),this.moderations=new Wr(this),this.models=new ir(this),this.fineTuning=new en(this),this.beta=new _t(this),this.batches=new Gn(this),this.uploads=new ar(this),this._options=l,this.apiKey=n,this.organization=r,this.project=s}defaultQuery(){return this._options.defaultQuery}defaultHeaders(e){return{...super.defaultHeaders(e),"OpenAI-Organization":this.organization,"OpenAI-Project":this.project,...this._options.defaultHeaders}}authHeaders(e){return{Authorization:`Bearer ${this.apiKey}`}}stringifyQuery(e){return xd(e,{arrayFormat:"brackets"})}};Bg=V;V.OpenAI=Bg;V.DEFAULT_TIMEOUT=6e5;V.OpenAIError=F;V.APIError=de;V.APIConnectionError=Xn;V.APIConnectionTimeoutError=Jn;V.APIUserAbortError=ke;V.NotFoundError=ga;V.ConflictError=ya;V.RateLimitError=_a;V.BadRequestError=pa;V.AuthenticationError=ma;V.InternalServerError=wa;V.PermissionDeniedError=ha;V.UnprocessableEntityError=va;V.toFile=Rd;V.fileFromPath=vl;V.Completions=Fr;V.Chat=Yn;V.Embeddings=zr;V.Files=sr;V.FileObjectsPage=Ur;V.Images=Vr;V.Audio=Qt;V.Moderations=Wr;V.Models=ir;V.ModelsPage=Zr;V.FineTuning=en;V.Beta=_t;V.Batches=Gn;V.BatchesPage=Rr;V.Uploads=ar;var Vg=V;var $l=class extends or.PluginSettingTab{constructor(n,r){super(n,r);this.plugin=r}async getModels(){if(!this.plugin.settings.openAIKey)return[];let r=await new Vg({apiKey:this.plugin.settings.openAIKey,baseURL:this.plugin.settings.openAIBaseURL,dangerouslyAllowBrowser:!0}).models.list();return console.dir({models:r}),r.data.map(i=>i.id).sort()}display(){let{containerEl:n}=this;n.empty(),new or.Setting(n).setName("OpenAI Base Url").setDesc("The base url for the openai-compatible API").addText(r=>{r.inputEl.style.width="100%",r.setPlaceholder("https://api.openai.com/v1").setValue(this.plugin.settings.openAIBaseURL).onChange(async s=>{this.plugin.settings.openAIBaseURL=s,await this.plugin.saveSettings()})}),new or.Setting(n).setName("OpenAI API Key").setDesc("Your OpenAI API key").addText(r=>{r.inputEl.style.width="100%",r.setPlaceholder("sk-...").setValue(this.plugin.settings.openAIKey).onChange(async s=>{this.plugin.settings.openAIKey=s,await this.plugin.saveSettings()})}),new or.Setting(n).setName("Default Model").setDesc("The default model to use for the AI").addDropdown(async r=>{r.selectEl.style.width="100%",(await this.getModels()).forEach(i=>{r.addOption(i,i)}),r.setValue(this.plugin.settings.model).onChange(async i=>{this.plugin.settings.model=i,await this.plugin.saveSettings()})}),new or.Setting(n).setName("System Prompt").setDesc("The prompt to use for the AI model").addTextArea(r=>{r.inputEl.rows=5,r.inputEl.style.width="100%",r.setPlaceholder("You are a helpful AI assistant").setValue(this.plugin.settings.systemPrompt).onChange(async s=>{this.plugin.settings.systemPrompt=s,await this.plugin.saveSettings()})}),new or.Setting(n).setName("Write With AI: System Prompt").setDesc("Additional system prompt to add to the Write With AI agent.").addTextArea(r=>{r.inputEl.rows=5,r.inputEl.style.width="100%",r.setPlaceholder("You are a helpful AI assistant").setValue(this.plugin.settings.writeWithAiSystem||"").onChange(async s=>{this.plugin.settings.writeWithAiSystem=s,await this.plugin.saveSettings()})})}};var Zg={systemPrompt:"You are a helpful AI assistant",writeWithAiSystem:"Only respond with the requested text. Do not add any explainers, summaries, or additional information",messages:[]};var Hg=Symbol("Let zodToJsonSchema decide on which parser to use"),Wg={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},qg=t=>typeof t=="string"?{...Wg,basePath:["#"],definitions:{},name:t}:{...Wg,basePath:["#"],definitions:{},...t};var Ma=t=>"_def"in t?t._def:t;function Kg(t){if(!t)return!0;for(let e in t)return!1;return!0}var Qg=t=>{let e=qg(t),n=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:n,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[Ma(s),{def:Ma(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function tf(t,e,n,r){r!=null&&r.errorMessages&&n&&(t.errorMessage={...t.errorMessage,[e]:n})}function W(t,e,n,r,s){t[e]=n,tf(t,e,r,s)}var q;(function(t){t.assertEqual=s=>s;function e(s){}t.assertIs=e;function n(s){throw new Error}t.assertNever=n,t.arrayToEnum=s=>{let i={};for(let a of s)i[a]=a;return i},t.getValidEnumValues=s=>{let i=t.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),a={};for(let o of i)a[o]=s[o];return t.objectValues(a)},t.objectValues=s=>t.objectKeys(s).map(function(i){return s[i]}),t.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{let i=[];for(let a in s)Object.prototype.hasOwnProperty.call(s,a)&&i.push(a);return i},t.find=(s,i)=>{for(let a of s)if(i(a))return a},t.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&isFinite(s)&&Math.floor(s)===s;function r(s,i=" | "){return s.map(a=>typeof a=="string"?`'${a}'`:a).join(i)}t.joinValues=r,t.jsonStringifyReplacer=(s,i)=>typeof i=="bigint"?i.toString():i})(q||(q={}));var rf;(function(t){t.mergeShapes=(e,n)=>({...e,...n})})(rf||(rf={}));var I=q.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),lr=t=>{switch(typeof t){case"undefined":return I.undefined;case"string":return I.string;case"number":return isNaN(t)?I.nan:I.number;case"boolean":return I.boolean;case"function":return I.function;case"bigint":return I.bigint;case"symbol":return I.symbol;case"object":return Array.isArray(t)?I.array:t===null?I.null:t.then&&typeof t.then=="function"&&t.catch&&typeof t.catch=="function"?I.promise:typeof Map!="undefined"&&t instanceof Map?I.map:typeof Set!="undefined"&&t instanceof Set?I.set:typeof Date!="undefined"&&t instanceof Date?I.date:I.object;default:return I.unknown}},S=q.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]),Gw=t=>JSON.stringify(t,null,2).replace(/"([^"]+)":/g,"$1:"),Be=class extends Error{constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};let n=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,n):this.__proto__=n,this.name="ZodError",this.issues=e}get errors(){return this.issues}format(e){let n=e||function(i){return i.message},r={_errors:[]},s=i=>{for(let a of i.issues)if(a.code==="invalid_union")a.unionErrors.map(s);else if(a.code==="invalid_return_type")s(a.returnTypeError);else if(a.code==="invalid_arguments")s(a.argumentsError);else if(a.path.length===0)r._errors.push(n(a));else{let o=r,l=0;for(;l<a.path.length;){let u=a.path[l];l===a.path.length-1?(o[u]=o[u]||{_errors:[]},o[u]._errors.push(n(a))):o[u]=o[u]||{_errors:[]},o=o[u],l++}}};return s(this),r}static assert(e){if(!(e instanceof Be))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,q.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=n=>n.message){let n={},r=[];for(let s of this.issues)s.path.length>0?(n[s.path[0]]=n[s.path[0]]||[],n[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:n}}get formErrors(){return this.flatten()}};Be.create=t=>new Be(t);var mi=(t,e)=>{let n;switch(t.code){case S.invalid_type:t.received===I.undefined?n="Required":n=`Expected ${t.expected}, received ${t.received}`;break;case S.invalid_literal:n=`Invalid literal value, expected ${JSON.stringify(t.expected,q.jsonStringifyReplacer)}`;break;case S.unrecognized_keys:n=`Unrecognized key(s) in object: ${q.joinValues(t.keys,", ")}`;break;case S.invalid_union:n="Invalid input";break;case S.invalid_union_discriminator:n=`Invalid discriminator value. Expected ${q.joinValues(t.options)}`;break;case S.invalid_enum_value:n=`Invalid enum value. Expected ${q.joinValues(t.options)}, received '${t.received}'`;break;case S.invalid_arguments:n="Invalid function arguments";break;case S.invalid_return_type:n="Invalid function return type";break;case S.invalid_date:n="Invalid date";break;case S.invalid_string:typeof t.validation=="object"?"includes"in t.validation?(n=`Invalid input: must include "${t.validation.includes}"`,typeof t.validation.position=="number"&&(n=`${n} at one or more positions greater than or equal to ${t.validation.position}`)):"startsWith"in t.validation?n=`Invalid input: must start with "${t.validation.startsWith}"`:"endsWith"in t.validation?n=`Invalid input: must end with "${t.validation.endsWith}"`:q.assertNever(t.validation):t.validation!=="regex"?n=`Invalid ${t.validation}`:n="Invalid";break;case S.too_small:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at least":"more than"} ${t.minimum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at least":"over"} ${t.minimum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${t.minimum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly equal to ":t.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(t.minimum))}`:n="Invalid input";break;case S.too_big:t.type==="array"?n=`Array must contain ${t.exact?"exactly":t.inclusive?"at most":"less than"} ${t.maximum} element(s)`:t.type==="string"?n=`String must contain ${t.exact?"exactly":t.inclusive?"at most":"under"} ${t.maximum} character(s)`:t.type==="number"?n=`Number must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="bigint"?n=`BigInt must be ${t.exact?"exactly":t.inclusive?"less than or equal to":"less than"} ${t.maximum}`:t.type==="date"?n=`Date must be ${t.exact?"exactly":t.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(t.maximum))}`:n="Invalid input";break;case S.custom:n="Invalid input";break;case S.invalid_intersection_types:n="Intersection results could not be merged";break;case S.not_multiple_of:n=`Number must be a multiple of ${t.multipleOf}`;break;case S.not_finite:n="Number must be finite";break;default:n=e.defaultError,q.assertNever(t)}return{message:n}},Yg=mi;function ex(t){Yg=t}function Fl(){return Yg}var zl=t=>{let{data:e,path:n,errorMaps:r,issueData:s}=t,i=[...n,...s.path||[]],a={...s,path:i};if(s.message!==void 0)return{...s,path:i,message:s.message};let o="",l=r.filter(u=>!!u).slice().reverse();for(let u of l)o=u(a,{data:e,defaultError:o}).message;return{...s,path:i,message:o}},tx=[];function T(t,e){let n=Fl(),r=zl({issueData:e,data:t.data,path:t.path,errorMaps:[t.common.contextualErrorMap,t.schemaErrorMap,n,n===mi?void 0:mi].filter(s=>!!s)});t.common.issues.push(r)}var Ee=class{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,n){let r=[];for(let s of n){if(s.status==="aborted")return $;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,n){let r=[];for(let s of n){let i=await s.key,a=await s.value;r.push({key:i,value:a})}return Ee.mergeObjectSync(e,r)}static mergeObjectSync(e,n){let r={};for(let s of n){let{key:i,value:a}=s;if(i.status==="aborted"||a.status==="aborted")return $;i.status==="dirty"&&e.dirty(),a.status==="dirty"&&e.dirty(),i.value!=="__proto__"&&(typeof a.value!="undefined"||s.alwaysSet)&&(r[i.value]=a.value)}return{status:e.value,value:r}}},$=Object.freeze({status:"aborted"}),pi=t=>({status:"dirty",value:t}),Ve=t=>({status:"valid",value:t}),sf=t=>t.status==="aborted",af=t=>t.status==="dirty",ja=t=>t.status==="valid",$a=t=>typeof Promise!="undefined"&&t instanceof Promise;function Ul(t,e,n,r){if(n==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return n==="m"?r:n==="a"?r.call(t):r?r.value:e.get(t)}function Gg(t,e,n,r,s){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!s)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?t!==e||!s:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?s.call(t,n):s?s.value=n:e.set(t,n),n}var b;(function(t){t.errToObj=e=>typeof e=="string"?{message:e}:e||{},t.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(b||(b={}));var Da,La,xt=class{constructor(e,n,r,s){this._cachedPath=[],this.parent=e,this.data=n,this._path=r,this._key=s}get path(){return this._cachedPath.length||(this._key instanceof Array?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}},Xg=(t,e)=>{if(ja(e))return{success:!0,data:e.value};if(!t.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;let n=new Be(t.common.issues);return this._error=n,this._error}}};function z(t){if(!t)return{};let{errorMap:e,invalid_type_error:n,required_error:r,description:s}=t;if(e&&(n||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(a,o)=>{var l,u;let{message:c}=t;return a.code==="invalid_enum_value"?{message:c!=null?c:o.defaultError}:typeof o.data=="undefined"?{message:(l=c!=null?c:r)!==null&&l!==void 0?l:o.defaultError}:a.code!=="invalid_type"?{message:o.defaultError}:{message:(u=c!=null?c:n)!==null&&u!==void 0?u:o.defaultError}},description:s}}var U=class{constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this)}get description(){return this._def.description}_getType(e){return lr(e.data)}_getOrReturnCtx(e,n){return n||{common:e.parent.common,data:e.data,parsedType:lr(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new Ee,ctx:{common:e.parent.common,data:e.data,parsedType:lr(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){let n=this._parse(e);if($a(n))throw new Error("Synchronous parse encountered promise.");return n}_parseAsync(e){let n=this._parse(e);return Promise.resolve(n)}parse(e,n){let r=this.safeParse(e,n);if(r.success)return r.data;throw r.error}safeParse(e,n){var r;let s={common:{issues:[],async:(r=n==null?void 0:n.async)!==null&&r!==void 0?r:!1,contextualErrorMap:n==null?void 0:n.errorMap},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:lr(e)},i=this._parseSync({data:e,path:s.path,parent:s});return Xg(s,i)}async parseAsync(e,n){let r=await this.safeParseAsync(e,n);if(r.success)return r.data;throw r.error}async safeParseAsync(e,n){let r={common:{issues:[],contextualErrorMap:n==null?void 0:n.errorMap,async:!0},path:(n==null?void 0:n.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:lr(e)},s=this._parse({data:e,path:r.path,parent:r}),i=await($a(s)?s:Promise.resolve(s));return Xg(r,i)}refine(e,n){let r=s=>typeof n=="string"||typeof n=="undefined"?{message:n}:typeof n=="function"?n(s):n;return this._refinement((s,i)=>{let a=e(s),o=()=>i.addIssue({code:S.custom,...r(s)});return typeof Promise!="undefined"&&a instanceof Promise?a.then(l=>l?!0:(o(),!1)):a?!0:(o(),!1)})}refinement(e,n){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof n=="function"?n(r,s):n),!1))}_refinement(e){return new ct({schema:this,typeName:y.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}optional(){return wt.create(this,this._def)}nullable(){return sn.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return ut.create(this,this._def)}promise(){return dr.create(this,this._def)}or(e){return Qr.create([this,e],this._def)}and(e){return Xr.create(this,e,this._def)}transform(e){return new ct({...z(this._def),schema:this,typeName:y.ZodEffects,effect:{type:"transform",transform:e}})}default(e){let n=typeof e=="function"?e:()=>e;return new ts({...z(this._def),innerType:this,defaultValue:n,typeName:y.ZodDefault})}brand(){return new Fa({typeName:y.ZodBranded,type:this,...z(this._def)})}catch(e){let n=typeof e=="function"?e:()=>e;return new ns({...z(this._def),innerType:this,catchValue:n,typeName:y.ZodCatch})}describe(e){let n=this.constructor;return new n({...this._def,description:e})}pipe(e){return rs.create(this,e)}readonly(){return ss.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}},nx=/^c[^\s-]{8,}$/i,rx=/^[0-9a-z]+$/,sx=/^[0-9A-HJKMNP-TV-Z]{26}$/,ix=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,ax=/^[a-z0-9_-]{21}$/i,ox=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,lx=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,ux="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$",nf,cx=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,dx=/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,fx=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,ey="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",px=new RegExp(`^${ey}$`);function ty(t){let e="([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";return t.precision?e=`${e}\\.\\d{${t.precision}}`:t.precision==null&&(e=`${e}(\\.\\d+)?`),e}function mx(t){return new RegExp(`^${ty(t)}$`)}function ny(t){let e=`${ey}T${ty(t)}`,n=[];return n.push(t.local?"Z?":"Z"),t.offset&&n.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${n.join("|")})`,new RegExp(`^${e}$`)}function hx(t,e){return!!((e==="v4"||!e)&&cx.test(t)||(e==="v6"||!e)&&dx.test(t))}var lt=class extends U{_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==I.string){let i=this._getOrReturnCtx(e);return T(i,{code:S.invalid_type,expected:I.string,received:i.parsedType}),$}let r=new Ee,s;for(let i of this._def.checks)if(i.kind==="min")e.data.length<i.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:S.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),r.dirty());else if(i.kind==="max")e.data.length>i.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:S.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!1,message:i.message}),r.dirty());else if(i.kind==="length"){let a=e.data.length>i.value,o=e.data.length<i.value;(a||o)&&(s=this._getOrReturnCtx(e,s),a?T(s,{code:S.too_big,maximum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}):o&&T(s,{code:S.too_small,minimum:i.value,type:"string",inclusive:!0,exact:!0,message:i.message}),r.dirty())}else if(i.kind==="email")lx.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"email",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="emoji")nf||(nf=new RegExp(ux,"u")),nf.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"emoji",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="uuid")ix.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"uuid",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="nanoid")ax.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"nanoid",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="cuid")nx.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="cuid2")rx.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"cuid2",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="ulid")sx.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ulid",code:S.invalid_string,message:i.message}),r.dirty());else if(i.kind==="url")try{new URL(e.data)}catch(a){s=this._getOrReturnCtx(e,s),T(s,{validation:"url",code:S.invalid_string,message:i.message}),r.dirty()}else i.kind==="regex"?(i.regex.lastIndex=0,i.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"regex",code:S.invalid_string,message:i.message}),r.dirty())):i.kind==="trim"?e.data=e.data.trim():i.kind==="includes"?e.data.includes(i.value,i.position)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:{includes:i.value,position:i.position},message:i.message}),r.dirty()):i.kind==="toLowerCase"?e.data=e.data.toLowerCase():i.kind==="toUpperCase"?e.data=e.data.toUpperCase():i.kind==="startsWith"?e.data.startsWith(i.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:{startsWith:i.value},message:i.message}),r.dirty()):i.kind==="endsWith"?e.data.endsWith(i.value)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:{endsWith:i.value},message:i.message}),r.dirty()):i.kind==="datetime"?ny(i).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:"datetime",message:i.message}),r.dirty()):i.kind==="date"?px.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:"date",message:i.message}),r.dirty()):i.kind==="time"?mx(i).test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{code:S.invalid_string,validation:"time",message:i.message}),r.dirty()):i.kind==="duration"?ox.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"duration",code:S.invalid_string,message:i.message}),r.dirty()):i.kind==="ip"?hx(e.data,i.version)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"ip",code:S.invalid_string,message:i.message}),r.dirty()):i.kind==="base64"?fx.test(e.data)||(s=this._getOrReturnCtx(e,s),T(s,{validation:"base64",code:S.invalid_string,message:i.message}),r.dirty()):q.assertNever(i);return{status:r.value,value:e.data}}_regex(e,n,r){return this.refinement(s=>e.test(s),{validation:n,code:S.invalid_string,...b.errToObj(r)})}_addCheck(e){return new lt({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...b.errToObj(e)})}url(e){return this._addCheck({kind:"url",...b.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...b.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...b.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...b.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...b.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...b.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...b.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...b.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...b.errToObj(e)})}datetime(e){var n,r;return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)=="undefined"?null:e==null?void 0:e.precision,offset:(n=e==null?void 0:e.offset)!==null&&n!==void 0?n:!1,local:(r=e==null?void 0:e.local)!==null&&r!==void 0?r:!1,...b.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)=="undefined"?null:e==null?void 0:e.precision,...b.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...b.errToObj(e)})}regex(e,n){return this._addCheck({kind:"regex",regex:e,...b.errToObj(n)})}includes(e,n){return this._addCheck({kind:"includes",value:e,position:n==null?void 0:n.position,...b.errToObj(n==null?void 0:n.message)})}startsWith(e,n){return this._addCheck({kind:"startsWith",value:e,...b.errToObj(n)})}endsWith(e,n){return this._addCheck({kind:"endsWith",value:e,...b.errToObj(n)})}min(e,n){return this._addCheck({kind:"min",value:e,...b.errToObj(n)})}max(e,n){return this._addCheck({kind:"max",value:e,...b.errToObj(n)})}length(e,n){return this._addCheck({kind:"length",value:e,...b.errToObj(n)})}nonempty(e){return this.min(1,b.errToObj(e))}trim(){return new lt({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new lt({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new lt({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get minLength(){let e=null;for(let n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxLength(){let e=null;for(let n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}};lt.create=t=>{var e;return new lt({checks:[],typeName:y.ZodString,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...z(t)})};function gx(t,e){let n=(t.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=n>r?n:r,i=parseInt(t.toFixed(s).replace(".","")),a=parseInt(e.toFixed(s).replace(".",""));return i%a/Math.pow(10,s)}var tn=class extends U{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==I.number){let i=this._getOrReturnCtx(e);return T(i,{code:S.invalid_type,expected:I.number,received:i.parsedType}),$}let r,s=new Ee;for(let i of this._def.checks)i.kind==="int"?q.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:S.invalid_type,expected:"integer",received:"float",message:i.message}),s.dirty()):i.kind==="min"?(i.inclusive?e.data<i.value:e.data<=i.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.too_small,minimum:i.value,type:"number",inclusive:i.inclusive,exact:!1,message:i.message}),s.dirty()):i.kind==="max"?(i.inclusive?e.data>i.value:e.data>=i.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.too_big,maximum:i.value,type:"number",inclusive:i.inclusive,exact:!1,message:i.message}),s.dirty()):i.kind==="multipleOf"?gx(e.data,i.value)!==0&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.not_multiple_of,multipleOf:i.value,message:i.message}),s.dirty()):i.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),T(r,{code:S.not_finite,message:i.message}),s.dirty()):q.assertNever(i);return{status:s.value,value:e.data}}gte(e,n){return this.setLimit("min",e,!0,b.toString(n))}gt(e,n){return this.setLimit("min",e,!1,b.toString(n))}lte(e,n){return this.setLimit("max",e,!0,b.toString(n))}lt(e,n){return this.setLimit("max",e,!1,b.toString(n))}setLimit(e,n,r,s){return new tn({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:r,message:b.toString(s)}]})}_addCheck(e){return new tn({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:b.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:b.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:b.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:b.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:b.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:b.toString(n)})}finite(e){return this._addCheck({kind:"finite",message:b.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:b.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:b.toString(e)})}get minValue(){let e=null;for(let n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(let n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&q.isInteger(e.value))}get isFinite(){let e=null,n=null;for(let r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(n===null||r.value>n)&&(n=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(n)&&Number.isFinite(e)}};tn.create=t=>new tn({checks:[],typeName:y.ZodNumber,coerce:(t==null?void 0:t.coerce)||!1,...z(t)});var nn=class extends U{constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce&&(e.data=BigInt(e.data)),this._getType(e)!==I.bigint){let i=this._getOrReturnCtx(e);return T(i,{code:S.invalid_type,expected:I.bigint,received:i.parsedType}),$}let r,s=new Ee;for(let i of this._def.checks)i.kind==="min"?(i.inclusive?e.data<i.value:e.data<=i.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.too_small,type:"bigint",minimum:i.value,inclusive:i.inclusive,message:i.message}),s.dirty()):i.kind==="max"?(i.inclusive?e.data>i.value:e.data>=i.value)&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.too_big,type:"bigint",maximum:i.value,inclusive:i.inclusive,message:i.message}),s.dirty()):i.kind==="multipleOf"?e.data%i.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),T(r,{code:S.not_multiple_of,multipleOf:i.value,message:i.message}),s.dirty()):q.assertNever(i);return{status:s.value,value:e.data}}gte(e,n){return this.setLimit("min",e,!0,b.toString(n))}gt(e,n){return this.setLimit("min",e,!1,b.toString(n))}lte(e,n){return this.setLimit("max",e,!0,b.toString(n))}lt(e,n){return this.setLimit("max",e,!1,b.toString(n))}setLimit(e,n,r,s){return new nn({...this._def,checks:[...this._def.checks,{kind:e,value:n,inclusive:r,message:b.toString(s)}]})}_addCheck(e){return new nn({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:b.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:b.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:b.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:b.toString(e)})}multipleOf(e,n){return this._addCheck({kind:"multipleOf",value:e,message:b.toString(n)})}get minValue(){let e=null;for(let n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e}get maxValue(){let e=null;for(let n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e}};nn.create=t=>{var e;return new nn({checks:[],typeName:y.ZodBigInt,coerce:(e=t==null?void 0:t.coerce)!==null&&e!==void 0?e:!1,...z(t)})};var Hr=class extends U{_parse(e){if(this._def.coerce&&(e.data=Boolean(e.data)),this._getType(e)!==I.boolean){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.boolean,received:r.parsedType}),$}return Ve(e.data)}};Hr.create=t=>new Hr({typeName:y.ZodBoolean,coerce:(t==null?void 0:t.coerce)||!1,...z(t)});var Cn=class extends U{_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==I.date){let i=this._getOrReturnCtx(e);return T(i,{code:S.invalid_type,expected:I.date,received:i.parsedType}),$}if(isNaN(e.data.getTime())){let i=this._getOrReturnCtx(e);return T(i,{code:S.invalid_date}),$}let r=new Ee,s;for(let i of this._def.checks)i.kind==="min"?e.data.getTime()<i.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:S.too_small,message:i.message,inclusive:!0,exact:!1,minimum:i.value,type:"date"}),r.dirty()):i.kind==="max"?e.data.getTime()>i.value&&(s=this._getOrReturnCtx(e,s),T(s,{code:S.too_big,message:i.message,inclusive:!0,exact:!1,maximum:i.value,type:"date"}),r.dirty()):q.assertNever(i);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new Cn({...this._def,checks:[...this._def.checks,e]})}min(e,n){return this._addCheck({kind:"min",value:e.getTime(),message:b.toString(n)})}max(e,n){return this._addCheck({kind:"max",value:e.getTime(),message:b.toString(n)})}get minDate(){let e=null;for(let n of this._def.checks)n.kind==="min"&&(e===null||n.value>e)&&(e=n.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(let n of this._def.checks)n.kind==="max"&&(e===null||n.value<e)&&(e=n.value);return e!=null?new Date(e):null}};Cn.create=t=>new Cn({checks:[],coerce:(t==null?void 0:t.coerce)||!1,typeName:y.ZodDate,...z(t)});var hi=class extends U{_parse(e){if(this._getType(e)!==I.symbol){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.symbol,received:r.parsedType}),$}return Ve(e.data)}};hi.create=t=>new hi({typeName:y.ZodSymbol,...z(t)});var qr=class extends U{_parse(e){if(this._getType(e)!==I.undefined){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.undefined,received:r.parsedType}),$}return Ve(e.data)}};qr.create=t=>new qr({typeName:y.ZodUndefined,...z(t)});var Kr=class extends U{_parse(e){if(this._getType(e)!==I.null){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.null,received:r.parsedType}),$}return Ve(e.data)}};Kr.create=t=>new Kr({typeName:y.ZodNull,...z(t)});var cr=class extends U{constructor(){super(...arguments),this._any=!0}_parse(e){return Ve(e.data)}};cr.create=t=>new cr({typeName:y.ZodAny,...z(t)});var Pn=class extends U{constructor(){super(...arguments),this._unknown=!0}_parse(e){return Ve(e.data)}};Pn.create=t=>new Pn({typeName:y.ZodUnknown,...z(t)});var bt=class extends U{_parse(e){let n=this._getOrReturnCtx(e);return T(n,{code:S.invalid_type,expected:I.never,received:n.parsedType}),$}};bt.create=t=>new bt({typeName:y.ZodNever,...z(t)});var gi=class extends U{_parse(e){if(this._getType(e)!==I.undefined){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.void,received:r.parsedType}),$}return Ve(e.data)}};gi.create=t=>new gi({typeName:y.ZodVoid,...z(t)});var ut=class extends U{_parse(e){let{ctx:n,status:r}=this._processInputParams(e),s=this._def;if(n.parsedType!==I.array)return T(n,{code:S.invalid_type,expected:I.array,received:n.parsedType}),$;if(s.exactLength!==null){let a=n.data.length>s.exactLength.value,o=n.data.length<s.exactLength.value;(a||o)&&(T(n,{code:a?S.too_big:S.too_small,minimum:o?s.exactLength.value:void 0,maximum:a?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&n.data.length<s.minLength.value&&(T(n,{code:S.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&n.data.length>s.maxLength.value&&(T(n,{code:S.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),n.common.async)return Promise.all([...n.data].map((a,o)=>s.type._parseAsync(new xt(n,a,n.path,o)))).then(a=>Ee.mergeArray(r,a));let i=[...n.data].map((a,o)=>s.type._parseSync(new xt(n,a,n.path,o)));return Ee.mergeArray(r,i)}get element(){return this._def.type}min(e,n){return new ut({...this._def,minLength:{value:e,message:b.toString(n)}})}max(e,n){return new ut({...this._def,maxLength:{value:e,message:b.toString(n)}})}length(e,n){return new ut({...this._def,exactLength:{value:e,message:b.toString(n)}})}nonempty(e){return this.min(1,e)}};ut.create=(t,e)=>new ut({type:t,minLength:null,maxLength:null,exactLength:null,typeName:y.ZodArray,...z(e)});function fi(t){if(t instanceof re){let e={};for(let n in t.shape){let r=t.shape[n];e[n]=wt.create(fi(r))}return new re({...t._def,shape:()=>e})}else return t instanceof ut?new ut({...t._def,type:fi(t.element)}):t instanceof wt?wt.create(fi(t.unwrap())):t instanceof sn?sn.create(fi(t.unwrap())):t instanceof kt?kt.create(t.items.map(e=>fi(e))):t}var re=class extends U{constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;let e=this._def.shape(),n=q.objectKeys(e);return this._cached={shape:e,keys:n}}_parse(e){if(this._getType(e)!==I.object){let u=this._getOrReturnCtx(e);return T(u,{code:S.invalid_type,expected:I.object,received:u.parsedType}),$}let{status:r,ctx:s}=this._processInputParams(e),{shape:i,keys:a}=this._getCached(),o=[];if(!(this._def.catchall instanceof bt&&this._def.unknownKeys==="strip"))for(let u in s.data)a.includes(u)||o.push(u);let l=[];for(let u of a){let c=i[u],f=s.data[u];l.push({key:{status:"valid",value:u},value:c._parse(new xt(s,f,s.path,u)),alwaysSet:u in s.data})}if(this._def.catchall instanceof bt){let u=this._def.unknownKeys;if(u==="passthrough")for(let c of o)l.push({key:{status:"valid",value:c},value:{status:"valid",value:s.data[c]}});else if(u==="strict")o.length>0&&(T(s,{code:S.unrecognized_keys,keys:o}),r.dirty());else if(u!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{let u=this._def.catchall;for(let c of o){let f=s.data[c];l.push({key:{status:"valid",value:c},value:u._parse(new xt(s,f,s.path,c)),alwaysSet:c in s.data})}}return s.common.async?Promise.resolve().then(async()=>{let u=[];for(let c of l){let f=await c.key,h=await c.value;u.push({key:f,value:h,alwaysSet:c.alwaysSet})}return u}).then(u=>Ee.mergeObjectSync(r,u)):Ee.mergeObjectSync(r,l)}get shape(){return this._def.shape()}strict(e){return b.errToObj,new re({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(n,r)=>{var s,i,a,o;let l=(a=(i=(s=this._def).errorMap)===null||i===void 0?void 0:i.call(s,n,r).message)!==null&&a!==void 0?a:r.defaultError;return n.code==="unrecognized_keys"?{message:(o=b.errToObj(e).message)!==null&&o!==void 0?o:l}:{message:l}}}:{}})}strip(){return new re({...this._def,unknownKeys:"strip"})}passthrough(){return new re({...this._def,unknownKeys:"passthrough"})}extend(e){return new re({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new re({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:y.ZodObject})}setKey(e,n){return this.augment({[e]:n})}catchall(e){return new re({...this._def,catchall:e})}pick(e){let n={};return q.objectKeys(e).forEach(r=>{e[r]&&this.shape[r]&&(n[r]=this.shape[r])}),new re({...this._def,shape:()=>n})}omit(e){let n={};return q.objectKeys(this.shape).forEach(r=>{e[r]||(n[r]=this.shape[r])}),new re({...this._def,shape:()=>n})}deepPartial(){return fi(this)}partial(e){let n={};return q.objectKeys(this.shape).forEach(r=>{let s=this.shape[r];e&&!e[r]?n[r]=s:n[r]=s.optional()}),new re({...this._def,shape:()=>n})}required(e){let n={};return q.objectKeys(this.shape).forEach(r=>{if(e&&!e[r])n[r]=this.shape[r];else{let i=this.shape[r];for(;i instanceof wt;)i=i._def.innerType;n[r]=i}}),new re({...this._def,shape:()=>n})}keyof(){return ry(q.objectKeys(this.shape))}};re.create=(t,e)=>new re({shape:()=>t,unknownKeys:"strip",catchall:bt.create(),typeName:y.ZodObject,...z(e)});re.strictCreate=(t,e)=>new re({shape:()=>t,unknownKeys:"strict",catchall:bt.create(),typeName:y.ZodObject,...z(e)});re.lazycreate=(t,e)=>new re({shape:t,unknownKeys:"strip",catchall:bt.create(),typeName:y.ZodObject,...z(e)});var Qr=class extends U{_parse(e){let{ctx:n}=this._processInputParams(e),r=this._def.options;function s(i){for(let o of i)if(o.result.status==="valid")return o.result;for(let o of i)if(o.result.status==="dirty")return n.common.issues.push(...o.ctx.common.issues),o.result;let a=i.map(o=>new Be(o.ctx.common.issues));return T(n,{code:S.invalid_union,unionErrors:a}),$}if(n.common.async)return Promise.all(r.map(async i=>{let a={...n,common:{...n.common,issues:[]},parent:null};return{result:await i._parseAsync({data:n.data,path:n.path,parent:a}),ctx:a}})).then(s);{let i,a=[];for(let l of r){let u={...n,common:{...n.common,issues:[]},parent:null},c=l._parseSync({data:n.data,path:n.path,parent:u});if(c.status==="valid")return c;c.status==="dirty"&&!i&&(i={result:c,ctx:u}),u.common.issues.length&&a.push(u.common.issues)}if(i)return n.common.issues.push(...i.ctx.common.issues),i.result;let o=a.map(l=>new Be(l));return T(n,{code:S.invalid_union,unionErrors:o}),$}}get options(){return this._def.options}};Qr.create=(t,e)=>new Qr({options:t,typeName:y.ZodUnion,...z(e)});var En=t=>t instanceof Yr?En(t.schema):t instanceof ct?En(t.innerType()):t instanceof Gr?[t.value]:t instanceof rn?t.options:t instanceof es?q.objectValues(t.enum):t instanceof ts?En(t._def.innerType):t instanceof qr?[void 0]:t instanceof Kr?[null]:t instanceof wt?[void 0,...En(t.unwrap())]:t instanceof sn?[null,...En(t.unwrap())]:t instanceof Fa||t instanceof ss?En(t.unwrap()):t instanceof ns?En(t._def.innerType):[],yi=class extends U{_parse(e){let{ctx:n}=this._processInputParams(e);if(n.parsedType!==I.object)return T(n,{code:S.invalid_type,expected:I.object,received:n.parsedType}),$;let r=this.discriminator,s=n.data[r],i=this.optionsMap.get(s);return i?n.common.async?i._parseAsync({data:n.data,path:n.path,parent:n}):i._parseSync({data:n.data,path:n.path,parent:n}):(T(n,{code:S.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),$)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,n,r){let s=new Map;for(let i of n){let a=En(i.shape[e]);if(!a.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(let o of a){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,i)}}return new yi({typeName:y.ZodDiscriminatedUnion,discriminator:e,options:n,optionsMap:s,...z(r)})}};function of(t,e){let n=lr(t),r=lr(e);if(t===e)return{valid:!0,data:t};if(n===I.object&&r===I.object){let s=q.objectKeys(e),i=q.objectKeys(t).filter(o=>s.indexOf(o)!==-1),a={...t,...e};for(let o of i){let l=of(t[o],e[o]);if(!l.valid)return{valid:!1};a[o]=l.data}return{valid:!0,data:a}}else if(n===I.array&&r===I.array){if(t.length!==e.length)return{valid:!1};let s=[];for(let i=0;i<t.length;i++){let a=t[i],o=e[i],l=of(a,o);if(!l.valid)return{valid:!1};s.push(l.data)}return{valid:!0,data:s}}else return n===I.date&&r===I.date&&+t==+e?{valid:!0,data:t}:{valid:!1}}var Xr=class extends U{_parse(e){let{status:n,ctx:r}=this._processInputParams(e),s=(i,a)=>{if(sf(i)||sf(a))return $;let o=of(i.value,a.value);return o.valid?((af(i)||af(a))&&n.dirty(),{status:n.value,value:o.data}):(T(r,{code:S.invalid_intersection_types}),$)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([i,a])=>s(i,a)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}};Xr.create=(t,e,n)=>new Xr({left:t,right:e,typeName:y.ZodIntersection,...z(n)});var kt=class extends U{_parse(e){let{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.array)return T(r,{code:S.invalid_type,expected:I.array,received:r.parsedType}),$;if(r.data.length<this._def.items.length)return T(r,{code:S.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),$;!this._def.rest&&r.data.length>this._def.items.length&&(T(r,{code:S.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),n.dirty());let i=[...r.data].map((a,o)=>{let l=this._def.items[o]||this._def.rest;return l?l._parse(new xt(r,a,r.path,o)):null}).filter(a=>!!a);return r.common.async?Promise.all(i).then(a=>Ee.mergeArray(n,a)):Ee.mergeArray(n,i)}get items(){return this._def.items}rest(e){return new kt({...this._def,rest:e})}};kt.create=(t,e)=>{if(!Array.isArray(t))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new kt({items:t,typeName:y.ZodTuple,rest:null,...z(e)})};var Jr=class extends U{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){let{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.object)return T(r,{code:S.invalid_type,expected:I.object,received:r.parsedType}),$;let s=[],i=this._def.keyType,a=this._def.valueType;for(let o in r.data)s.push({key:i._parse(new xt(r,o,r.path,o)),value:a._parse(new xt(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?Ee.mergeObjectAsync(n,s):Ee.mergeObjectSync(n,s)}get element(){return this._def.valueType}static create(e,n,r){return n instanceof U?new Jr({keyType:e,valueType:n,typeName:y.ZodRecord,...z(r)}):new Jr({keyType:lt.create(),valueType:e,typeName:y.ZodRecord,...z(n)})}},vi=class extends U{get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){let{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.map)return T(r,{code:S.invalid_type,expected:I.map,received:r.parsedType}),$;let s=this._def.keyType,i=this._def.valueType,a=[...r.data.entries()].map(([o,l],u)=>({key:s._parse(new xt(r,o,r.path,[u,"key"])),value:i._parse(new xt(r,l,r.path,[u,"value"]))}));if(r.common.async){let o=new Map;return Promise.resolve().then(async()=>{for(let l of a){let u=await l.key,c=await l.value;if(u.status==="aborted"||c.status==="aborted")return $;(u.status==="dirty"||c.status==="dirty")&&n.dirty(),o.set(u.value,c.value)}return{status:n.value,value:o}})}else{let o=new Map;for(let l of a){let u=l.key,c=l.value;if(u.status==="aborted"||c.status==="aborted")return $;(u.status==="dirty"||c.status==="dirty")&&n.dirty(),o.set(u.value,c.value)}return{status:n.value,value:o}}}};vi.create=(t,e,n)=>new vi({valueType:e,keyType:t,typeName:y.ZodMap,...z(n)});var An=class extends U{_parse(e){let{status:n,ctx:r}=this._processInputParams(e);if(r.parsedType!==I.set)return T(r,{code:S.invalid_type,expected:I.set,received:r.parsedType}),$;let s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(T(r,{code:S.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),n.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(T(r,{code:S.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),n.dirty());let i=this._def.valueType;function a(l){let u=new Set;for(let c of l){if(c.status==="aborted")return $;c.status==="dirty"&&n.dirty(),u.add(c.value)}return{status:n.value,value:u}}let o=[...r.data.values()].map((l,u)=>i._parse(new xt(r,l,r.path,u)));return r.common.async?Promise.all(o).then(l=>a(l)):a(o)}min(e,n){return new An({...this._def,minSize:{value:e,message:b.toString(n)}})}max(e,n){return new An({...this._def,maxSize:{value:e,message:b.toString(n)}})}size(e,n){return this.min(e,n).max(e,n)}nonempty(e){return this.min(1,e)}};An.create=(t,e)=>new An({valueType:t,minSize:null,maxSize:null,typeName:y.ZodSet,...z(e)});var ur=class extends U{constructor(){super(...arguments),this.validate=this.implement}_parse(e){let{ctx:n}=this._processInputParams(e);if(n.parsedType!==I.function)return T(n,{code:S.invalid_type,expected:I.function,received:n.parsedType}),$;function r(o,l){return zl({data:o,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Fl(),mi].filter(u=>!!u),issueData:{code:S.invalid_arguments,argumentsError:l}})}function s(o,l){return zl({data:o,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,Fl(),mi].filter(u=>!!u),issueData:{code:S.invalid_return_type,returnTypeError:l}})}let i={errorMap:n.common.contextualErrorMap},a=n.data;if(this._def.returns instanceof dr){let o=this;return Ve(async function(...l){let u=new Be([]),c=await o._def.args.parseAsync(l,i).catch(g=>{throw u.addIssue(r(l,g)),u}),f=await Reflect.apply(a,this,c);return await o._def.returns._def.type.parseAsync(f,i).catch(g=>{throw u.addIssue(s(f,g)),u})})}else{let o=this;return Ve(function(...l){let u=o._def.args.safeParse(l,i);if(!u.success)throw new Be([r(l,u.error)]);let c=Reflect.apply(a,this,u.data),f=o._def.returns.safeParse(c,i);if(!f.success)throw new Be([s(c,f.error)]);return f.data})}}parameters(){return this._def.args}returnType(){return this._def.returns}args(...e){return new ur({...this._def,args:kt.create(e).rest(Pn.create())})}returns(e){return new ur({...this._def,returns:e})}implement(e){return this.parse(e)}strictImplement(e){return this.parse(e)}static create(e,n,r){return new ur({args:e||kt.create([]).rest(Pn.create()),returns:n||Pn.create(),typeName:y.ZodFunction,...z(r)})}},Yr=class extends U{get schema(){return this._def.getter()}_parse(e){let{ctx:n}=this._processInputParams(e);return this._def.getter()._parse({data:n.data,path:n.path,parent:n})}};Yr.create=(t,e)=>new Yr({getter:t,typeName:y.ZodLazy,...z(e)});var Gr=class extends U{_parse(e){if(e.data!==this._def.value){let n=this._getOrReturnCtx(e);return T(n,{received:n.data,code:S.invalid_literal,expected:this._def.value}),$}return{status:"valid",value:e.data}}get value(){return this._def.value}};Gr.create=(t,e)=>new Gr({value:t,typeName:y.ZodLiteral,...z(e)});function ry(t,e){return new rn({values:t,typeName:y.ZodEnum,...z(e)})}var rn=class extends U{constructor(){super(...arguments),Da.set(this,void 0)}_parse(e){if(typeof e.data!="string"){let n=this._getOrReturnCtx(e),r=this._def.values;return T(n,{expected:q.joinValues(r),received:n.parsedType,code:S.invalid_type}),$}if(Ul(this,Da,"f")||Gg(this,Da,new Set(this._def.values),"f"),!Ul(this,Da,"f").has(e.data)){let n=this._getOrReturnCtx(e),r=this._def.values;return T(n,{received:n.data,code:S.invalid_enum_value,options:r}),$}return Ve(e.data)}get options(){return this._def.values}get enum(){let e={};for(let n of this._def.values)e[n]=n;return e}get Values(){let e={};for(let n of this._def.values)e[n]=n;return e}get Enum(){let e={};for(let n of this._def.values)e[n]=n;return e}extract(e,n=this._def){return rn.create(e,{...this._def,...n})}exclude(e,n=this._def){return rn.create(this.options.filter(r=>!e.includes(r)),{...this._def,...n})}};Da=new WeakMap;rn.create=ry;var es=class extends U{constructor(){super(...arguments),La.set(this,void 0)}_parse(e){let n=q.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==I.string&&r.parsedType!==I.number){let s=q.objectValues(n);return T(r,{expected:q.joinValues(s),received:r.parsedType,code:S.invalid_type}),$}if(Ul(this,La,"f")||Gg(this,La,new Set(q.getValidEnumValues(this._def.values)),"f"),!Ul(this,La,"f").has(e.data)){let s=q.objectValues(n);return T(r,{received:r.data,code:S.invalid_enum_value,options:s}),$}return Ve(e.data)}get enum(){return this._def.values}};La=new WeakMap;es.create=(t,e)=>new es({values:t,typeName:y.ZodNativeEnum,...z(e)});var dr=class extends U{unwrap(){return this._def.type}_parse(e){let{ctx:n}=this._processInputParams(e);if(n.parsedType!==I.promise&&n.common.async===!1)return T(n,{code:S.invalid_type,expected:I.promise,received:n.parsedType}),$;let r=n.parsedType===I.promise?n.data:Promise.resolve(n.data);return Ve(r.then(s=>this._def.type.parseAsync(s,{path:n.path,errorMap:n.common.contextualErrorMap})))}};dr.create=(t,e)=>new dr({type:t,typeName:y.ZodPromise,...z(e)});var ct=class extends U{innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===y.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){let{status:n,ctx:r}=this._processInputParams(e),s=this._def.effect||null,i={addIssue:a=>{T(r,a),a.fatal?n.abort():n.dirty()},get path(){return r.path}};if(i.addIssue=i.addIssue.bind(i),s.type==="preprocess"){let a=s.transform(r.data,i);if(r.common.async)return Promise.resolve(a).then(async o=>{if(n.value==="aborted")return $;let l=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return l.status==="aborted"?$:l.status==="dirty"||n.value==="dirty"?pi(l.value):l});{if(n.value==="aborted")return $;let o=this._def.schema._parseSync({data:a,path:r.path,parent:r});return o.status==="aborted"?$:o.status==="dirty"||n.value==="dirty"?pi(o.value):o}}if(s.type==="refinement"){let a=o=>{let l=s.refinement(o,i);if(r.common.async)return Promise.resolve(l);if(l instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){let o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?$:(o.status==="dirty"&&n.dirty(),a(o.value),{status:n.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?$:(o.status==="dirty"&&n.dirty(),a(o.value).then(()=>({status:n.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){let a=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!ja(a))return a;let o=s.transform(a.value,i);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:n.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(a=>ja(a)?Promise.resolve(s.transform(a.value,i)).then(o=>({status:n.value,value:o})):a);q.assertNever(s)}};ct.create=(t,e,n)=>new ct({schema:t,typeName:y.ZodEffects,effect:e,...z(n)});ct.createWithPreprocess=(t,e,n)=>new ct({schema:e,effect:{type:"preprocess",transform:t},typeName:y.ZodEffects,...z(n)});var wt=class extends U{_parse(e){return this._getType(e)===I.undefined?Ve(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}};wt.create=(t,e)=>new wt({innerType:t,typeName:y.ZodOptional,...z(e)});var sn=class extends U{_parse(e){return this._getType(e)===I.null?Ve(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}};sn.create=(t,e)=>new sn({innerType:t,typeName:y.ZodNullable,...z(e)});var ts=class extends U{_parse(e){let{ctx:n}=this._processInputParams(e),r=n.data;return n.parsedType===I.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:n.path,parent:n})}removeDefault(){return this._def.innerType}};ts.create=(t,e)=>new ts({innerType:t,typeName:y.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...z(e)});var ns=class extends U{_parse(e){let{ctx:n}=this._processInputParams(e),r={...n,common:{...n.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return $a(s)?s.then(i=>({status:"valid",value:i.status==="valid"?i.value:this._def.catchValue({get error(){return new Be(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Be(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}};ns.create=(t,e)=>new ns({innerType:t,typeName:y.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...z(e)});var _i=class extends U{_parse(e){if(this._getType(e)!==I.nan){let r=this._getOrReturnCtx(e);return T(r,{code:S.invalid_type,expected:I.nan,received:r.parsedType}),$}return{status:"valid",value:e.data}}};_i.create=t=>new _i({typeName:y.ZodNaN,...z(t)});var yx=Symbol("zod_brand"),Fa=class extends U{_parse(e){let{ctx:n}=this._processInputParams(e),r=n.data;return this._def.type._parse({data:r,path:n.path,parent:n})}unwrap(){return this._def.type}},rs=class extends U{_parse(e){let{status:n,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{let i=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return i.status==="aborted"?$:i.status==="dirty"?(n.dirty(),pi(i.value)):this._def.out._parseAsync({data:i.value,path:r.path,parent:r})})();{let s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?$:s.status==="dirty"?(n.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,n){return new rs({in:e,out:n,typeName:y.ZodPipeline})}},ss=class extends U{_parse(e){let n=this._def.innerType._parse(e),r=s=>(ja(s)&&(s.value=Object.freeze(s.value)),s);return $a(n)?n.then(s=>r(s)):r(n)}unwrap(){return this._def.innerType}};ss.create=(t,e)=>new ss({innerType:t,typeName:y.ZodReadonly,...z(e)});function sy(t,e={},n){return t?cr.create().superRefine((r,s)=>{var i,a;if(!t(r)){let o=typeof e=="function"?e(r):typeof e=="string"?{message:e}:e,l=(a=(i=o.fatal)!==null&&i!==void 0?i:n)!==null&&a!==void 0?a:!0,u=typeof o=="string"?{message:o}:o;s.addIssue({code:"custom",...u,fatal:l})}}):cr.create()}var vx={object:re.lazycreate},y;(function(t){t.ZodString="ZodString",t.ZodNumber="ZodNumber",t.ZodNaN="ZodNaN",t.ZodBigInt="ZodBigInt",t.ZodBoolean="ZodBoolean",t.ZodDate="ZodDate",t.ZodSymbol="ZodSymbol",t.ZodUndefined="ZodUndefined",t.ZodNull="ZodNull",t.ZodAny="ZodAny",t.ZodUnknown="ZodUnknown",t.ZodNever="ZodNever",t.ZodVoid="ZodVoid",t.ZodArray="ZodArray",t.ZodObject="ZodObject",t.ZodUnion="ZodUnion",t.ZodDiscriminatedUnion="ZodDiscriminatedUnion",t.ZodIntersection="ZodIntersection",t.ZodTuple="ZodTuple",t.ZodRecord="ZodRecord",t.ZodMap="ZodMap",t.ZodSet="ZodSet",t.ZodFunction="ZodFunction",t.ZodLazy="ZodLazy",t.ZodLiteral="ZodLiteral",t.ZodEnum="ZodEnum",t.ZodEffects="ZodEffects",t.ZodNativeEnum="ZodNativeEnum",t.ZodOptional="ZodOptional",t.ZodNullable="ZodNullable",t.ZodDefault="ZodDefault",t.ZodCatch="ZodCatch",t.ZodPromise="ZodPromise",t.ZodBranded="ZodBranded",t.ZodPipeline="ZodPipeline",t.ZodReadonly="ZodReadonly"})(y||(y={}));var _x=(t,e={message:`Input not instance of ${t.name}`})=>sy(n=>n instanceof t,e),iy=lt.create,ay=tn.create,wx=_i.create,xx=nn.create,oy=Hr.create,kx=Cn.create,Sx=hi.create,Ex=qr.create,Px=Kr.create,Cx=cr.create,Ax=Pn.create,Tx=bt.create,Ix=gi.create,Ox=ut.create,Rx=re.create,Nx=re.strictCreate,bx=Qr.create,Mx=yi.create,Dx=Xr.create,Lx=kt.create,jx=Jr.create,$x=vi.create,Fx=An.create,zx=ur.create,Ux=Yr.create,Bx=Gr.create,Vx=rn.create,Zx=es.create,Wx=dr.create,Jg=ct.create,Hx=wt.create,qx=sn.create,Kx=ct.createWithPreprocess,Qx=rs.create,Xx=()=>iy().optional(),Jx=()=>ay().optional(),Yx=()=>oy().optional(),Gx={string:t=>lt.create({...t,coerce:!0}),number:t=>tn.create({...t,coerce:!0}),boolean:t=>Hr.create({...t,coerce:!0}),bigint:t=>nn.create({...t,coerce:!0}),date:t=>Cn.create({...t,coerce:!0})},ek=$,lf=Object.freeze({__proto__:null,defaultErrorMap:mi,setErrorMap:ex,getErrorMap:Fl,makeIssue:zl,EMPTY_PATH:tx,addIssueToContext:T,ParseStatus:Ee,INVALID:$,DIRTY:pi,OK:Ve,isAborted:sf,isDirty:af,isValid:ja,isAsync:$a,get util(){return q},get objectUtil(){return rf},ZodParsedType:I,getParsedType:lr,ZodType:U,datetimeRegex:ny,ZodString:lt,ZodNumber:tn,ZodBigInt:nn,ZodBoolean:Hr,ZodDate:Cn,ZodSymbol:hi,ZodUndefined:qr,ZodNull:Kr,ZodAny:cr,ZodUnknown:Pn,ZodNever:bt,ZodVoid:gi,ZodArray:ut,ZodObject:re,ZodUnion:Qr,ZodDiscriminatedUnion:yi,ZodIntersection:Xr,ZodTuple:kt,ZodRecord:Jr,ZodMap:vi,ZodSet:An,ZodFunction:ur,ZodLazy:Yr,ZodLiteral:Gr,ZodEnum:rn,ZodNativeEnum:es,ZodPromise:dr,ZodEffects:ct,ZodTransformer:ct,ZodOptional:wt,ZodNullable:sn,ZodDefault:ts,ZodCatch:ns,ZodNaN:_i,BRAND:yx,ZodBranded:Fa,ZodPipeline:rs,ZodReadonly:ss,custom:sy,Schema:U,ZodSchema:U,late:vx,get ZodFirstPartyTypeKind(){return y},coerce:Gx,any:Cx,array:Ox,bigint:xx,boolean:oy,date:kx,discriminatedUnion:Mx,effect:Jg,enum:Vx,function:zx,instanceof:_x,intersection:Dx,lazy:Ux,literal:Bx,map:$x,nan:wx,nativeEnum:Zx,never:Tx,null:Px,nullable:qx,number:ay,object:Rx,oboolean:Yx,onumber:Jx,optional:Hx,ostring:Xx,pipeline:Qx,preprocess:Kx,promise:Wx,record:jx,set:Fx,strictObject:Nx,string:iy,symbol:Sx,transformer:Jg,tuple:Lx,undefined:Ex,union:bx,unknown:Ax,void:Ix,NEVER:ek,ZodIssueCode:S,quotelessJson:Gw,ZodError:Be});function ly(){return{}}function uy(t,e){var r,s;let n={type:"array"};return((s=(r=t.type)==null?void 0:r._def)==null?void 0:s.typeName)!==y.ZodAny&&(n.items=L(t.type._def,{...e,currentPath:[...e.currentPath,"items"]})),t.minLength&&W(n,"minItems",t.minLength.value,t.minLength.message,e),t.maxLength&&W(n,"maxItems",t.maxLength.value,t.maxLength.message,e),t.exactLength&&(W(n,"minItems",t.exactLength.value,t.exactLength.message,e),W(n,"maxItems",t.exactLength.value,t.exactLength.message,e)),n}function cy(t,e){let n={type:"integer",format:"int64"};if(!t.checks)return n;for(let r of t.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?W(n,"minimum",r.value,r.message,e):W(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),W(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(n,"maximum",r.value,r.message,e):W(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),W(n,"maximum",r.value,r.message,e));break;case"multipleOf":W(n,"multipleOf",r.value,r.message,e);break}return n}function dy(){return{type:"boolean"}}function fy(t,e){return L(t.type._def,e)}var py=(t,e)=>L(t.innerType._def,e);function uf(t,e,n){let r=n!=null?n:e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,i)=>uf(t,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return tk(t,e)}}var tk=(t,e)=>{let n={type:"integer",format:"unix-time"};if(e.target==="openApi3")return n;for(let r of t.checks)switch(r.kind){case"min":W(n,"minimum",r.value,r.message,e);break;case"max":W(n,"maximum",r.value,r.message,e);break}return n};function my(t,e){return{...L(t.innerType._def,e),default:t.defaultValue()}}function hy(t,e,n){return e.effectStrategy==="input"?L(t.schema._def,e,n):{}}function gy(t){return{type:"string",enum:[...t.values]}}var nk=t=>"type"in t&&t.type==="string"?!1:"allOf"in t;function yy(t,e){let n=[L(t.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),L(t.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(i=>!!i),r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0,s=[];return n.forEach(i=>{if(nk(i))s.push(...i.allOf),i.unevaluatedProperties===void 0&&(r=void 0);else{let a=i;if("additionalProperties"in i&&i.additionalProperties===!1){let{additionalProperties:o,...l}=i;a=l}else r=void 0;s.push(a)}}),s.length?{allOf:s,...r}:void 0}function vy(t,e){let n=typeof t.value;return n!=="bigint"&&n!=="number"&&n!=="boolean"&&n!=="string"?{type:Array.isArray(t.value)?"array":"object"}:e.target==="openApi3"?{type:n==="bigint"?"integer":n,enum:[t.value]}:{type:n==="bigint"?"integer":n,const:t.value}}var cf,is={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(cf===void 0&&(cf=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),cf),uuid:/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,ipv4:/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,ipv6:/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Bl(t,e){let n={type:"string"};function r(s){return e.patternStrategy==="escape"?rk(s):s}if(t.checks)for(let s of t.checks)switch(s.kind){case"min":W(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,s.value):s.value,s.message,e);break;case"max":W(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Mt(n,"email",s.message,e);break;case"format:idn-email":Mt(n,"idn-email",s.message,e);break;case"pattern:zod":Dt(n,is.email,s.message,e);break}break;case"url":Mt(n,"uri",s.message,e);break;case"uuid":Mt(n,"uuid",s.message,e);break;case"regex":Dt(n,s.regex,s.message,e);break;case"cuid":Dt(n,is.cuid,s.message,e);break;case"cuid2":Dt(n,is.cuid2,s.message,e);break;case"startsWith":Dt(n,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":Dt(n,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Mt(n,"date-time",s.message,e);break;case"date":Mt(n,"date",s.message,e);break;case"time":Mt(n,"time",s.message,e);break;case"duration":Mt(n,"duration",s.message,e);break;case"length":W(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,s.value):s.value,s.message,e),W(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,s.value):s.value,s.message,e);break;case"includes":{Dt(n,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Mt(n,"ipv4",s.message,e),s.version!=="v4"&&Mt(n,"ipv6",s.message,e);break}case"emoji":Dt(n,is.emoji,s.message,e);break;case"ulid":{Dt(n,is.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Mt(n,"binary",s.message,e);break}case"contentEncoding:base64":{W(n,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{Dt(n,is.base64,s.message,e);break}}break}case"nanoid":Dt(n,is.nanoid,s.message,e);case"toLowerCase":case"toUpperCase":case"trim":break;default:(i=>{})(s)}return n}var rk=t=>Array.from(t).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Mt=(t,e,n,r)=>{var s;t.format||(s=t.anyOf)!=null&&s.some(i=>i.format)?(t.anyOf||(t.anyOf=[]),t.format&&(t.anyOf.push({format:t.format,...t.errorMessage&&r.errorMessages&&{errorMessage:{format:t.errorMessage.format}}}),delete t.format,t.errorMessage&&(delete t.errorMessage.format,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.anyOf.push({format:e,...n&&r.errorMessages&&{errorMessage:{format:n}}})):W(t,"format",e,n,r)},Dt=(t,e,n,r)=>{var s;t.pattern||(s=t.allOf)!=null&&s.some(i=>i.pattern)?(t.allOf||(t.allOf=[]),t.pattern&&(t.allOf.push({pattern:t.pattern,...t.errorMessage&&r.errorMessages&&{errorMessage:{pattern:t.errorMessage.pattern}}}),delete t.pattern,t.errorMessage&&(delete t.errorMessage.pattern,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.allOf.push({pattern:_y(e,r),...n&&r.errorMessages&&{errorMessage:{pattern:n}}})):W(t,"pattern",_y(e,r),n,r)},_y=(t,e)=>{var u;let n=typeof t=="function"?t():t;if(!e.applyRegexFlags||!n.flags)return n.source;let r={i:n.flags.includes("i"),m:n.flags.includes("m"),s:n.flags.includes("s")},s=r.i?n.source.toLowerCase():n.source,i="",a=!1,o=!1,l=!1;for(let c=0;c<s.length;c++){if(a){i+=s[c],a=!1;continue}if(r.i){if(o){if(s[c].match(/[a-z]/)){l?(i+=s[c],i+=`${s[c-2]}-${s[c]}`.toUpperCase(),l=!1):s[c+1]==="-"&&((u=s[c+2])!=null&&u.match(/[a-z]/))?(i+=s[c],l=!0):i+=`${s[c]}${s[c].toUpperCase()}`;continue}}else if(s[c].match(/[a-z]/)){i+=`[${s[c]}${s[c].toUpperCase()}]`;continue}}if(r.m){if(s[c]==="^"){i+=`(^|(?<=[\r
]))`;continue}else if(s[c]==="$"){i+=`($|(?=[\r
]))`;continue}}if(r.s&&s[c]==="."){i+=o?`${s[c]}\r
`:`[${s[c]}\r
]`;continue}i+=s[c],s[c]==="\\"?a=!0:o&&s[c]==="]"?o=!1:!o&&s[c]==="["&&(o=!0)}try{let c=new RegExp(i)}catch(c){return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),n.source}return i};function Vl(t,e){var r,s,i,a,o;if(e.target==="openApi3"&&((r=t.keyType)==null?void 0:r._def.typeName)===y.ZodEnum)return{type:"object",required:t.keyType._def.values,properties:t.keyType._def.values.reduce((l,u)=>{var c;return{...l,[u]:(c=L(t.valueType._def,{...e,currentPath:[...e.currentPath,"properties",u]}))!=null?c:{}}},{}),additionalProperties:!1};let n={type:"object",additionalProperties:(s=L(t.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?s:{}};if(e.target==="openApi3")return n;if(((i=t.keyType)==null?void 0:i._def.typeName)===y.ZodString&&((a=t.keyType._def.checks)!=null&&a.length)){let l=Object.entries(Bl(t.keyType._def,e)).reduce((u,[c,f])=>c==="type"?u:{...u,[c]:f},{});return{...n,propertyNames:l}}else if(((o=t.keyType)==null?void 0:o._def.typeName)===y.ZodEnum)return{...n,propertyNames:{enum:t.keyType._def.values}};return n}function wy(t,e){if(e.mapStrategy==="record")return Vl(t,e);let n=L(t.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=L(t.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[n,r],minItems:2,maxItems:2}}}function xy(t){let e=t.values,r=Object.keys(t.values).filter(i=>typeof e[e[i]]!="number").map(i=>e[i]),s=Array.from(new Set(r.map(i=>typeof i)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function ky(){return{not:{}}}function Sy(t){return t.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}var za={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function Py(t,e){if(e.target==="openApi3")return Ey(t,e);let n=t.options instanceof Map?Array.from(t.options.values()):t.options;if(n.every(r=>r._def.typeName in za&&(!r._def.checks||!r._def.checks.length))){let r=n.reduce((s,i)=>{let a=za[i._def.typeName];return a&&!s.includes(a)?[...s,a]:s},[]);return{type:r.length>1?r:r[0]}}else if(n.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){let r=n.reduce((s,i)=>{let a=typeof i._def.value;switch(a){case"string":case"number":case"boolean":return[...s,a];case"bigint":return[...s,"integer"];case"object":if(i._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===n.length){let s=r.filter((i,a,o)=>o.indexOf(i)===a);return{type:s.length>1?s:s[0],enum:n.reduce((i,a)=>i.includes(a._def.value)?i:[...i,a._def.value],[])}}}else if(n.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:n.reduce((r,s)=>[...r,...s._def.values.filter(i=>!r.includes(i))],[])};return Ey(t,e)}var Ey=(t,e)=>{let n=(t.options instanceof Map?Array.from(t.options.values()):t.options).map((r,s)=>L(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return n.length?{anyOf:n}:void 0};function Cy(t,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(t.innerType._def.typeName)&&(!t.innerType._def.checks||!t.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:za[t.innerType._def.typeName],nullable:!0}:{type:[za[t.innerType._def.typeName],"null"]};if(e.target==="openApi3"){let r=L(t.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}let n=L(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return n&&{anyOf:[n,{type:"null"}]}}function Ay(t,e){let n={type:"number"};if(!t.checks)return n;for(let r of t.checks)switch(r.kind){case"int":n.type="integer",tf(n,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?W(n,"minimum",r.value,r.message,e):W(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),W(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?W(n,"maximum",r.value,r.message,e):W(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),W(n,"maximum",r.value,r.message,e));break;case"multipleOf":W(n,"multipleOf",r.value,r.message,e);break}return n}function sk(t,e){var n,r;return e.removeAdditionalStrategy==="strict"?t.catchall._def.typeName==="ZodNever"?t.unknownKeys!=="strict":(n=L(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?n:!0:t.catchall._def.typeName==="ZodNever"?t.unknownKeys==="passthrough":(r=L(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?r:!0}function Ty(t,e){let n={type:"object",...Object.entries(t.shape()).reduce((r,[s,i])=>{if(i===void 0||i._def===void 0)return r;let a=L(i._def,{...e,currentPath:[...e.currentPath,"properties",s],propertyPath:[...e.currentPath,"properties",s]});return a===void 0?r:{properties:{...r.properties,[s]:a},required:i.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:sk(t,e)};return n.required.length||delete n.required,n}var Iy=(t,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return L(t.innerType._def,e);let n=L(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return n?{anyOf:[{not:{}},n]}:{}};var Oy=(t,e)=>{if(e.pipeStrategy==="input")return L(t.in._def,e);if(e.pipeStrategy==="output")return L(t.out._def,e);let n=L(t.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=L(t.out._def,{...e,currentPath:[...e.currentPath,"allOf",n?"1":"0"]});return{allOf:[n,r].filter(s=>s!==void 0)}};function Ry(t,e){return L(t.type._def,e)}function Ny(t,e){let r={type:"array",uniqueItems:!0,items:L(t.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return t.minSize&&W(r,"minItems",t.minSize.value,t.minSize.message,e),t.maxSize&&W(r,"maxItems",t.maxSize.value,t.maxSize.message,e),r}function by(t,e){return t.rest?{type:"array",minItems:t.items.length,items:t.items.map((n,r)=>L(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[]),additionalItems:L(t.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:t.items.length,maxItems:t.items.length,items:t.items.map((n,r)=>L(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[])}}function My(){return{not:{}}}function Dy(){return{}}var Ly=(t,e)=>L(t.innerType._def,e);function L(t,e,n=!1){var a;let r=e.seen.get(t);if(e.override){let o=(a=e.override)==null?void 0:a.call(e,t,e,r,n);if(o!==Hg)return o}if(r&&!n){let o=ik(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}let s={def:t,path:e.currentPath,jsonSchema:void 0};e.seen.set(t,s);let i=ok(t,t.typeName,e,n);return i&&lk(t,e,i),s.jsonSchema=i,i}var ik=(t,e)=>{switch(e.$refStrategy){case"root":return{$ref:t.path.join("/")};case"extract-to-root":let n=t.path.slice(e.basePath.length+1).join("_");return n!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[n]=t.def),{$ref:[...e.basePath,e.definitionPath,n].join("/")};case"relative":return{$ref:ak(e.currentPath,t.path)};case"none":case"seen":return t.path.length<e.currentPath.length&&t.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},ak=(t,e)=>{let n=0;for(;n<t.length&&n<e.length&&t[n]===e[n];n++);return[(t.length-n).toString(),...e.slice(n)].join("/")},ok=(t,e,n,r)=>{switch(e){case y.ZodString:return Bl(t,n);case y.ZodNumber:return Ay(t,n);case y.ZodObject:return Ty(t,n);case y.ZodBigInt:return cy(t,n);case y.ZodBoolean:return dy();case y.ZodDate:return uf(t,n);case y.ZodUndefined:return My();case y.ZodNull:return Sy(n);case y.ZodArray:return uy(t,n);case y.ZodUnion:case y.ZodDiscriminatedUnion:return Py(t,n);case y.ZodIntersection:return yy(t,n);case y.ZodTuple:return by(t,n);case y.ZodRecord:return Vl(t,n);case y.ZodLiteral:return vy(t,n);case y.ZodEnum:return gy(t);case y.ZodNativeEnum:return xy(t);case y.ZodNullable:return Cy(t,n);case y.ZodOptional:return Iy(t,n);case y.ZodMap:return wy(t,n);case y.ZodSet:return Ny(t,n);case y.ZodLazy:return L(t.getter()._def,n);case y.ZodPromise:return Ry(t,n);case y.ZodNaN:case y.ZodNever:return ky();case y.ZodEffects:return hy(t,n,r);case y.ZodAny:return ly();case y.ZodUnknown:return Dy();case y.ZodDefault:return my(t,n);case y.ZodBranded:return fy(t,n);case y.ZodReadonly:return Ly(t,n);case y.ZodCatch:return py(t,n);case y.ZodPipeline:return Oy(t,n);case y.ZodFunction:case y.ZodVoid:case y.ZodSymbol:return;default:return(s=>{})(e)}},lk=(t,e,n)=>(t.description&&(n.description=t.description,e.markdownDescription&&(n.markdownDescription=t.description)),n);var jy=(t,e)=>{var l;let n=Qg(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=(l=L(t._def,r===void 0?n:{...n,currentPath:[...n.basePath,n.definitionPath,r]},!1))!=null?l:{},i=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;i!==void 0&&(s.title=i);let a=(()=>{var f;if(Kg(n.definitions))return;let u={},c=new Set;for(let h=0;h<500;h++){let g=Object.entries(n.definitions).filter(([v])=>!c.has(v));if(g.length===0)break;for(let[v,w]of g)u[v]=(f=L(Ma(w),{...n,currentPath:[...n.basePath,n.definitionPath,v]},!0))!=null?f:{},c.add(v)}return u})(),o=r===void 0?a?{...s,[n.definitionPath]:a}:s:n.nameStrategy==="duplicate-ref"?{...s,...a||n.seenRefs.size?{[n.definitionPath]:{...a,...n.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...n.$refStrategy==="relative"?[]:n.basePath,n.definitionPath,r].join("/"),[n.definitionPath]:{...a,[r]:s}};return n.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":n.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function uk(t,e){return jy(t,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function $y(t,e,n){return Ag({type:"json_schema",json_schema:{...n,name:e,strict:!0,schema:uk(t,{name:e})}},r=>t.parse(JSON.parse(r)))}var zy=Symbol("Let zodToJsonSchema decide on which parser to use"),Fy={name:void 0,$refStrategy:"root",basePath:["#"],effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,definitions:{},errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Uy=t=>typeof t=="string"?{...Fy,name:t}:{...Fy,...t};var By=t=>{let e=Uy(t),n=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:n,propertyPath:void 0,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[s._def,{def:s._def,path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function df(t,e,n,r){r!=null&&r.errorMessages&&n&&(t.errorMessage={...t.errorMessage,[e]:n})}function H(t,e,n,r,s){t[e]=n,df(t,e,r,s)}function Vy(){return{}}function Zy(t,e){var r,s,i;let n={type:"array"};return(r=t.type)!=null&&r._def&&((i=(s=t.type)==null?void 0:s._def)==null?void 0:i.typeName)!==y.ZodAny&&(n.items=j(t.type._def,{...e,currentPath:[...e.currentPath,"items"]})),t.minLength&&H(n,"minItems",t.minLength.value,t.minLength.message,e),t.maxLength&&H(n,"maxItems",t.maxLength.value,t.maxLength.message,e),t.exactLength&&(H(n,"minItems",t.exactLength.value,t.exactLength.message,e),H(n,"maxItems",t.exactLength.value,t.exactLength.message,e)),n}function Wy(t,e){let n={type:"integer",format:"int64"};if(!t.checks)return n;for(let r of t.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?H(n,"minimum",r.value,r.message,e):H(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),H(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?H(n,"maximum",r.value,r.message,e):H(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),H(n,"maximum",r.value,r.message,e));break;case"multipleOf":H(n,"multipleOf",r.value,r.message,e);break}return n}function Hy(){return{type:"boolean"}}function Zl(t,e){return j(t.type._def,e)}var qy=(t,e)=>j(t.innerType._def,e);function ff(t,e,n){let r=n!=null?n:e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,i)=>ff(t,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return ck(t,e)}}var ck=(t,e)=>{let n={type:"integer",format:"unix-time"};if(e.target==="openApi3")return n;for(let r of t.checks)switch(r.kind){case"min":H(n,"minimum",r.value,r.message,e);break;case"max":H(n,"maximum",r.value,r.message,e);break}return n};function Ky(t,e){return{...j(t.innerType._def,e),default:t.defaultValue()}}function Qy(t,e){return e.effectStrategy==="input"?j(t.schema._def,e):{}}function Xy(t){return{type:"string",enum:t.values}}var dk=t=>"type"in t&&t.type==="string"?!1:"allOf"in t;function Jy(t,e){let n=[j(t.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),j(t.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(i=>!!i),r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0,s=[];return n.forEach(i=>{if(dk(i))s.push(...i.allOf),i.unevaluatedProperties===void 0&&(r=void 0);else{let a=i;if("additionalProperties"in i&&i.additionalProperties===!1){let{additionalProperties:o,...l}=i;a=l}else r=void 0;s.push(a)}}),s.length?{allOf:s,...r}:void 0}function Yy(t,e){let n=typeof t.value;return n!=="bigint"&&n!=="number"&&n!=="boolean"&&n!=="string"?{type:Array.isArray(t.value)?"array":"object"}:e.target==="openApi3"?{type:n==="bigint"?"integer":n,enum:[t.value]}:{type:n==="bigint"?"integer":n,const:t.value}}var pf,as={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(pf===void 0&&(pf=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),pf),uuid:/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,ipv4:/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,ipv6:/^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Wl(t,e){let n={type:"string"};function r(s){return e.patternStrategy==="escape"?fk(s):s}if(t.checks)for(let s of t.checks)switch(s.kind){case"min":H(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,s.value):s.value,s.message,e);break;case"max":H(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":Lt(n,"email",s.message,e);break;case"format:idn-email":Lt(n,"idn-email",s.message,e);break;case"pattern:zod":jt(n,as.email,s.message,e);break}break;case"url":Lt(n,"uri",s.message,e);break;case"uuid":Lt(n,"uuid",s.message,e);break;case"regex":jt(n,s.regex,s.message,e);break;case"cuid":jt(n,as.cuid,s.message,e);break;case"cuid2":jt(n,as.cuid2,s.message,e);break;case"startsWith":jt(n,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":jt(n,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":Lt(n,"date-time",s.message,e);break;case"date":Lt(n,"date",s.message,e);break;case"time":Lt(n,"time",s.message,e);break;case"duration":Lt(n,"duration",s.message,e);break;case"length":H(n,"minLength",typeof n.minLength=="number"?Math.max(n.minLength,s.value):s.value,s.message,e),H(n,"maxLength",typeof n.maxLength=="number"?Math.min(n.maxLength,s.value):s.value,s.message,e);break;case"includes":{jt(n,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&Lt(n,"ipv4",s.message,e),s.version!=="v4"&&Lt(n,"ipv6",s.message,e);break}case"emoji":jt(n,as.emoji,s.message,e);break;case"ulid":{jt(n,as.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{Lt(n,"binary",s.message,e);break}case"contentEncoding:base64":{H(n,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{jt(n,as.base64,s.message,e);break}}break}case"nanoid":jt(n,as.nanoid,s.message,e);case"toLowerCase":case"toUpperCase":case"trim":break;default:(i=>{})(s)}return n}var fk=t=>Array.from(t).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),Lt=(t,e,n,r)=>{var s;t.format||(s=t.anyOf)!=null&&s.some(i=>i.format)?(t.anyOf||(t.anyOf=[]),t.format&&(t.anyOf.push({format:t.format,...t.errorMessage&&r.errorMessages&&{errorMessage:{format:t.errorMessage.format}}}),delete t.format,t.errorMessage&&(delete t.errorMessage.format,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.anyOf.push({format:e,...n&&r.errorMessages&&{errorMessage:{format:n}}})):H(t,"format",e,n,r)},jt=(t,e,n,r)=>{var s;t.pattern||(s=t.allOf)!=null&&s.some(i=>i.pattern)?(t.allOf||(t.allOf=[]),t.pattern&&(t.allOf.push({pattern:t.pattern,...t.errorMessage&&r.errorMessages&&{errorMessage:{pattern:t.errorMessage.pattern}}}),delete t.pattern,t.errorMessage&&(delete t.errorMessage.pattern,Object.keys(t.errorMessage).length===0&&delete t.errorMessage)),t.allOf.push({pattern:Gy(e,r),...n&&r.errorMessages&&{errorMessage:{pattern:n}}})):H(t,"pattern",Gy(e,r),n,r)},Gy=(t,e)=>{var u;let n=typeof t=="function"?t():t;if(!e.applyRegexFlags||!n.flags)return n.source;let r={i:n.flags.includes("i"),m:n.flags.includes("m"),s:n.flags.includes("s")},s=r.i?n.source.toLowerCase():n.source,i="",a=!1,o=!1,l=!1;for(let c=0;c<s.length;c++){if(a){i+=s[c],a=!1;continue}if(r.i){if(o){if(s[c].match(/[a-z]/)){l?(i+=s[c],i+=`${s[c-2]}-${s[c]}`.toUpperCase(),l=!1):s[c+1]==="-"&&((u=s[c+2])!=null&&u.match(/[a-z]/))?(i+=s[c],l=!0):i+=`${s[c]}${s[c].toUpperCase()}`;continue}}else if(s[c].match(/[a-z]/)){i+=`[${s[c]}${s[c].toUpperCase()}]`;continue}}if(r.m){if(s[c]==="^"){i+=`(^|(?<=[\r
]))`;continue}else if(s[c]==="$"){i+=`($|(?=[\r
]))`;continue}}if(r.s&&s[c]==="."){i+=o?`${s[c]}\r
`:`[${s[c]}\r
]`;continue}i+=s[c],s[c]==="\\"?a=!0:o&&s[c]==="]"?o=!1:!o&&s[c]==="["&&(o=!0)}try{let c=new RegExp(i)}catch(c){return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),n.source}return i};function Hl(t,e){var r,s,i,a,o,l,u;if(e.target==="openApi3"&&((r=t.keyType)==null?void 0:r._def.typeName)===y.ZodEnum)return{type:"object",required:t.keyType._def.values,properties:t.keyType._def.values.reduce((c,f)=>{var h;return{...c,[f]:(h=j(t.valueType._def,{...e,currentPath:[...e.currentPath,"properties",f]}))!=null?h:{}}},{}),additionalProperties:!1};let n={type:"object",additionalProperties:(s=j(t.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?s:{}};if(e.target==="openApi3")return n;if(((i=t.keyType)==null?void 0:i._def.typeName)===y.ZodString&&((a=t.keyType._def.checks)!=null&&a.length)){let{type:c,...f}=Wl(t.keyType._def,e);return{...n,propertyNames:f}}else{if(((o=t.keyType)==null?void 0:o._def.typeName)===y.ZodEnum)return{...n,propertyNames:{enum:t.keyType._def.values}};if(((l=t.keyType)==null?void 0:l._def.typeName)===y.ZodBranded&&t.keyType._def.type._def.typeName===y.ZodString&&((u=t.keyType._def.type._def.checks)!=null&&u.length)){let{type:c,...f}=Zl(t.keyType._def,e);return{...n,propertyNames:f}}}return n}function ev(t,e){if(e.mapStrategy==="record")return Hl(t,e);let n=j(t.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=j(t.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[n,r],minItems:2,maxItems:2}}}function tv(t){let e=t.values,r=Object.keys(t.values).filter(i=>typeof e[e[i]]!="number").map(i=>e[i]),s=Array.from(new Set(r.map(i=>typeof i)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function nv(){return{not:{}}}function rv(t){return t.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}var Ua={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function iv(t,e){if(e.target==="openApi3")return sv(t,e);let n=t.options instanceof Map?Array.from(t.options.values()):t.options;if(n.every(r=>r._def.typeName in Ua&&(!r._def.checks||!r._def.checks.length))){let r=n.reduce((s,i)=>{let a=Ua[i._def.typeName];return a&&!s.includes(a)?[...s,a]:s},[]);return{type:r.length>1?r:r[0]}}else if(n.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){let r=n.reduce((s,i)=>{let a=typeof i._def.value;switch(a){case"string":case"number":case"boolean":return[...s,a];case"bigint":return[...s,"integer"];case"object":if(i._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===n.length){let s=r.filter((i,a,o)=>o.indexOf(i)===a);return{type:s.length>1?s:s[0],enum:n.reduce((i,a)=>i.includes(a._def.value)?i:[...i,a._def.value],[])}}}else if(n.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:n.reduce((r,s)=>[...r,...s._def.values.filter(i=>!r.includes(i))],[])};return sv(t,e)}var sv=(t,e)=>{let n=(t.options instanceof Map?Array.from(t.options.values()):t.options).map((r,s)=>j(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return n.length?{anyOf:n}:void 0};function av(t,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(t.innerType._def.typeName)&&(!t.innerType._def.checks||!t.innerType._def.checks.length))return e.target==="openApi3"?{type:Ua[t.innerType._def.typeName],nullable:!0}:{type:[Ua[t.innerType._def.typeName],"null"]};if(e.target==="openApi3"){let r=j(t.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}let n=j(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return n&&{anyOf:[n,{type:"null"}]}}function ov(t,e){let n={type:"number"};if(!t.checks)return n;for(let r of t.checks)switch(r.kind){case"int":n.type="integer",df(n,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?H(n,"minimum",r.value,r.message,e):H(n,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(n.exclusiveMinimum=!0),H(n,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?H(n,"maximum",r.value,r.message,e):H(n,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(n.exclusiveMaximum=!0),H(n,"maximum",r.value,r.message,e));break;case"multipleOf":H(n,"multipleOf",r.value,r.message,e);break}return n}function pk(t,e){var n,r;return e.removeAdditionalStrategy==="strict"?t.catchall._def.typeName==="ZodNever"?t.unknownKeys!=="strict":(n=j(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?n:!0:t.catchall._def.typeName==="ZodNever"?t.unknownKeys==="passthrough":(r=j(t.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]}))!=null?r:!0}function lv(t,e){let n={type:"object",...Object.entries(t.shape()).reduce((r,[s,i])=>{if(i===void 0||i._def===void 0)return r;let a=j(i._def,{...e,currentPath:[...e.currentPath,"properties",s],propertyPath:[...e.currentPath,"properties",s]});return a===void 0?r:{properties:{...r.properties,[s]:a},required:i.isOptional()?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:pk(t,e)};return n.required.length||delete n.required,n}var uv=(t,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return j(t.innerType._def,e);let n=j(t.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return n?{anyOf:[{not:{}},n]}:{}};var cv=(t,e)=>{if(e.pipeStrategy==="input")return j(t.in._def,e);if(e.pipeStrategy==="output")return j(t.out._def,e);let n=j(t.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=j(t.out._def,{...e,currentPath:[...e.currentPath,"allOf",n?"1":"0"]});return{allOf:[n,r].filter(s=>s!==void 0)}};function dv(t,e){return j(t.type._def,e)}function fv(t,e){let r={type:"array",uniqueItems:!0,items:j(t.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return t.minSize&&H(r,"minItems",t.minSize.value,t.minSize.message,e),t.maxSize&&H(r,"maxItems",t.maxSize.value,t.maxSize.message,e),r}function pv(t,e){return t.rest?{type:"array",minItems:t.items.length,items:t.items.map((n,r)=>j(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[]),additionalItems:j(t.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:t.items.length,maxItems:t.items.length,items:t.items.map((n,r)=>j(n._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((n,r)=>r===void 0?n:[...n,r],[])}}function mv(){return{not:{}}}function hv(){return{}}var gv=(t,e)=>j(t.innerType._def,e);function j(t,e,n=!1){var a;let r=e.seen.get(t);if(e.override){let o=(a=e.override)==null?void 0:a.call(e,t,e,r,n);if(o!==zy)return o}if(r&&!n){let o=mk(r,e);if(o!==void 0)return o}let s={def:t,path:e.currentPath,jsonSchema:void 0};e.seen.set(t,s);let i=gk(t,t.typeName,e);return i&&yk(t,e,i),s.jsonSchema=i,i}var mk=(t,e)=>{switch(e.$refStrategy){case"root":return{$ref:t.path.join("/")};case"relative":return{$ref:hk(e.currentPath,t.path)};case"none":case"seen":return t.path.length<e.currentPath.length&&t.path.every((n,r)=>e.currentPath[r]===n)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},hk=(t,e)=>{let n=0;for(;n<t.length&&n<e.length&&t[n]===e[n];n++);return[(t.length-n).toString(),...e.slice(n)].join("/")},gk=(t,e,n)=>{switch(e){case y.ZodString:return Wl(t,n);case y.ZodNumber:return ov(t,n);case y.ZodObject:return lv(t,n);case y.ZodBigInt:return Wy(t,n);case y.ZodBoolean:return Hy();case y.ZodDate:return ff(t,n);case y.ZodUndefined:return mv();case y.ZodNull:return rv(n);case y.ZodArray:return Zy(t,n);case y.ZodUnion:case y.ZodDiscriminatedUnion:return iv(t,n);case y.ZodIntersection:return Jy(t,n);case y.ZodTuple:return pv(t,n);case y.ZodRecord:return Hl(t,n);case y.ZodLiteral:return Yy(t,n);case y.ZodEnum:return Xy(t);case y.ZodNativeEnum:return tv(t);case y.ZodNullable:return av(t,n);case y.ZodOptional:return uv(t,n);case y.ZodMap:return ev(t,n);case y.ZodSet:return fv(t,n);case y.ZodLazy:return j(t.getter()._def,n);case y.ZodPromise:return dv(t,n);case y.ZodNaN:case y.ZodNever:return nv();case y.ZodEffects:return Qy(t,n);case y.ZodAny:return Vy();case y.ZodUnknown:return hv();case y.ZodDefault:return Ky(t,n);case y.ZodBranded:return Zl(t,n);case y.ZodReadonly:return gv(t,n);case y.ZodCatch:return qy(t,n);case y.ZodPipeline:return cv(t,n);case y.ZodFunction:case y.ZodVoid:case y.ZodSymbol:return;default:return(r=>{})(e)}},yk=(t,e,n)=>(t.description&&(n.description=t.description,e.markdownDescription&&(n.markdownDescription=t.description)),n);var yv=(t,e)=>{var l;let n=By(e),r=typeof e=="object"&&e.definitions?Object.entries(e.definitions).reduce((u,[c,f])=>{var h;return{...u,[c]:(h=j(f._def,{...n,currentPath:[...n.basePath,n.definitionPath,c]},!0))!=null?h:{}}},{}):void 0,s=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,i=(l=j(t._def,s===void 0?n:{...n,currentPath:[...n.basePath,n.definitionPath,s]},!1))!=null?l:{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(i.title=a);let o=s===void 0?r?{...i,[n.definitionPath]:r}:i:{$ref:[...n.$refStrategy==="relative"?[]:n.basePath,n.definitionPath,s].join("/"),[n.definitionPath]:{...r,[s]:i}};return n.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":n.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};var vv=yv;var _v=require("events");function vk(t,e,{errorPrefix:n}){e.forEach(r=>{if(!t[r])throw new Error(`${n||""}\`${r}\` is required`)})}var os=class extends _v.EventEmitter{constructor({name:n,description:r,outputSchema:s,model:i,system:a,messages:o,tools:l}={},u){super();this.name=null;this.description=null;this.outputSchema=null;this.model=null;this.system=null;this._messages=[];this.tools=[];this.MAX_EXPERTS=5;this.EXPERT_NUM_TOKENS=150;if(vk({...arguments[0]},["model"],{errorPrefix:"[Agent.constructor()] "}),s&&!(s instanceof lf.ZodType))throw new Error("outputSchema must be an instance of z.ZodType");this.llm=u,this.name=n||null,this.description=r||null,this.outputSchema=s||null,this.model=i||"gpt-4o-mini",this.system=a||null,this._messages=o||[],this.tools=l||[],this.emit("ready",this)}get conversation(){return this.messages.map(r=>`${r.role}${r.name?" ("+r.name+") ":""}: ${r.content}`).join(`
---
`)}get messages(){let n=[...this._messages];return this.system&&n.unshift({role:"system",content:this.system}),n}get toollist(){return(Array.isArray(this.tools)?this.tools:[]).filter(r=>r.toolDefinition).map(r=>{let s=r.toolDefinition;return s.function.parameters&&(s.function.parameters=vv(s.function.parameters)),s})}async process(n){let r=this.toollist||[];return await this.createExpert({system:this.system||"You are a helpful assistant",max_tokens:null,tools:r})(n)}async ask(n,r,s){var f,h;r={model:"gpt-4o-mini",system:"You are a helpful assistant",messages:[],...r||{}};let{model:i,system:a,messages:o}=r;if(s&&s instanceof lf.Schema)return await this.structuredAsk(n,{schema:s,config:r});let l=[...o||[],{role:"user",content:n}],u=await this.llm.chat.completions.create({model:i,messages:[{role:"system",content:a},...l],stream:!0}),c="";for await(let g of u){let v=((h=(f=g.choices[0])==null?void 0:f.delta)==null?void 0:h.content)||"";c+=v,this.emit("chunk",g),this.emit("udatedResponse",c)}return this._messages=[...l,{role:"assistant",content:c}],c}static splitObj(n,r){if(!n&&!r)return{newObj:{},originalObj:{}};if(!r)return{newObj:n,originalObj:{}};if(!n)return{newObj:r,originalObj:{}};let s=Object.keys(r),i={},a={...n};return s.forEach(o=>{i[o]=n[o]||r[o],delete a[o]}),{newObj:i,originalObj:a}}static createExpert(n={system:""},r){return new os(n).createExpert(n,r)}createExpert(n={system:""},r){n={model:process.env.DEFAULT_OPENAI_MODEL,token_limit:this.EXPERT_NUM_TOKENS,tools:[],messages:[],...n||{},schemaName:"answer_the_question"},this.system&&!n.system&&(n.system=this.system);let{newObj:s,originalObj:i}=os.splitObj(n,{model:process.env.DEFAULT_OPENAI_MODEL,tools:[],messages:[],temperature:null});return s.tools.length<=0&&delete s.tools,s.messages.length<=0&&delete s.messages,s.system||delete s.system,s.max_tokens||delete s.max_tokens,s.temperature||delete s.temperature,(async o=>{var h;let l=n.token_limit?`Keep your answer under ${n.token_limit} tokens (approx ${Math.floor(n.token_limit*.75)} words).`:"",u=`Current Date and Time: ${new Date().toLocaleString()}`;s.messages=[{role:"system",content:`${u}
${n.system}

${l}`},...Array.isArray(s.messages)?s.messages:[],{role:"user",content:o}],s.max_tokens||delete s.max_tokens,r&&(s.response_format=$y(r,n.schemaName||"defaultSchemaName")),this!=null&&this.emit&&this.emit("expert:start",{expert:i.expert||{role:"expert"},prompt:o,config:s});let c,f;return((h=s.tools)==null?void 0:h.length)>0?(c=await this.llm.beta.chat.completions.runTools({model:s.model,messages:s.messages,tools:s.tools}).finalContent(),f=c):(r?c=await this.llm.beta.chat.completions.parse(s):c=await this.llm.chat.completions.create(s),f=r?c.choices[0].message.parsed:c.choices[0].message.content),this!=null&&this.emit&&this.emit("expert:end",{expert:i.expert||{role:"expert"},prompt:o,out:f,config:s}),f}).bind(this)}async structuredAsk(n,{schema:r,config:s={system:""}}){return await this.createExpert(s,r)(n)}static toolDefinition(n,{name:r,description:s,schema:i}){let a={type:"function",function:{name:r||n.name,description:s||null,function:n,parameters:i||null}};return n.toolDefinition=a,n}};var Ba=require("obsidian"),wv=Ze(Ge()),xv=Ze(ml()),_e=Ze(Ge());var ql=[{title:"Generic",system:"You are a AI Writer's Assistant.",template:`
---
{selected}
---`,action:()=>new Ba.Notice("Summarize selected!")},{title:"Summarize",system:"You are a AI Writer's Assistant. You specialize in comprehensively summarizing content, with a focus on clarity and conciseness.",template:`Summarize the following:
---
{selected}
---`,action:()=>new Ba.Notice("Summarize selected!")},{title:"Extend",system:"You are a AI Writer's Assistant. You specialize in extending content, with a focus on depth and detail.",template:`Extend the following by adding another paragraph: 
---
{selected}
---`,action:()=>new Ba.Notice("Extend selected!")},{title:"Rephrase",system:"You are a AI Writer's Assistant. You specialize in rephrasing content, with a focus on clarity and conciseness.",template:`Rephrase the following: 
---
{selected}
---`,action:()=>new Ba.Notice("Rephrase selected!")}],Kl=t=>{var f,h,g,v,w,E;console.dir({contextualData:t}),console.dir((g=(h=(f=t==null?void 0:t.app)==null?void 0:f.workspace.activeEditor)==null?void 0:h.editor)==null?void 0:g.getSelection());let[e,n]=_e.default.useState(ql[0].system),[r,s]=_e.default.useState(""),[i,a]=_e.default.useState((E=(w=(v=t==null?void 0:t.app)==null?void 0:v.workspace.activeEditor)==null?void 0:w.editor)==null?void 0:E.getSelection()),[o,l]=_e.default.useState("");async function u(p){let d=ql.find(m=>m.title===(p==null?void 0:p.target.value)||ql[0].title);d&&(n(d.system),l(d.template.replace("{selected}",i||"")),d.action())}async function c(){if(!t.plugin||!t.app)return;let d=document.querySelector('[data-id="query_field_input"]').value,m=i,_=[];_.push(d),m&&(_.push("---"),_.push(m),_.push("---"));let x=_.join(`
`);console.log(`Query: ${d}`),console.log(`System: ${e}`),console.log(`Prompt: ${x}`);let C=await t.plugin.agent.ask(x,{system:e});console.log(C),s(C)}return _e.default.useEffect(()=>{u(void 0)},[]),_e.default.createElement(yn.Provider,{value:t},_e.default.createElement("div",{className:"systemSelect"},_e.default.createElement("label",{"data-id":"agent_preset_label"},"Agent Preset",_e.default.createElement("select",{"data-id":"agent_preset",onChange:u},ql.map(p=>_e.default.createElement("option",{key:p.title,value:p.title},p.title)))),_e.default.createElement("div",{"data-id":"query_field"},_e.default.createElement("label",null,"Query"),_e.default.createElement("textarea",{"data-id":"query_field_input",rows:6,value:o,onChange:p=>l(p.target.value),onKeyDown:p=>{if(p.shiftKey&&p.key==="Enter"){p.preventDefault(),c();return}}})),_e.default.createElement("div",{"data-id":"button_bar"},_e.default.createElement("button",{"data-id":"submit_button",onClick:c},"Submit")),r&&_e.default.createElement("div",{"data-id":"response_field"},_e.default.createElement("label",null,"Response"),_e.default.createElement("textarea",{readOnly:!0,value:r,"data-id":"response_content"}))))};Kl.mount=(t,e)=>{(0,xv.createRoot)(t).render((0,wv.createElement)(Kl,e))};var kv=Ze(Ge()),Sv=Ze(ml()),Tn=Ze(Ge());var Ql=t=>{var v,w,E,p,d,m,_,x,C;console.dir({contextualData:t}),console.dir((E=(w=(v=t==null?void 0:t.app)==null?void 0:v.workspace.activeEditor)==null?void 0:w.editor)==null?void 0:E.getSelection());let e=((p=t==null?void 0:t.plugin)==null?void 0:p.settings)||{},n=(m=(d=t==null?void 0:t.app)==null?void 0:d.workspace.activeEditor)==null?void 0:m.editor,r=n==null?void 0:n.getDoc(),s=((C=(x=(_=t==null?void 0:t.app)==null?void 0:_.workspace.activeEditor)==null?void 0:x.editor)==null?void 0:C.getSelection())||"",i=r==null?void 0:r.getValue(),a=`${e.systemPrompt}

 Instructions:${e.writeWithAiSystem}`;console.log("system",a);let[o,l]=Tn.default.useState(""),[u,c]=Tn.default.useState(n==null?void 0:n.getSelection()),[f,h]=Tn.default.useState(!1);async function g(){if(!t.plugin||!t.app)return;let A=`${document.querySelector('[data-id="query_field_input"]').value}:  ${s}`;h(!0);let D=B=>{var K,De;console.log(B),n==null||n.replaceSelection(((De=(K=B.choices[0])==null?void 0:K.delta)==null?void 0:De.content)||""),n==null||n.scrollIntoView({from:n.getCursor("from"),to:n.getCursor()})};t.plugin.agent.addListener("chunk",D);let R=await t.plugin.agent.ask(A,{system:a});t.plugin.agent.removeListener("chunk",D),h(!1),console.log(t.modal),t.modal&&t.modal.close()}return Tn.default.useEffect(()=>{let P=document.querySelector('[data-id="query_field_input"]');P&&P.focus()},[]),Tn.default.createElement(yn.Provider,{value:t},Tn.default.createElement("div",{className:"quickEdit"},!f&&Tn.default.createElement("textarea",{"data-id":"query_field_input",className:"query-field",rows:6,onKeyDown:P=>{if(P.key==="Enter"&&!P.shiftKey){P.preventDefault(),g();return}}}),f&&Tn.default.createElement("div",null,"Loading")))};Ql.mount=(t,e)=>{(0,Sv.createRoot)(t).render((0,kv.createElement)(Ql,e))};var Xl=class extends Va.Plugin{async onload(){await this.loadSettings(),this.llm=new V({apiKey:this.settings.openAIKey,dangerouslyAllowBrowser:!0}),this.agent=new os({name:"Personal Assistant",description:"A personal assistant that can help you with your daily tasks.",model:"gpt-4o-mini",system:"You are a helpful assistant. You are easy-going, engaging, funny and charming. You respond concisely, with wisdom and humor, and in a readable format. If there are references and links to online resources, please include them in a list."},this.llm),this.addSettingTab(new $l(this.app,this)),this.registerView(ls,n=>new fa(n,this)),this.addRibbonIcon("brain-circuit","AI Chat",()=>this.toggleView()),this.addCommand({id:"show-dialog",name:"Show Dialog",callback:()=>{console.dir(this);let n={app:this.app,plugin:this},r=new Va.Modal(this.app);r.titleEl.setText("AI Writer Tools");let s=r.contentEl.createDiv();Kl.mount(s,n),r.open()},hotkeys:[{modifiers:["Alt"],key:"J"}]}),this.addCommand({id:"aiw-write-with-ai",name:"Write with AI",callback:()=>{var a,o,l;let n=((l=(o=(a=this.app)==null?void 0:a.workspace.activeEditor)==null?void 0:o.editor)==null?void 0:l.getSelection())||"";console.dir(this);let r={app:this.app,plugin:this},s=new Va.Modal(this.app);s.titleEl.setText("Write with AI");let i=s.contentEl.createDiv();Ql.mount(i,{...r,modal:s}),s.open()},hotkeys:[{modifiers:["Alt"],key:"I"}]})}async loadSettings(){return this.settings=Object.assign({},Zg,await this.loadData()),this.settings}async saveSettings(){await this.saveData(this.settings)}async toggleView(){let{workspace:n}=this.app,r=n.getLeavesOfType(ls)[0];r?r.detach():(r=n.getRightLeaf(!1),await r.setViewState({type:ls,active:!0}),n.revealLeaf(r))}async onunload(){this.statusBarElement.remove()}};
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,
